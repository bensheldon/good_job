# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `async-http-faraday` gem.
# Please instead update this file by running `bin/tapioca gem async-http-faraday`.


# source://async-http-faraday//lib/async/http/faraday/version.rb#6
module Async; end

# source://async-http-faraday//lib/async/http/faraday/version.rb#7
module Async::HTTP; end

# source://async-http-faraday//lib/async/http/faraday/version.rb#8
module Async::HTTP::Faraday; end

# An adapter that allows Faraday to use Async::HTTP as the underlying HTTP client.
#
# source://async-http-faraday//lib/async/http/faraday/adapter.rb#97
class Async::HTTP::Faraday::Adapter < ::Faraday::Adapter
  # Create a Faraday compatible adapter.
  #
  # @return [Adapter] a new instance of Adapter
  #
  # source://async-http-faraday//lib/async/http/faraday/adapter.rb#123
  def initialize(*_arg0, **_arg1, &_arg2); end

  # Make a request using the adapter.
  #
  # source://async-http-faraday//lib/async/http/faraday/adapter.rb#154
  def call(env); end

  # Close all clients.
  #
  # source://async-http-faraday//lib/async/http/faraday/adapter.rb#143
  def close; end

  # Returns the value of attribute read_timeout.
  #
  # source://async-http-faraday//lib/async/http/faraday/adapter.rb#140
  def read_timeout; end

  # Returns the value of attribute timeout.
  #
  # source://async-http-faraday//lib/async/http/faraday/adapter.rb#137
  def timeout; end

  private

  # source://async-http-faraday//lib/async/http/faraday/adapter.rb#259
  def encoded_body(response); end

  # source://async-http-faraday//lib/async/http/faraday/adapter.rb#274
  def extract_type_parameters(content_type); end

  # source://async-http-faraday//lib/async/http/faraday/adapter.rb#174
  def perform_request(env); end

  # source://async-http-faraday//lib/async/http/faraday/adapter.rb#231
  def with_client(env); end

  # source://async-http-faraday//lib/async/http/faraday/adapter.rb#249
  def with_timeout(timeout = T.unsafe(nil), task: T.unsafe(nil)); end

  class << self
    # Create a new parallel manager, which is used to handle multiple concurrent requests.
    #
    # source://async-http-faraday//lib/async/http/faraday/adapter.rb#101
    def setup_parallel_manager(**options); end
  end
end

# The exceptions that are considered connection errors and result in a `Faraday::ConnectionFailed` exception.
#
# source://async-http-faraday//lib/async/http/faraday/adapter.rb#106
Async::HTTP::Faraday::Adapter::CONNECTION_EXCEPTIONS = T.let(T.unsafe(nil), Array)

# This is a simple wrapper around Faraday's body that allows it to be read in chunks.
#
# source://async-http-faraday//lib/async/http/faraday/adapter.rb#28
class Async::HTTP::Faraday::BodyReadWrapper < ::Protocol::HTTP::Body::Readable
  # Create a new wrapper around the given body.
  #
  # The body must respond to `#read` and `#close` and is often an instance of `IO` or `Faraday::Multipart::CompositeReadIO`.
  #
  # @return [BodyReadWrapper] a new instance of BodyReadWrapper
  #
  # source://async-http-faraday//lib/async/http/faraday/adapter.rb#36
  def initialize(body, length = T.unsafe(nil), block_size: T.unsafe(nil)); end

  # Close the body if possible.
  #
  # source://async-http-faraday//lib/async/http/faraday/adapter.rb#46
  def close(error = T.unsafe(nil)); end

  # Returns the value of attribute length.
  #
  # source://async-http-faraday//lib/async/http/faraday/adapter.rb#43
  def length; end

  # Read from the body in chunks.
  #
  # source://async-http-faraday//lib/async/http/faraday/adapter.rb#53
  def read; end
end

# An interface for creating and managing HTTP clients.
#
# source://async-http-faraday//lib/async/http/faraday/clients.rb#17
class Async::HTTP::Faraday::Clients
  # Create a new interface for managing HTTP clients.
  #
  # @return [Clients] a new instance of Clients
  #
  # source://async-http-faraday//lib/async/http/faraday/clients.rb#27
  def initialize(**options, &block); end

  # Close all clients.
  #
  # source://async-http-faraday//lib/async/http/faraday/clients.rb#33
  def close; end

  # Make a new client for the given endpoint.
  #
  # source://async-http-faraday//lib/async/http/faraday/clients.rb#39
  def make_client(endpoint); end

  # Get a client for the given endpoint.
  #
  # source://async-http-faraday//lib/async/http/faraday/clients.rb#49
  def with_client(endpoint); end

  # Get a client for the given proxy endpoint and endpoint.
  #
  # source://async-http-faraday//lib/async/http/faraday/clients.rb#62
  def with_proxied_client(proxy_endpoint, endpoint); end

  class << self
    # Create a new instance of the class.
    #
    # source://async-http-faraday//lib/async/http/faraday/clients.rb#19
    def call(*_arg0, **_arg1, &_arg2); end
  end
end

# Implement the Faraday parallel manager interface, using Async.
#
# source://async-http-faraday//lib/async/http/faraday/adapter.rb#59
class Async::HTTP::Faraday::ParallelManager
  # Create a new parallel manager.
  #
  # @return [ParallelManager] a new instance of ParallelManager
  #
  # source://async-http-faraday//lib/async/http/faraday/adapter.rb#61
  def initialize(options = T.unsafe(nil)); end

  # Run the given block asynchronously, using the barrier if available.
  #
  # source://async-http-faraday//lib/async/http/faraday/adapter.rb#74
  def async(&block); end

  # Execute the given block which can perform multiple concurrent requests, waiting for them all to complete.
  #
  # source://async-http-faraday//lib/async/http/faraday/adapter.rb#83
  def execute(&block); end

  # @deprecated Please update your Faraday version!
  #
  # source://async-http-faraday//lib/async/http/faraday/adapter.rb#67
  def run; end
end

# An interface for creating and managing per-thread persistent HTTP clients.
#
# source://async-http-faraday//lib/async/http/faraday/clients.rb#144
class Async::HTTP::Faraday::PerThreadPersistentClients
  # Create a new instance of the class.
  #
  # @return [PerThreadPersistentClients] a new instance of PerThreadPersistentClients
  #
  # source://async-http-faraday//lib/async/http/faraday/clients.rb#149
  def initialize(**options, &block); end

  # Close all clients.
  #
  # This will close all clients associated with all threads.
  #
  # source://async-http-faraday//lib/async/http/faraday/clients.rb#178
  def close; end

  # Get a client for the given endpoint. If a client already exists for the host, it will be reused.
  #
  # The client instance will be will be cached per-thread.
  #
  # source://async-http-faraday//lib/async/http/faraday/clients.rb#161
  def with_client(endpoint, &block); end

  # Get a client for the given proxy endpoint and endpoint. If a client already exists for the host, it will be reused.
  #
  # The client instance will be will be cached per-thread.
  #
  # source://async-http-faraday//lib/async/http/faraday/clients.rb#171
  def with_proxied_client(proxy_endpoint, endpoint, &block); end

  private

  # source://async-http-faraday//lib/async/http/faraday/clients.rb#194
  def clients; end

  # source://async-http-faraday//lib/async/http/faraday/clients.rb#190
  def make_clients; end
end

# An interface for creating and managing persistent HTTP clients.
#
# source://async-http-faraday//lib/async/http/faraday/clients.rb#74
class Async::HTTP::Faraday::PersistentClients < ::Async::HTTP::Faraday::Clients
  # Create a new instance of the class.
  #
  # @return [PersistentClients] a new instance of PersistentClients
  #
  # source://async-http-faraday//lib/async/http/faraday/clients.rb#76
  def initialize(*_arg0, **_arg1, &_arg2); end

  # Close all clients.
  #
  # source://async-http-faraday//lib/async/http/faraday/clients.rb#83
  def close; end

  # Lookup or create a client for the given endpoint.
  #
  # source://async-http-faraday//lib/async/http/faraday/clients.rb#95
  def make_client(endpoint); end

  # Get a client for the given endpoint. If a client already exists for the host, it will be reused.
  #
  # @yield [make_client(endpoint)]
  #
  # source://async-http-faraday//lib/async/http/faraday/clients.rb#106
  def with_client(endpoint); end

  # Get a client for the given proxy endpoint and endpoint. If a client already exists for the host, it will be reused.
  #
  # @yield [proxied_client]
  #
  # source://async-http-faraday//lib/async/http/faraday/clients.rb#114
  def with_proxied_client(proxy_endpoint, endpoint); end

  private

  # source://async-http-faraday//lib/async/http/faraday/clients.rb#126
  def fetch(key); end

  # source://async-http-faraday//lib/async/http/faraday/clients.rb#132
  def host_key(endpoint); end
end

# source://async-http-faraday//lib/async/http/faraday/version.rb#9
Async::HTTP::Faraday::VERSION = T.let(T.unsafe(nil), String)

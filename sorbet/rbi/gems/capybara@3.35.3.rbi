# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `capybara` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module Capybara
  extend(::Capybara::DSL)

  class << self
    def HTML(html); end
    def add_selector(name, **options, &block); end
    def allow_gumbo(*args, &block); end
    def allow_gumbo=(*args, &block); end
    def always_include_port(*args, &block); end
    def always_include_port=(*args, &block); end
    def app(*args, &block); end
    def app=(*args, &block); end
    def app_host(*args, &block); end
    def app_host=(*args, &block); end
    def asset_host(*args, &block); end
    def asset_host=(*args, &block); end
    def automatic_label_click(*args, &block); end
    def automatic_label_click=(*args, &block); end
    def automatic_reload(*args, &block); end
    def automatic_reload=(*args, &block); end
    def configure; end
    def current_driver; end
    def current_driver=(name); end
    def current_session; end
    def default_driver(*args, &block); end
    def default_driver=(*args, &block); end
    def default_host(*args, &block); end
    def default_host=(*args, &block); end
    def default_max_wait_time(*args, &block); end
    def default_max_wait_time=(*args, &block); end
    def default_normalize_ws(*args, &block); end
    def default_normalize_ws=(*args, &block); end
    def default_selector(*args, &block); end
    def default_selector=(*args, &block); end
    def default_set_options(*args, &block); end
    def default_set_options=(*args, &block); end
    def disable_animation(*args, &block); end
    def disable_animation=(*args, &block); end
    def drivers; end
    def enable_aria_label(*args, &block); end
    def enable_aria_label=(*args, &block); end
    def enable_aria_role(*args, &block); end
    def enable_aria_role=(*args, &block); end
    def exact(*args, &block); end
    def exact=(*args, &block); end
    def exact_text(*args, &block); end
    def exact_text=(*args, &block); end
    def ignore_hidden_elements(*args, &block); end
    def ignore_hidden_elements=(*args, &block); end
    def javascript_driver(*args, &block); end
    def javascript_driver=(*args, &block); end
    def match(*args, &block); end
    def match=(*args, &block); end
    def mode; end
    def modify_selector(name, &block); end
    def predicates_wait(*args, &block); end
    def predicates_wait=(*args, &block); end
    def raise_server_errors(*args, &block); end
    def raise_server_errors=(*args, &block); end
    def register_driver(name, &block); end
    def register_server(name, &block); end
    def reset!; end
    def reset_sessions!; end
    def reuse_server(*args, &block); end
    def reuse_server=(*args, &block); end
    def run_default_server(app, port); end
    def run_server(*args, &block); end
    def run_server=(*args, &block); end
    def save_path(*args, &block); end
    def save_path=(*args, &block); end
    def server(*args, &block); end
    def server=(*args, &block); end
    def server_errors(*args, &block); end
    def server_errors=(*args, &block); end
    def server_host(*args, &block); end
    def server_host=(*args, &block); end
    def server_port(*args, &block); end
    def server_port=(*args, &block); end
    def servers; end
    def session_name; end
    def session_name=(name); end
    def session_options; end
    def string(html); end
    def test_id(*args, &block); end
    def test_id=(*args, &block); end
    def threadsafe(*args, &block); end
    def threadsafe=(*args, &block); end
    def use_default_driver; end
    def using_driver(driver); end
    def using_session(name_or_session, &block); end
    def using_wait_time(seconds); end
    def visible_text_only(*args, &block); end
    def visible_text_only=(*args, &block); end
    def w3c_click_offset(*args, &block); end
    def w3c_click_offset=(*args, &block); end

    private

    def config; end
    def session_pool; end
    def specified_session; end
    def specified_session=(session); end
  end
end

class Capybara::Ambiguous < ::Capybara::ElementNotFound
end

class Capybara::CapybaraError < ::StandardError
end

class Capybara::Config
  extend(::Forwardable)

  def initialize; end

  def allow_gumbo; end
  def allow_gumbo=(_arg0); end
  def always_include_port(*args, &block); end
  def always_include_port=(*args, &block); end
  def app; end
  def app=(_arg0); end
  def app_host(*args, &block); end
  def app_host=(*args, &block); end
  def asset_host(*args, &block); end
  def asset_host=(*args, &block); end
  def automatic_label_click(*args, &block); end
  def automatic_label_click=(*args, &block); end
  def automatic_reload(*args, &block); end
  def automatic_reload=(*args, &block); end
  def default_driver; end
  def default_driver=(_arg0); end
  def default_host(*args, &block); end
  def default_host=(*args, &block); end
  def default_max_wait_time(*args, &block); end
  def default_max_wait_time=(*args, &block); end
  def default_normalize_ws(*args, &block); end
  def default_normalize_ws=(*args, &block); end
  def default_selector(*args, &block); end
  def default_selector=(*args, &block); end
  def default_set_options(*args, &block); end
  def default_set_options=(*args, &block); end
  def deprecate(method, alternate_method, once: T.unsafe(nil)); end
  def disable_animation(*args, &block); end
  def disable_animation=(*args, &block); end
  def enable_aria_label(*args, &block); end
  def enable_aria_label=(*args, &block); end
  def enable_aria_role(*args, &block); end
  def enable_aria_role=(*args, &block); end
  def exact(*args, &block); end
  def exact=(*args, &block); end
  def exact_text(*args, &block); end
  def exact_text=(*args, &block); end
  def ignore_hidden_elements(*args, &block); end
  def ignore_hidden_elements=(*args, &block); end
  def javascript_driver; end
  def javascript_driver=(_arg0); end
  def match(*args, &block); end
  def match=(*args, &block); end
  def predicates_wait(*args, &block); end
  def predicates_wait=(*args, &block); end
  def raise_server_errors(*args, &block); end
  def raise_server_errors=(*args, &block); end
  def reuse_server; end
  def reuse_server=(_arg0); end
  def run_server(*args, &block); end
  def run_server=(*args, &block); end
  def save_path(*args, &block); end
  def save_path=(*args, &block); end
  def server; end
  def server=(name); end
  def server_errors(*args, &block); end
  def server_errors=(*args, &block); end
  def server_host(*args, &block); end
  def server_host=(*args, &block); end
  def server_port(*args, &block); end
  def server_port=(*args, &block); end
  def session_options; end
  def test_id(*args, &block); end
  def test_id=(*args, &block); end
  def threadsafe; end
  def threadsafe=(bool); end
  def visible_text_only(*args, &block); end
  def visible_text_only=(*args, &block); end
  def w3c_click_offset(*args, &block); end
  def w3c_click_offset=(*args, &block); end
end

Capybara::Config::OPTIONS = T.let(T.unsafe(nil), Array)

module Capybara::DSL
  def accept_alert(*_arg0, &_arg1); end
  def accept_confirm(*_arg0, &_arg1); end
  def accept_prompt(*_arg0, &_arg1); end
  def all(*_arg0, &_arg1); end
  def assert_all_of_selectors(*_arg0, &_arg1); end
  def assert_any_of_selectors(*_arg0, &_arg1); end
  def assert_current_path(*_arg0, &_arg1); end
  def assert_no_current_path(*_arg0, &_arg1); end
  def assert_no_selector(*_arg0, &_arg1); end
  def assert_no_text(*_arg0, &_arg1); end
  def assert_no_title(*_arg0, &_arg1); end
  def assert_none_of_selectors(*_arg0, &_arg1); end
  def assert_selector(*_arg0, &_arg1); end
  def assert_text(*_arg0, &_arg1); end
  def assert_title(*_arg0, &_arg1); end
  def attach_file(*_arg0, &_arg1); end
  def body(*_arg0, &_arg1); end
  def check(*_arg0, &_arg1); end
  def choose(*_arg0, &_arg1); end
  def click_button(*_arg0, &_arg1); end
  def click_link(*_arg0, &_arg1); end
  def click_link_or_button(*_arg0, &_arg1); end
  def click_on(*_arg0, &_arg1); end
  def current_host(*_arg0, &_arg1); end
  def current_path(*_arg0, &_arg1); end
  def current_scope(*_arg0, &_arg1); end
  def current_url(*_arg0, &_arg1); end
  def current_window(*_arg0, &_arg1); end
  def dismiss_confirm(*_arg0, &_arg1); end
  def dismiss_prompt(*_arg0, &_arg1); end
  def evaluate_script(*_arg0, &_arg1); end
  def execute_script(*_arg0, &_arg1); end
  def fill_in(*_arg0, &_arg1); end
  def find(*_arg0, &_arg1); end
  def find_all(*_arg0, &_arg1); end
  def find_button(*_arg0, &_arg1); end
  def find_by_id(*_arg0, &_arg1); end
  def find_field(*_arg0, &_arg1); end
  def find_link(*_arg0, &_arg1); end
  def first(*_arg0, &_arg1); end
  def go_back(*_arg0, &_arg1); end
  def go_forward(*_arg0, &_arg1); end
  def has_button?(*_arg0, &_arg1); end
  def has_checked_field?(*_arg0, &_arg1); end
  def has_content?(*_arg0, &_arg1); end
  def has_css?(*_arg0, &_arg1); end
  def has_current_path?(*_arg0, &_arg1); end
  def has_field?(*_arg0, &_arg1); end
  def has_link?(*_arg0, &_arg1); end
  def has_no_button?(*_arg0, &_arg1); end
  def has_no_checked_field?(*_arg0, &_arg1); end
  def has_no_content?(*_arg0, &_arg1); end
  def has_no_css?(*_arg0, &_arg1); end
  def has_no_current_path?(*_arg0, &_arg1); end
  def has_no_field?(*_arg0, &_arg1); end
  def has_no_link?(*_arg0, &_arg1); end
  def has_no_select?(*_arg0, &_arg1); end
  def has_no_selector?(*_arg0, &_arg1); end
  def has_no_table?(*_arg0, &_arg1); end
  def has_no_text?(*_arg0, &_arg1); end
  def has_no_title?(*_arg0, &_arg1); end
  def has_no_unchecked_field?(*_arg0, &_arg1); end
  def has_no_xpath?(*_arg0, &_arg1); end
  def has_select?(*_arg0, &_arg1); end
  def has_selector?(*_arg0, &_arg1); end
  def has_table?(*_arg0, &_arg1); end
  def has_text?(*_arg0, &_arg1); end
  def has_title?(*_arg0, &_arg1); end
  def has_unchecked_field?(*_arg0, &_arg1); end
  def has_xpath?(*_arg0, &_arg1); end
  def html(*_arg0, &_arg1); end
  def open_new_window(*_arg0, &_arg1); end
  def page; end
  def query(*_arg0, &_arg1); end
  def refresh(*_arg0, &_arg1); end
  def refute_selector(*_arg0, &_arg1); end
  def reset_session!(*_arg0, &_arg1); end
  def response_headers(*_arg0, &_arg1); end
  def save_and_open_page(*_arg0, &_arg1); end
  def save_and_open_screenshot(*_arg0, &_arg1); end
  def save_page(*_arg0, &_arg1); end
  def save_screenshot(*_arg0, &_arg1); end
  def scroll_by(*_arg0, &_arg1); end
  def scroll_to(*_arg0, &_arg1); end
  def select(*_arg0, &_arg1); end
  def send_keys(*_arg0, &_arg1); end
  def source(*_arg0, &_arg1); end
  def status_code(*_arg0, &_arg1); end
  def switch_to_frame(*_arg0, &_arg1); end
  def switch_to_window(*_arg0, &_arg1); end
  def text(*_arg0, &_arg1); end
  def title(*_arg0, &_arg1); end
  def uncheck(*_arg0, &_arg1); end
  def unselect(*_arg0, &_arg1); end
  def using_session(name_or_session, &block); end
  def using_wait_time(seconds, &block); end
  def visit(*_arg0, &_arg1); end
  def window_opened_by(*_arg0, &_arg1); end
  def windows(*_arg0, &_arg1); end
  def within(*_arg0, &_arg1); end
  def within_element(*_arg0, &_arg1); end
  def within_fieldset(*_arg0, &_arg1); end
  def within_frame(*_arg0, &_arg1); end
  def within_table(*_arg0, &_arg1); end
  def within_window(*_arg0, &_arg1); end

  class << self
    def extended(base); end
    def included(base); end
  end
end

module Capybara::Driver
end

class Capybara::Driver::Base
  def accept_modal(type, **options, &blk); end
  def close_window(handle); end
  def current_url; end
  def current_window_handle; end
  def dismiss_modal(type, **options, &blk); end
  def evaluate_async_script(script, *args); end
  def evaluate_script(script, *args); end
  def execute_script(script, *args); end
  def find_css(query, **options); end
  def find_xpath(query, **options); end
  def frame_title; end
  def frame_url; end
  def fullscreen_window(handle); end
  def go_back; end
  def go_forward; end
  def html; end
  def invalid_element_errors; end
  def maximize_window(handle); end
  def needs_server?; end
  def no_such_window_error; end
  def open_new_window; end
  def refresh; end
  def reset!; end
  def resize_window_to(handle, width, height); end
  def response_headers; end
  def save_screenshot(path, **options); end
  def send_keys(*_arg0); end
  def session=(_arg0); end
  def session_options; end
  def status_code; end
  def switch_to_frame(frame); end
  def switch_to_window(handle); end
  def visit(path); end
  def wait?; end
  def window_handles; end
  def window_size(handle); end

  private

  def session; end
end

class Capybara::Driver::Node
  def initialize(driver, native, initial_cache = T.unsafe(nil)); end

  def ==(other); end
  def [](name); end
  def all_text; end
  def checked?; end
  def click(keys = T.unsafe(nil), **options); end
  def disabled?; end
  def double_click(keys = T.unsafe(nil), **options); end
  def drag_to(element, **options); end
  def driver; end
  def drop(*args); end
  def hover; end
  def initial_cache; end
  def inspect; end
  def multiple?; end
  def native; end
  def obscured?; end
  def path; end
  def readonly?; end
  def rect; end
  def right_click(keys = T.unsafe(nil), **options); end
  def scroll_by(x, y); end
  def scroll_to(element, alignment, position = T.unsafe(nil)); end
  def select_option; end
  def selected?; end
  def send_keys(*args); end
  def set(value, **options); end
  def style(styles); end
  def tag_name; end
  def trigger(event); end
  def unselect_option; end
  def value; end
  def visible?; end
  def visible_text; end
end

class Capybara::DriverNotFoundError < ::Capybara::CapybaraError
end

class Capybara::ElementNotFound < ::Capybara::CapybaraError
end

class Capybara::ExpectationNotMet < ::Capybara::ElementNotFound
end

class Capybara::FileNotFound < ::Capybara::CapybaraError
end

class Capybara::FrozenInTime < ::Capybara::CapybaraError
end

module Capybara::Helpers

  private

  def declension(singular, plural, count); end
  def filter_backtrace(trace); end
  def inject_asset_host(html, host: T.unsafe(nil)); end
  def monotonic_time; end
  def normalize_whitespace(text); end
  def timer(expire_in:); end
  def to_regexp(text, exact: T.unsafe(nil), all_whitespace: T.unsafe(nil), options: T.unsafe(nil)); end
  def warn(message, uplevel: T.unsafe(nil)); end

  class << self
    def declension(singular, plural, count); end
    def filter_backtrace(trace); end
    def inject_asset_host(html, host: T.unsafe(nil)); end
    def monotonic_time; end
    def normalize_whitespace(text); end
    def timer(expire_in:); end
    def to_regexp(text, exact: T.unsafe(nil), all_whitespace: T.unsafe(nil), options: T.unsafe(nil)); end
    def warn(message, uplevel: T.unsafe(nil)); end
  end
end

class Capybara::Helpers::Timer
  def initialize(expire_in); end

  def expired?; end
  def stalled?; end

  private

  def current; end
end

class Capybara::InfiniteRedirectError < ::Capybara::CapybaraError
end

module Capybara::Minitest
end

module Capybara::Minitest::Assertions
  def assert_all_of_selectors(*args, &optional_filter_block); end
  def assert_ancestor(*args, &optional_filter_block); end
  def assert_any_of_selectors(*args, &optional_filter_block); end
  def assert_button(*args, &optional_filter_block); end
  def assert_checked_field(*args, &optional_filter_block); end
  def assert_content(*args, **kwargs, &optional_filter_block); end
  def assert_css(*args, &optional_filter_block); end
  def assert_current_path(*args, **kwargs, &optional_filter_block); end
  def assert_field(*args, &optional_filter_block); end
  def assert_link(*args, &optional_filter_block); end
  def assert_matches_css(*args, &optional_filter_block); end
  def assert_matches_selector(*args, &optional_filter_block); end
  def assert_matches_style(*args, &optional_filter_block); end
  def assert_matches_xpath(*args, &optional_filter_block); end
  def assert_no_ancestor(*args, &optional_filter_block); end
  def assert_no_button(*args, &optional_filter_block); end
  def assert_no_checked_field(*args, &optional_filter_block); end
  def assert_no_content(*args, **kwargs, &optional_filter_block); end
  def assert_no_css(*args, &optional_filter_block); end
  def assert_no_current_path(*args, **kwargs, &optional_filter_block); end
  def assert_no_field(*args, &optional_filter_block); end
  def assert_no_link(*args, &optional_filter_block); end
  def assert_no_select(*args, &optional_filter_block); end
  def assert_no_selector(*args, &optional_filter_block); end
  def assert_no_sibling(*args, &optional_filter_block); end
  def assert_no_table(*args, &optional_filter_block); end
  def assert_no_text(*args, **kwargs, &optional_filter_block); end
  def assert_no_title(*args, **kwargs, &optional_filter_block); end
  def assert_no_unchecked_field(*args, &optional_filter_block); end
  def assert_no_xpath(*args, &optional_filter_block); end
  def assert_none_of_selectors(*args, &optional_filter_block); end
  def assert_not_matches_css(*args, &optional_filter_block); end
  def assert_not_matches_selector(*args, &optional_filter_block); end
  def assert_not_matches_xpath(*args, &optional_filter_block); end
  def assert_select(*args, &optional_filter_block); end
  def assert_selector(*args, &optional_filter_block); end
  def assert_sibling(*args, &optional_filter_block); end
  def assert_table(*args, &optional_filter_block); end
  def assert_text(*args, **kwargs, &optional_filter_block); end
  def assert_title(*args, **kwargs, &optional_filter_block); end
  def assert_unchecked_field(*args, &optional_filter_block); end
  def assert_xpath(*args, &optional_filter_block); end
  def refute_ancestor(*args, &optional_filter_block); end
  def refute_button(*args, &optional_filter_block); end
  def refute_checked_field(*args, &optional_filter_block); end
  def refute_content(*args, **kwargs, &optional_filter_block); end
  def refute_css(*args, &optional_filter_block); end
  def refute_current_path(*args, **kwargs, &optional_filter_block); end
  def refute_field(*args, &optional_filter_block); end
  def refute_link(*args, &optional_filter_block); end
  def refute_matches_css(*args, &optional_filter_block); end
  def refute_matches_selector(*args, &optional_filter_block); end
  def refute_matches_xpath(*args, &optional_filter_block); end
  def refute_select(*args, &optional_filter_block); end
  def refute_selector(*args, &optional_filter_block); end
  def refute_sibling(*args, &optional_filter_block); end
  def refute_table(*args, &optional_filter_block); end
  def refute_text(*args, **kwargs, &optional_filter_block); end
  def refute_title(*args, **kwargs, &optional_filter_block); end
  def refute_unchecked_field(*args, &optional_filter_block); end
  def refute_xpath(*args, &optional_filter_block); end

  private

  def determine_subject(args); end
  def extract_locator(args); end
end

class Capybara::ModalNotFound < ::Capybara::CapybaraError
end

module Capybara::Node
end

module Capybara::Node::Actions
  def attach_file(locator = T.unsafe(nil), paths, make_visible: T.unsafe(nil), **options); end
  def check(locator = T.unsafe(nil), **options); end
  def choose(locator = T.unsafe(nil), **options); end
  def click_button(locator = T.unsafe(nil), **options); end
  def click_link(locator = T.unsafe(nil), **options); end
  def click_link_or_button(locator = T.unsafe(nil), **options); end
  def click_on(locator = T.unsafe(nil), **options); end
  def fill_in(locator = T.unsafe(nil), with:, currently_with: T.unsafe(nil), fill_options: T.unsafe(nil), **find_options); end
  def select(value = T.unsafe(nil), from: T.unsafe(nil), **options); end
  def uncheck(locator = T.unsafe(nil), **options); end
  def unselect(value = T.unsafe(nil), from: T.unsafe(nil), **options); end

  private

  def _check_with_label(selector, checked, locator, allow_label_click: T.unsafe(nil), **options); end
  def _reset_style(element); end
  def _update_style(element, style); end
  def find_select_or_datalist_input(from, options); end
  def select_datalist_option(input, value); end
  def while_visible(element, visible_css); end
end

Capybara::Node::Actions::CAPTURE_FILE_ELEMENT_SCRIPT = T.let(T.unsafe(nil), String)

Capybara::Node::Actions::DATALIST_OPTIONS_SCRIPT = T.let(T.unsafe(nil), String)

Capybara::Node::Actions::RESET_STYLE_SCRIPT = T.let(T.unsafe(nil), String)

Capybara::Node::Actions::UPDATE_STYLE_SCRIPT = T.let(T.unsafe(nil), String)

class Capybara::Node::Base
  include(::Capybara::Node::Finders)
  include(::Capybara::Node::Actions)
  include(::Capybara::Node::Matchers)

  def initialize(session, base); end

  def base; end
  def find_css(css, **options); end
  def find_xpath(xpath, **options); end
  def query_scope; end
  def reload; end
  def session; end
  def session_options; end
  def synchronize(seconds = T.unsafe(nil), errors: T.unsafe(nil)); end
  def to_capybara_node; end

  protected

  def catch_error?(error, errors = T.unsafe(nil)); end
  def driver; end
end

class Capybara::Node::Document < ::Capybara::Node::Base
  include(::Capybara::Node::DocumentMatchers)

  def evaluate_script(*args); end
  def execute_script(*args); end
  def inspect; end
  def scroll_to(*args, **options); end
  def text(type = T.unsafe(nil), normalize_ws: T.unsafe(nil)); end
  def title; end
end

module Capybara::Node::DocumentMatchers
  def assert_no_title(title, **options); end
  def assert_title(title, **options); end
  def has_no_title?(title, **options); end
  def has_title?(title, **options); end

  private

  def _verify_title(title, options); end
end

class Capybara::Node::Element < ::Capybara::Node::Base
  def initialize(session, base, query_scope, query); end

  def [](attribute); end
  def allow_reload!(idx = T.unsafe(nil)); end
  def checked?; end
  def click(*keys, **options); end
  def disabled?; end
  def double_click(*keys, **options); end
  def drag_to(node, **options); end
  def drop(*args); end
  def evaluate_async_script(script, *args); end
  def evaluate_script(script, *args); end
  def execute_script(script, *args); end
  def flash; end
  def hover; end
  def initial_cache; end
  def inspect; end
  def multiple?; end
  def native; end
  def obscured?; end
  def path; end
  def readonly?; end
  def rect; end
  def reload; end
  def right_click(*keys, **options); end
  def scroll_to(pos_or_el_or_x, y = T.unsafe(nil), align: T.unsafe(nil), offset: T.unsafe(nil)); end
  def select_option(wait: T.unsafe(nil)); end
  def selected?; end
  def send_keys(*args); end
  def set(value, **options); end
  def style(*styles); end
  def tag_name; end
  def text(type = T.unsafe(nil), normalize_ws: T.unsafe(nil)); end
  def trigger(event); end
  def unselect_option(wait: T.unsafe(nil)); end
  def value; end
  def visible?; end

  private

  def perform_click_action(keys, wait: T.unsafe(nil), **options); end
end

Capybara::Node::Element::STYLE_SCRIPT = T.let(T.unsafe(nil), String)

module Capybara::Node::Finders
  def all(*args, allow_reload: T.unsafe(nil), **options, &optional_filter_block); end
  def ancestor(*args, **options, &optional_filter_block); end
  def find(*args, **options, &optional_filter_block); end
  def find_all(*args, allow_reload: T.unsafe(nil), **options, &optional_filter_block); end
  def find_button(locator = T.unsafe(nil), **options, &optional_filter_block); end
  def find_by_id(id, **options, &optional_filter_block); end
  def find_field(locator = T.unsafe(nil), **options, &optional_filter_block); end
  def find_link(locator = T.unsafe(nil), **options, &optional_filter_block); end
  def first(*args, **options, &optional_filter_block); end
  def sibling(*args, **options, &optional_filter_block); end

  private

  def ambiguous?(query, result); end
  def options_include_minimum?(opts); end
  def parent; end
  def prefer_exact?(query); end
  def synced_resolve(query); end
end

module Capybara::Node::Matchers
  def ==(other); end
  def assert_all_of_selectors(*args, **options, &optional_filter_block); end
  def assert_ancestor(*args, &optional_filter_block); end
  def assert_any_of_selectors(*args, wait: T.unsafe(nil), **options, &optional_filter_block); end
  def assert_matches_selector(*args, &optional_filter_block); end
  def assert_matches_style(styles = T.unsafe(nil), **options); end
  def assert_no_ancestor(*args, &optional_filter_block); end
  def assert_no_selector(*args, &optional_filter_block); end
  def assert_no_sibling(*args, &optional_filter_block); end
  def assert_no_text(type_or_text, *args, **opts); end
  def assert_none_of_selectors(*args, **options, &optional_filter_block); end
  def assert_not_matches_selector(*args, &optional_filter_block); end
  def assert_selector(*args, &optional_filter_block); end
  def assert_sibling(*args, &optional_filter_block); end
  def assert_style(styles = T.unsafe(nil), **options); end
  def assert_text(type_or_text, *args, **opts); end
  def has_ancestor?(*args, **options, &optional_filter_block); end
  def has_button?(locator = T.unsafe(nil), **options, &optional_filter_block); end
  def has_checked_field?(locator = T.unsafe(nil), **options, &optional_filter_block); end
  def has_content?(*args, **options); end
  def has_css?(path, **options, &optional_filter_block); end
  def has_field?(locator = T.unsafe(nil), **options, &optional_filter_block); end
  def has_link?(locator = T.unsafe(nil), **options, &optional_filter_block); end
  def has_no_ancestor?(*args, **options, &optional_filter_block); end
  def has_no_button?(locator = T.unsafe(nil), **options, &optional_filter_block); end
  def has_no_checked_field?(locator = T.unsafe(nil), **options, &optional_filter_block); end
  def has_no_content?(*args, **options); end
  def has_no_css?(path, **options, &optional_filter_block); end
  def has_no_field?(locator = T.unsafe(nil), **options, &optional_filter_block); end
  def has_no_link?(locator = T.unsafe(nil), **options, &optional_filter_block); end
  def has_no_select?(locator = T.unsafe(nil), **options, &optional_filter_block); end
  def has_no_selector?(*args, **options, &optional_filter_block); end
  def has_no_sibling?(*args, **options, &optional_filter_block); end
  def has_no_table?(locator = T.unsafe(nil), **options, &optional_filter_block); end
  def has_no_text?(*args, **options); end
  def has_no_unchecked_field?(locator = T.unsafe(nil), **options, &optional_filter_block); end
  def has_no_xpath?(path, **options, &optional_filter_block); end
  def has_select?(locator = T.unsafe(nil), **options, &optional_filter_block); end
  def has_selector?(*args, **options, &optional_filter_block); end
  def has_sibling?(*args, **options, &optional_filter_block); end
  def has_style?(styles = T.unsafe(nil), **options); end
  def has_table?(locator = T.unsafe(nil), **options, &optional_filter_block); end
  def has_text?(*args, **options); end
  def has_unchecked_field?(locator = T.unsafe(nil), **options, &optional_filter_block); end
  def has_xpath?(path, **options, &optional_filter_block); end
  def matches_css?(css, **options, &optional_filter_block); end
  def matches_selector?(*args, **options, &optional_filter_block); end
  def matches_style?(styles = T.unsafe(nil), **options); end
  def matches_xpath?(xpath, **options, &optional_filter_block); end
  def not_matches_css?(css, **options, &optional_filter_block); end
  def not_matches_selector?(*args, **options, &optional_filter_block); end
  def not_matches_xpath?(xpath, **options, &optional_filter_block); end

  private

  def _set_query_session_options(*query_args); end
  def _verify_match_result(query_args, optional_filter_block); end
  def _verify_multiple(*args, wait: T.unsafe(nil), **options); end
  def _verify_selector_result(query_args, optional_filter_block, query_type = T.unsafe(nil)); end
  def _verify_text(type = T.unsafe(nil), expected_text, **query_options); end
  def extract_selector(args); end
  def make_predicate(options); end
end

class Capybara::Node::Simple
  include(::Capybara::Node::Finders)
  include(::Capybara::Node::Matchers)
  include(::Capybara::Node::DocumentMatchers)

  def initialize(native); end

  def [](name); end
  def allow_reload!(*_arg0); end
  def checked?; end
  def disabled?; end
  def find_css(css, **_options); end
  def find_xpath(xpath, **_options); end
  def initial_cache; end
  def inspect; end
  def multiple?; end
  def native; end
  def path; end
  def readonly?; end
  def selected?; end
  def session_options; end
  def synchronize(_seconds = T.unsafe(nil)); end
  def tag_name; end
  def text(_type = T.unsafe(nil), normalize_ws: T.unsafe(nil)); end
  def title; end
  def value; end
  def visible?(check_ancestors = T.unsafe(nil)); end

  private

  def option_value(option); end
end

Capybara::Node::Simple::VISIBILITY_XPATH = T.let(T.unsafe(nil), String)

class Capybara::NotSupportedByDriverError < ::Capybara::CapybaraError
end

module Capybara::Queries
end

class Capybara::Queries::AncestorQuery < ::Capybara::Queries::SelectorQuery
  def description(applied = T.unsafe(nil)); end
  def resolve_for(node, exact = T.unsafe(nil)); end
end

class Capybara::Queries::BaseQuery
  def initialize(options); end

  def expects_none?; end
  def failure_message; end
  def matches_count?(count); end
  def negative_failure_message; end
  def options; end
  def session_options; end
  def session_options=(_arg0); end
  def wait; end

  private

  def assert_valid_keys; end
  def count_message; end
  def count_specified?; end
  def occurrences(count); end

  class << self
    def wait(options, default = T.unsafe(nil)); end
  end
end

Capybara::Queries::BaseQuery::COUNT_KEYS = T.let(T.unsafe(nil), Array)

class Capybara::Queries::CurrentPathQuery < ::Capybara::Queries::BaseQuery
  def initialize(expected_path, **options, &optional_filter_block); end

  def failure_message; end
  def negative_failure_message; end
  def resolves_for?(session); end

  private

  def failure_message_helper(negated = T.unsafe(nil)); end
  def matches_filter_block?(url); end
  def valid_keys; end
end

class Capybara::Queries::MatchQuery < ::Capybara::Queries::SelectorQuery
  def visible; end

  private

  def assert_valid_keys; end
  def valid_keys; end
end

class Capybara::Queries::SelectorQuery < ::Capybara::Queries::BaseQuery
  def initialize(*args, session_options:, enable_aria_label: T.unsafe(nil), enable_aria_role: T.unsafe(nil), test_id: T.unsafe(nil), selector_format: T.unsafe(nil), order: T.unsafe(nil), **options, &filter_block); end

  def applied_description; end
  def css; end
  def description(only_applied = T.unsafe(nil)); end
  def exact?; end
  def expression; end
  def failure_message; end
  def label; end
  def locator; end
  def match; end
  def matches_filters?(node, node_filter_errors = T.unsafe(nil)); end
  def name; end
  def negative_failure_message; end
  def options; end
  def resolve_for(node, exact = T.unsafe(nil)); end
  def selector; end
  def supports_exact?; end
  def visible; end
  def xpath(exact = T.unsafe(nil)); end

  private

  def applied_filters; end
  def apply_expression_filters(expression); end
  def apply_filter?(filter); end
  def assert_valid_keys; end
  def builder(expr); end
  def custom_keys; end
  def default_visibility; end
  def describe_within?; end
  def document?(node); end
  def exact_text; end
  def expression_filters; end
  def filter_set(name); end
  def filtered_expression(expr); end
  def find_nodes_by_selector_format(node, exact); end
  def find_selector(locator); end
  def first_try?; end
  def matches_class_filter?(node); end
  def matches_exact_text_filter?(node); end
  def matches_filter_block?(node); end
  def matches_id_filter?(node); end
  def matches_locator_filter?(node); end
  def matches_node_filters?(node, errors); end
  def matches_spatial_filters?(node); end
  def matches_style?(node, styles); end
  def matches_style_filter?(node); end
  def matches_system_filters?(node); end
  def matches_text_exactly?(node, value); end
  def matches_text_filter?(node); end
  def matches_text_regexp?(node, regexp); end
  def matches_visibility_filters?(node); end
  def matching_text; end
  def need_to_process_classes?; end
  def node_filters; end
  def normalize_ws; end
  def ordered_results(results); end
  def position_cache(key); end
  def rect_cache(key); end
  def selector_format; end
  def show_for_stage(only_applied); end
  def simple_root?(node); end
  def text_fragments; end
  def to_element(node); end
  def try_text_match_in_expression?; end
  def use_default_class_filter?; end
  def use_default_id_filter?; end
  def use_default_style_filter?; end
  def use_spatial_filter?; end
  def valid_keys; end
  def warn_exact_usage; end
  def xpath_text_conditions; end
end

Capybara::Queries::SelectorQuery::SPATIAL_KEYS = T.let(T.unsafe(nil), Array)

Capybara::Queries::SelectorQuery::VALID_KEYS = T.let(T.unsafe(nil), Array)

Capybara::Queries::SelectorQuery::VALID_MATCH = T.let(T.unsafe(nil), Array)

class Capybara::Queries::SiblingQuery < ::Capybara::Queries::SelectorQuery
  def description(applied = T.unsafe(nil)); end
  def resolve_for(node, exact = T.unsafe(nil)); end
end

class Capybara::Queries::StyleQuery < ::Capybara::Queries::BaseQuery
  def initialize(expected_styles, session_options:, **options); end

  def failure_message; end
  def resolves_for?(node); end

  private

  def stringify_keys(hsh); end
  def valid_keys; end
end

class Capybara::Queries::TextQuery < ::Capybara::Queries::BaseQuery
  def initialize(type = T.unsafe(nil), expected_text, session_options:, **options); end

  def description; end
  def failure_message; end
  def negative_failure_message; end
  def resolve_for(node); end

  private

  def build_message(report_on_invisible); end
  def case_insensitive_message; end
  def check_case_insensitive?; end
  def check_visible_text?; end
  def default_type; end
  def exact?; end
  def invisible_message; end
  def text(node: T.unsafe(nil), query_type: T.unsafe(nil)); end
  def valid_keys; end
  def valid_types; end
end

class Capybara::Queries::TitleQuery < ::Capybara::Queries::BaseQuery
  def initialize(expected_title, **options); end

  def failure_message; end
  def negative_failure_message; end
  def resolves_for?(node); end

  private

  def failure_message_helper(negated = T.unsafe(nil)); end
  def valid_keys; end
end

module Capybara::RackTest
end

class Capybara::RackTest::Browser
  include(::Rack::Test::Methods)

  def initialize(driver); end

  def app; end
  def build_uri(path); end
  def current_host; end
  def current_host=(_arg0); end
  def current_url; end
  def dom; end
  def driver; end
  def find(format, selector); end
  def follow(method, path, **attributes); end
  def html; end
  def options; end
  def process(method, path, attributes = T.unsafe(nil), env = T.unsafe(nil)); end
  def process_and_follow_redirects(method, path, attributes = T.unsafe(nil), env = T.unsafe(nil)); end
  def refresh; end
  def reset_cache!; end
  def reset_host!; end
  def submit(method, path, attributes); end
  def title; end
  def visit(path, **attributes); end

  protected

  def build_rack_mock_session; end
  def request_path; end

  private

  def fragment_or_script?(path); end
end

class Capybara::RackTest::CSSHandlers < ::BasicObject
  include(::Kernel)

  def disabled(list); end
  def enabled(list); end
end

class Capybara::RackTest::Driver < ::Capybara::Driver::Base
  def initialize(app, **options); end

  def app; end
  def browser; end
  def current_url; end
  def delete(*args, &block); end
  def dom; end
  def find_css(selector); end
  def find_xpath(selector); end
  def follow(method, path, **attributes); end
  def follow_redirects?; end
  def get(*args, &block); end
  def header(key, value); end
  def html; end
  def invalid_element_errors; end
  def options; end
  def post(*args, &block); end
  def put(*args, &block); end
  def redirect_limit; end
  def refresh; end
  def request; end
  def reset!; end
  def response; end
  def response_headers; end
  def status_code; end
  def submit(method, path, attributes); end
  def title; end
  def visit(path, **attributes); end
end

Capybara::RackTest::Driver::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

module Capybara::RackTest::Errors
end

class Capybara::RackTest::Errors::StaleElementReferenceError < ::StandardError
end

class Capybara::RackTest::Form < ::Capybara::RackTest::Node
  def multipart?; end
  def params(button); end
  def submit(button); end

  private

  def add_input_param(field, params); end
  def add_select_param(field, params); end
  def add_textarea_param(field, params); end
  def file_to_upload(filename); end
  def make_params; end
  def merge_param!(params, key, value); end
  def request_method; end
  def submitter?(el); end
end

class Capybara::RackTest::Form::NilUploadedFile < ::Rack::Test::UploadedFile
  def initialize; end

  def content_type; end
  def original_filename; end
  def path; end
  def read; end
  def size; end
end

class Capybara::RackTest::Form::ParamsHash < ::Hash
  def to_params_hash; end
end

class Capybara::RackTest::Node < ::Capybara::Driver::Node
  def ==(other); end
  def [](*_arg0, &_arg1); end
  def all_text(*_arg0, &_arg1); end
  def checked?(*_arg0, &_arg1); end
  def click(*_arg0, &_arg1); end
  def disabled?(*_arg0, &_arg1); end
  def find_css(*_arg0, &_arg1); end
  def find_xpath(*_arg0, &_arg1); end
  def path(*_arg0, &_arg1); end
  def select_option(*_arg0, &_arg1); end
  def selected?(*_arg0, &_arg1); end
  def set(*_arg0, &_arg1); end
  def style(*_arg0, &_arg1); end
  def tag_name(*_arg0, &_arg1); end
  def unselect_option(*_arg0, &_arg1); end
  def value(*_arg0, &_arg1); end
  def visible?(*_arg0, &_arg1); end
  def visible_text(*_arg0, &_arg1); end

  protected

  def checkbox?; end
  def checkbox_or_radio?(field = T.unsafe(nil)); end
  def displayed_text(check_ancestor: T.unsafe(nil)); end
  def input_field?; end
  def radio?; end
  def range?; end
  def text_or_password?; end
  def textarea?; end

  private

  def attribute_is_not_blank?(attribute); end
  def checkable?; end
  def click_label; end
  def deselect_options; end
  def follow_link; end
  def form; end
  def link?; end
  def select_node; end
  def set_checkbox(value); end
  def set_input(value); end
  def set_radio(_value); end
  def set_range(value); end
  def stale_check; end
  def string_node; end
  def submits?; end
  def toggle_details(details = T.unsafe(nil)); end
  def type; end
  def unchecked_all_text; end
  def unchecked_checked?; end
  def unchecked_click(keys = T.unsafe(nil), **options); end
  def unchecked_disabled?; end
  def unchecked_find_css(locator, **_hints); end
  def unchecked_find_xpath(locator, **_hints); end
  def unchecked_path; end
  def unchecked_select_option; end
  def unchecked_selected?; end
  def unchecked_set(value, **options); end
  def unchecked_style(_styles); end
  def unchecked_tag_name; end
  def unchecked_unselect_option; end
  def unchecked_value; end
  def unchecked_visible?; end
  def unchecked_visible_text; end
end

Capybara::RackTest::Node::BLOCK_ELEMENTS = T.let(T.unsafe(nil), Array)

Capybara::RackTest::Node::DISABLED_BY_FIELDSET_XPATH = T.let(T.unsafe(nil), String)

Capybara::RackTest::Node::OPTION_OWNER_XPATH = T.let(T.unsafe(nil), String)

class Capybara::ReadOnlyElementError < ::Capybara::CapybaraError
end

class Capybara::ReadOnlySessionConfig < ::SimpleDelegator
  def always_include_port=(_); end
  def app_host=(_); end
  def asset_host=(_); end
  def automatic_label_click=(_); end
  def automatic_reload=(_); end
  def default_host=(_); end
  def default_max_wait_time=(_); end
  def default_normalize_ws=(_); end
  def default_selector=(_); end
  def default_set_options=(_); end
  def disable_animation=(_); end
  def enable_aria_label=(_); end
  def enable_aria_role=(_); end
  def exact=(_); end
  def exact_text=(_); end
  def ignore_hidden_elements=(_); end
  def match=(_); end
  def predicates_wait=(_); end
  def raise_server_errors=(_); end
  def run_server=(_); end
  def save_path=(_); end
  def server_errors=(_); end
  def server_host=(_); end
  def server_port=(_); end
  def test_id=(_); end
  def visible_text_only=(_); end
  def w3c_click_offset=(_); end
end

class Capybara::RegistrationContainer
  def initialize; end

  def [](name); end
  def []=(name, value); end
  def method_missing(method_name, *args, **options, &block); end
  def names; end

  private

  def register(name, block); end
  def respond_to_missing?(method_name, include_all); end
end

class Capybara::Result
  include(::Enumerable)
  extend(::Forwardable)

  def initialize(elements, query); end

  def [](*args); end
  def allow_reload!; end
  def at(*args); end
  def compare_count; end
  def each(&block); end
  def empty?; end
  def failure_message; end
  def index(*_arg0); end
  def inspect(*args, &block); end
  def last(*args, &block); end
  def length(*args, &block); end
  def matches_count?; end
  def negative_failure_message; end
  def sample(*args, &block); end
  def size(*args, &block); end
  def unfiltered_size; end
  def values_at(*args, &block); end

  private

  def add_to_cache(elem); end
  def full_results; end
  def lazy_select_elements(&block); end
  def load_up_to(num); end
  def rest; end
end

class Capybara::ScopeError < ::Capybara::CapybaraError
end

class Capybara::Selector < ::SimpleDelegator
  def initialize(definition, config:, format:); end

  def add_error(error_msg); end
  def builder(expr = T.unsafe(nil)); end
  def call(locator, **options); end
  def current_format; end
  def enable_aria_label; end
  def enable_aria_role; end
  def errors; end
  def expression_for(name, locator, config: T.unsafe(nil), format: T.unsafe(nil), **options); end
  def format; end
  def test_id; end
  def with_filter_errors(errors); end

  private

  def find_by_attr(attribute, value); end
  def find_by_class_attr(classes); end
  def locate_field(xpath, locator, **_options); end
  def locate_label(locator); end
  def locator_description; end
  def locator_valid?(locator); end

  class << self
    def [](name); end
    def add(name, **options, &block); end
    def all; end
    def for(locator); end
    def remove(name); end
    def update(name, &block); end
  end
end

class Capybara::Selector::CSS
  class << self
    def escape(str); end
    def escape_char(char); end
    def split(css); end
  end
end

Capybara::Selector::CSS::ESCAPE = T.let(T.unsafe(nil), Regexp)

Capybara::Selector::CSS::H = T.let(T.unsafe(nil), Regexp)

Capybara::Selector::CSS::NMSTART = T.let(T.unsafe(nil), Regexp)

Capybara::Selector::CSS::NONASCII = T.let(T.unsafe(nil), Regexp)

Capybara::Selector::CSS::S = T.let(T.unsafe(nil), String)

class Capybara::Selector::CSS::Splitter
  def split(css); end

  private

  def parse_block(start, final, strio); end
  def parse_paren(strio); end
  def parse_square(strio); end
  def parse_string(quote, strio); end
end

Capybara::Selector::CSS::UNICODE = T.let(T.unsafe(nil), Regexp)

class Capybara::Selector::CSSBuilder
  def initialize(expression); end

  def add_attribute_conditions(**attributes); end
  def expression; end

  private

  def attribute_conditions(attributes); end
  def class_conditions(classes); end
  def regexp_conditions(name, value); end
end

class Capybara::Selector::Definition
  extend(::Forwardable)

  def initialize(name, locator_type: T.unsafe(nil), raw_locator: T.unsafe(nil), supports_exact: T.unsafe(nil), &block); end

  def css(*allowed_filters, &block); end
  def custom_filters; end
  def default_format; end
  def default_visibility(fallback = T.unsafe(nil), options = T.unsafe(nil)); end
  def describe(*args, &block); end
  def describe_all_expression_filters(**opts); end
  def describe_expression_filters(&block); end
  def describe_node_filters(&block); end
  def description(*args, &block); end
  def expression_filter(*args, &block); end
  def expression_filters; end
  def expressions; end
  def filter(*args, &block); end
  def filter_set(name, filters_to_use = T.unsafe(nil)); end
  def label(label = T.unsafe(nil)); end
  def locator_filter(*types, **options, &block); end
  def locator_types; end
  def match(&block); end
  def match?(locator); end
  def name; end
  def node_filter(*args, &block); end
  def node_filters; end
  def raw_locator?; end
  def supports_exact?; end
  def visible(default_visibility = T.unsafe(nil), &block); end
  def xpath(*allowed_filters, &block); end

  private

  def expression(type, allowed_filters, &block); end
  def handled_custom_options(filter, options); end
  def parameter_names(block); end
end

class Capybara::Selector::FilterSet
  def initialize(name, &block); end

  def describe(what = T.unsafe(nil), &block); end
  def description(node_filters: T.unsafe(nil), expression_filters: T.unsafe(nil), **options); end
  def descriptions; end
  def expression_filter(name, *types, **options, &block); end
  def expression_filters; end
  def filter(names, *types, **options, &block); end
  def import(name, filters = T.unsafe(nil)); end
  def node_filter(names, *types, **options, &block); end
  def node_filters; end

  protected

  def expression_filter_descriptions; end
  def node_filter_descriptions; end
  def undeclared_descriptions; end

  private

  def add_filter(name, filter_class, *types, matcher: T.unsafe(nil), **options, &block); end
  def options_with_defaults(options); end

  class << self
    def [](name); end
    def add(name, &block); end
    def all; end
    def remove(name); end
  end
end

module Capybara::Selector::Filters
end

class Capybara::Selector::Filters::Base
  def initialize(name, matcher, block, **options); end

  def boolean?; end
  def default; end
  def default?; end
  def format; end
  def handles_option?(option_name); end
  def matcher?; end
  def skip?(value); end

  private

  def apply(subject, name, value, skip_value, ctx); end
  def filter_context(context); end
  def valid_value?(value); end
end

class Capybara::Selector::Filters::ExpressionFilter < ::Capybara::Selector::Filters::Base
  def apply_filter(expr, name, value, selector); end
end

class Capybara::Selector::Filters::IdentityExpressionFilter < ::Capybara::Selector::Filters::ExpressionFilter
  def initialize(name); end

  def apply_filter(expr, _name, _value, _ctx); end
  def default?; end
  def matcher?; end
end

class Capybara::Selector::Filters::LocatorFilter < ::Capybara::Selector::Filters::NodeFilter
  def initialize(block, **options); end

  def matches?(node, value, context = T.unsafe(nil), exact:); end

  private

  def apply(subject, value, skip_value, ctx, **options); end
end

class Capybara::Selector::Filters::NodeFilter < ::Capybara::Selector::Filters::Base
  def initialize(name, matcher, block, **options); end

  def matches?(node, name, value, context = T.unsafe(nil)); end
end

class Capybara::Selector::RegexpDisassembler
  def initialize(regexp); end

  def alternated_substrings; end
  def substrings; end

  private

  def collapse(strs); end
  def combine(strs); end
  def extract_strings(expression, alternation: T.unsafe(nil)); end
  def process(alternation:); end
  def remove_and_covered(strings); end
  def remove_or_covered(or_series); end
end

class Capybara::Selector::XPathBuilder
  def initialize(expression); end

  def add_attribute_conditions(**conditions); end
  def expression; end

  private

  def attribute_conditions(attributes); end
  def class_conditions(classes); end
  def regexp_to_xpath_conditions(regexp); end
end

module Capybara::Selenium
end

module Capybara::Selenium::ChromeLogs
  def available_log_types; end
  def commands(command); end
  def log(type); end
end

Capybara::Selenium::ChromeLogs::COMMANDS = T.let(T.unsafe(nil), Hash)

Capybara::Selenium::ChromeLogs::LOG_MSG = T.let(T.unsafe(nil), String)

class Capybara::Selenium::ChromeNode < ::Capybara::Selenium::Node
  include(::Capybara::Selenium::Node::Html5Drag)
  include(::Capybara::Selenium::Node::FileInputClickEmulation)

  def click(*_arg0, **_arg1); end
  def disabled?; end
  def drop(*args); end
  def select_option; end
  def send_keys(*args); end
  def set_file(value); end
  def set_text(value, clear: T.unsafe(nil), **_unused); end
  def visible?; end

  private

  def browser_version(to_float: T.unsafe(nil)); end
  def chromedriver_fixed_actions_key_state?; end
  def chromedriver_supports_displayed_endpoint?; end
  def chromedriver_version; end
  def file_errors; end
  def native_displayed?; end
  def perform_legacy_drag(element, drop_modifiers); end
end

class Capybara::Selenium::Driver < ::Capybara::Driver::Base
  include(::Capybara::Selenium::Find)

  def initialize(app, **options); end

  def accept_modal(_type, **options); end
  def app; end
  def browser; end
  def close_window(handle); end
  def current_url; end
  def current_window_handle; end
  def dismiss_modal(_type, **options); end
  def evaluate_async_script(script, *args); end
  def evaluate_script(script, *args); end
  def execute_script(script, *args); end
  def frame_obscured_at?(x:, y:); end
  def fullscreen_window(handle); end
  def go_back; end
  def go_forward; end
  def html; end
  def invalid_element_errors; end
  def maximize_window(handle); end
  def needs_server?; end
  def no_such_window_error; end
  def open_new_window(kind = T.unsafe(nil)); end
  def options; end
  def quit; end
  def refresh; end
  def reset!; end
  def resize_window_to(handle, width, height); end
  def save_screenshot(path, **_options); end
  def send_keys(*args); end
  def switch_to_frame(frame); end
  def switch_to_window(handle); end
  def title; end
  def visit(path); end
  def wait?; end
  def window_handles; end
  def window_size(handle); end

  private

  def accept_unhandled_reset_alert; end
  def active_element; end
  def bridge; end
  def build_node(native_node, initial_cache = T.unsafe(nil)); end
  def clear_browser_state; end
  def clear_browser_state_errors; end
  def clear_local_storage; end
  def clear_session_storage; end
  def clear_storage; end
  def delete_all_cookies; end
  def find_context; end
  def find_modal(text: T.unsafe(nil), **options); end
  def find_modal_errors; end
  def modal_error; end
  def native_args(args); end
  def navigate_with_accept(url); end
  def reset_browser_state; end
  def selenium_4?; end
  def setup_exit_handler; end
  def silenced_unknown_error_message?(msg); end
  def silenced_unknown_error_messages; end
  def specialize_driver; end
  def unhandled_alert_errors; end
  def unwrap_script_result(arg); end
  def wait_for_empty_page(timer); end
  def with_legacy_error(errors, legacy_error); end
  def within_given_window(handle); end

  class << self
    def load_selenium; end
    def register_specialization(browser_name, specialization); end
    def selenium_webdriver_version; end
    def specializations; end
  end
end

Capybara::Selenium::Driver::CAPS_VERSION = T.let(T.unsafe(nil), Gem::Requirement)

module Capybara::Selenium::Driver::ChromeDriver
  def fullscreen_window(handle); end
  def reset!; end
  def resize_window_to(handle, width, height); end

  private

  def build_node(native_node, initial_cache = T.unsafe(nil)); end
  def cdp_unsupported_errors; end
  def chromedriver_version; end
  def clear_all_storage?; end
  def clear_storage; end
  def delete_all_cookies; end
  def execute_cdp(cmd, params = T.unsafe(nil)); end
  def storage_clears; end
  def storage_types_to_clear; end
  def uniform_storage_clear?; end

  class << self
    def extended(base); end
  end
end

Capybara::Selenium::Driver::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

module Capybara::Selenium::Driver::EdgeDriver
  def download_path=(path); end
  def fullscreen_window(handle); end
  def reset!; end
  def resize_window_to(handle, width, height); end

  private

  def build_node(native_node, initial_cache = T.unsafe(nil)); end
  def cdp_unsupported_errors; end
  def clear_all_storage?; end
  def clear_storage; end
  def delete_all_cookies; end
  def edgedriver_version; end
  def execute_cdp(cmd, params = T.unsafe(nil)); end
  def storage_clears; end
  def storage_types_to_clear; end
  def uniform_storage_clear?; end

  class << self
    def extended(base); end
  end
end

module Capybara::Selenium::Driver::FirefoxDriver
  class << self
    def extended(driver); end
    def w3c?(driver); end
  end
end

module Capybara::Selenium::Driver::InternetExplorerDriver
  def switch_to_frame(frame); end

  private

  def build_node(native_node, initial_cache = T.unsafe(nil)); end
end

Capybara::Selenium::Driver::SPECIAL_OPTIONS = T.let(T.unsafe(nil), Array)

module Capybara::Selenium::Driver::SafariDriver
  def switch_to_frame(frame); end

  private

  def build_node(native_node, initial_cache = T.unsafe(nil)); end
end

module Capybara::Selenium::Driver::W3CFirefoxDriver
  def refresh; end
  def reset!; end
  def resize_window_to(handle, width, height); end
  def switch_to_frame(frame); end

  private

  def browser_version; end
  def build_node(native_node, initial_cache = T.unsafe(nil)); end

  class << self
    def extended(driver); end
    def pause_broken?(sel_driver); end
  end
end

class Capybara::Selenium::EdgeNode < ::Capybara::Selenium::Node
  include(::Capybara::Selenium::Node::Html5Drag)

  def click(*_arg0); end
  def disabled?; end
  def drop(*args); end
  def select_option; end
  def set_file(value); end
  def set_text(value, clear: T.unsafe(nil), **_unused); end
  def visible?; end

  private

  def browser_version; end
  def chrome_edge?; end
  def file_errors; end
  def native_displayed?; end
end

module Capybara::Selenium::Find
  def find_css(selector, uses_visibility: T.unsafe(nil), texts: T.unsafe(nil), styles: T.unsafe(nil), position: T.unsafe(nil), **_options); end
  def find_xpath(selector, uses_visibility: T.unsafe(nil), styles: T.unsafe(nil), position: T.unsafe(nil), **_options); end

  private

  def build_hints_js(uses_visibility, styles, position); end
  def es_context; end
  def filter_by_text(elements, texts); end
  def find_by(format, selector, uses_visibility:, texts:, styles:, position:); end
  def gather_hints(elements, uses_visibility:, styles:, position:); end
  def is_displayed_atom; end
end

class Capybara::Selenium::FirefoxNode < ::Capybara::Selenium::Node
  include(::Capybara::Selenium::Node::Html5Drag)
  include(::Capybara::Selenium::Node::FileInputClickEmulation)

  def click(keys = T.unsafe(nil), **options); end
  def disabled?; end
  def drop(*args); end
  def focused?; end
  def hover; end
  def select_option; end
  def send_keys(*args); end
  def set_file(value); end
  def visible?; end

  private

  def _send_keys(keys, actions = T.unsafe(nil), down_keys = T.unsafe(nil)); end
  def browser_version; end
  def native_displayed?; end
  def perform_with_options(click_options); end
  def upload(local_file); end
end

class Capybara::Selenium::IENode < ::Capybara::Selenium::Node
  def disabled?; end
end

class Capybara::Selenium::Node < ::Capybara::Driver::Node
  include(::Capybara::Selenium::Find)
  include(::Capybara::Selenium::Scroll)

  def ==(other); end
  def [](name); end
  def all_text; end
  def checked?; end
  def click(keys = T.unsafe(nil), **options); end
  def content_editable?; end
  def disabled?; end
  def double_click(keys = T.unsafe(nil), **options); end
  def drag_to(element, drop_modifiers: T.unsafe(nil), **_arg2); end
  def drop(*_); end
  def hover; end
  def multiple?; end
  def obscured?(x: T.unsafe(nil), y: T.unsafe(nil)); end
  def path; end
  def readonly?; end
  def rect; end
  def right_click(keys = T.unsafe(nil), **options); end
  def select_option; end
  def selected?; end
  def send_keys(*args); end
  def set(value, **options); end
  def style(styles); end
  def tag_name; end
  def unselect_option; end
  def value; end
  def visible?; end
  def visible_text; end

  protected

  def scroll_if_needed; end
  def scroll_to_center; end

  private

  def action_with_modifiers(click_options); end
  def attrs(*attr_names); end
  def auto_rapid_set_length; end
  def boolean_attr(val); end
  def bridge; end
  def browser; end
  def browser_action; end
  def build_node(native_node, initial_cache = T.unsafe(nil)); end
  def capabilities; end
  def each_key(keys, &block); end
  def find_context; end
  def modifiers_down(actions, keys); end
  def modifiers_up(actions, keys); end
  def normalize_keys(keys); end
  def perform_with_options(click_options, &block); end
  def select_node; end
  def set_color(value); end
  def set_content_editable(value); end
  def set_date(value); end
  def set_datetime_local(value); end
  def set_file(value); end
  def set_range(value); end
  def set_text(value, clear: T.unsafe(nil), rapid: T.unsafe(nil), **_unused); end
  def set_time(value); end
  def sibling_index(parent, node, selector); end
  def update_value_js(value); end
  def w3c?; end
  def with_file_detector; end
end

module Capybara::Selenium::Node::FileInputClickEmulation
  def click(keys = T.unsafe(nil), **options); end

  private

  def attaching_file?; end
  def emulate_click; end
  def visible_file_field?; end
end

Capybara::Selenium::Node::GET_XPATH_SCRIPT = T.let(T.unsafe(nil), String)

module Capybara::Selenium::Node::Html5Drag
  def drag_to(element, html5: T.unsafe(nil), delay: T.unsafe(nil), drop_modifiers: T.unsafe(nil)); end

  private

  def html5_drop(*args); end
  def perform_html5_drag(element, delay, drop_modifiers); end
  def perform_legacy_drag(element, drop_modifiers); end
end

Capybara::Selenium::Node::Html5Drag::ATTACH_FILE = T.let(T.unsafe(nil), String)

Capybara::Selenium::Node::Html5Drag::DROP_FILE = T.let(T.unsafe(nil), String)

Capybara::Selenium::Node::Html5Drag::DROP_STRING = T.let(T.unsafe(nil), String)

Capybara::Selenium::Node::Html5Drag::HTML5_DRAG_DROP_SCRIPT = T.let(T.unsafe(nil), String)

Capybara::Selenium::Node::Html5Drag::LEGACY_DRAG_CHECK = T.let(T.unsafe(nil), String)

Capybara::Selenium::Node::Html5Drag::MOUSEDOWN_TRACKER = T.let(T.unsafe(nil), String)

class Capybara::Selenium::Node::ModifierKeysStack
  def initialize; end

  def include?(key); end
  def pop; end
  def press(key); end
  def push; end
end

Capybara::Selenium::Node::OBSCURED_OR_OFFSET_SCRIPT = T.let(T.unsafe(nil), String)

Capybara::Selenium::Node::RAPID_APPEND_TEXT = T.let(T.unsafe(nil), String)

class Capybara::Selenium::SafariNode < ::Capybara::Selenium::Node
  def click(keys = T.unsafe(nil), **options); end
  def disabled?; end
  def hover; end
  def select_option; end
  def send_keys(*args); end
  def set_file(value); end
  def set_text(value, clear: T.unsafe(nil), **_unused); end
  def unselect_option; end
  def visible_text; end

  private

  def _send_keys(keys, actions = T.unsafe(nil), down_keys = T.unsafe(nil)); end
end

Capybara::Selenium::SafariNode::MODIFIER_KEYS = T.let(T.unsafe(nil), Array)

module Capybara::Selenium::Scroll
  def scroll_by(x, y); end
  def scroll_to(element, location, position = T.unsafe(nil)); end

  private

  def scroll_element_to_location(element, location); end
  def scroll_to_coords(x, y); end
  def scroll_to_location(location); end
end

Capybara::Selenium::Scroll::SCROLL_POSITIONS = T.let(T.unsafe(nil), Hash)

class Capybara::Server
  def initialize(app, *deprecated_options, port: T.unsafe(nil), host: T.unsafe(nil), reportable_errors: T.unsafe(nil), extra_middleware: T.unsafe(nil)); end

  def app; end
  def base_url; end
  def boot; end
  def error; end
  def host; end
  def port; end
  def reset_error!; end
  def responsive?; end
  def using_ssl?; end
  def wait_for_pending_requests; end

  private

  def find_available_port(host); end
  def middleware; end
  def pending_requests?; end
  def port_key; end

  class << self
    def ports; end
  end
end

class Capybara::Server::AnimationDisabler
  def initialize(app); end

  def call(env); end

  private

  def disable_markup; end
  def html_content?; end
  def insert_disable(html); end

  class << self
    def selector_for(css_or_bool); end
  end
end

Capybara::Server::AnimationDisabler::DISABLE_MARKUP_TEMPLATE = T.let(T.unsafe(nil), String)

class Capybara::Server::Checker
  def initialize(host, port); end

  def request(&block); end
  def ssl?; end

  private

  def http_request(&block); end
  def https_request(&block); end
  def make_request(**options, &block); end
  def ssl_options; end
end

Capybara::Server::Checker::TRY_HTTPS_ERRORS = T.let(T.unsafe(nil), Array)

class Capybara::Server::Middleware
  def initialize(app, server_errors, extra_middleware = T.unsafe(nil)); end

  def call(env); end
  def clear_error; end
  def error; end
  def pending_requests; end
  def pending_requests?; end
end

class Capybara::Server::Middleware::Counter
  def initialize; end

  def decrement(uri); end
  def increment(uri); end
  def positive?; end
  def value; end
end

class Capybara::Session
  include(::Capybara::SessionMatchers)

  def initialize(mode, app = T.unsafe(nil)); end

  def accept_alert(text = T.unsafe(nil), **options, &blk); end
  def accept_confirm(text = T.unsafe(nil), **options, &blk); end
  def accept_prompt(text = T.unsafe(nil), **options, &blk); end
  def all(*_arg0, &_arg1); end
  def app; end
  def assert_all_of_selectors(*_arg0, &_arg1); end
  def assert_any_of_selectors(*_arg0, &_arg1); end
  def assert_no_selector(*_arg0, &_arg1); end
  def assert_no_text(*_arg0, &_arg1); end
  def assert_no_title(*_arg0, &_arg1); end
  def assert_none_of_selectors(*_arg0, &_arg1); end
  def assert_selector(*_arg0, &_arg1); end
  def assert_text(*_arg0, &_arg1); end
  def assert_title(*_arg0, &_arg1); end
  def attach_file(*_arg0, &_arg1); end
  def body; end
  def check(*_arg0, &_arg1); end
  def choose(*_arg0, &_arg1); end
  def cleanup!; end
  def click_button(*_arg0, &_arg1); end
  def click_link(*_arg0, &_arg1); end
  def click_link_or_button(*_arg0, &_arg1); end
  def click_on(*_arg0, &_arg1); end
  def config; end
  def configure; end
  def current_host; end
  def current_path; end
  def current_scope; end
  def current_url; end
  def current_window; end
  def dismiss_confirm(text = T.unsafe(nil), **options, &blk); end
  def dismiss_prompt(text = T.unsafe(nil), **options, &blk); end
  def document; end
  def driver; end
  def evaluate_async_script(script, *args); end
  def evaluate_script(script, *args); end
  def execute_script(script, *args); end
  def fill_in(*_arg0, &_arg1); end
  def find(*_arg0, &_arg1); end
  def find_all(*_arg0, &_arg1); end
  def find_button(*_arg0, &_arg1); end
  def find_by_id(*_arg0, &_arg1); end
  def find_field(*_arg0, &_arg1); end
  def find_link(*_arg0, &_arg1); end
  def first(*_arg0, &_arg1); end
  def go_back; end
  def go_forward; end
  def has_button?(*_arg0, &_arg1); end
  def has_checked_field?(*_arg0, &_arg1); end
  def has_content?(*_arg0, &_arg1); end
  def has_css?(*_arg0, &_arg1); end
  def has_field?(*_arg0, &_arg1); end
  def has_link?(*_arg0, &_arg1); end
  def has_no_button?(*_arg0, &_arg1); end
  def has_no_checked_field?(*_arg0, &_arg1); end
  def has_no_content?(*_arg0, &_arg1); end
  def has_no_css?(*_arg0, &_arg1); end
  def has_no_field?(*_arg0, &_arg1); end
  def has_no_link?(*_arg0, &_arg1); end
  def has_no_select?(*_arg0, &_arg1); end
  def has_no_selector?(*_arg0, &_arg1); end
  def has_no_table?(*_arg0, &_arg1); end
  def has_no_text?(*_arg0, &_arg1); end
  def has_no_title?(*_arg0, &_arg1); end
  def has_no_unchecked_field?(*_arg0, &_arg1); end
  def has_no_xpath?(*_arg0, &_arg1); end
  def has_select?(*_arg0, &_arg1); end
  def has_selector?(*_arg0, &_arg1); end
  def has_table?(*_arg0, &_arg1); end
  def has_text?(*_arg0, &_arg1); end
  def has_title?(*_arg0, &_arg1); end
  def has_unchecked_field?(*_arg0, &_arg1); end
  def has_xpath?(*_arg0, &_arg1); end
  def html; end
  def inspect; end
  def mode; end
  def open_new_window(kind = T.unsafe(nil)); end
  def query(*_arg0, &_arg1); end
  def quit; end
  def raise_server_error!; end
  def refresh; end
  def refute_selector(*_arg0, &_arg1); end
  def reset!; end
  def reset_session!; end
  def response_headers; end
  def save_and_open_page(path = T.unsafe(nil)); end
  def save_and_open_screenshot(path = T.unsafe(nil), **options); end
  def save_page(path = T.unsafe(nil)); end
  def save_screenshot(path = T.unsafe(nil), **options); end
  def scroll_by(*_arg0, &_arg1); end
  def scroll_to(*_arg0, &_arg1); end
  def select(*_arg0, &_arg1); end
  def send_keys(*args, **kw_args); end
  def server; end
  def server_url; end
  def source; end
  def status_code; end
  def switch_to_frame(frame); end
  def switch_to_window(window = T.unsafe(nil), **options, &window_locator); end
  def synchronized; end
  def synchronized=(_arg0); end
  def text(*_arg0, &_arg1); end
  def title(*_arg0, &_arg1); end
  def uncheck(*_arg0, &_arg1); end
  def unselect(*_arg0, &_arg1); end
  def using_wait_time(seconds, &block); end
  def visit(visit_uri); end
  def window_opened_by(**options); end
  def windows; end
  def within(*args, **kw_args); end
  def within_element(*args, **kw_args); end
  def within_fieldset(locator, &block); end
  def within_frame(*args, **kw_args); end
  def within_table(locator, &block); end
  def within_window(window_or_proc); end

  private

  def _find_frame(*args, **kw_args); end
  def _switch_to_window(window = T.unsafe(nil), **options, &window_locator); end
  def _switch_to_window_by_locator; end
  def accept_modal(type, text_or_options, options, &blk); end
  def adjust_server_port(uri); end
  def default_fn(extension); end
  def dismiss_modal(type, text_or_options, options, &blk); end
  def driver_args(args); end
  def element_script_result(arg); end
  def modal_options(text = T.unsafe(nil), **options); end
  def open_file(path); end
  def prepare_path(path, extension); end
  def scopes; end
  def synchronize_windows(options, &block); end

  class << self
    def instance_created?; end
  end
end

Capybara::Session::DOCUMENT_METHODS = T.let(T.unsafe(nil), Array)

Capybara::Session::DSL_METHODS = T.let(T.unsafe(nil), Array)

Capybara::Session::MODAL_METHODS = T.let(T.unsafe(nil), Array)

Capybara::Session::NODE_METHODS = T.let(T.unsafe(nil), Array)

Capybara::Session::SESSION_METHODS = T.let(T.unsafe(nil), Array)

class Capybara::SessionConfig
  def always_include_port; end
  def always_include_port=(_arg0); end
  def app_host; end
  def app_host=(url); end
  def asset_host; end
  def asset_host=(_arg0); end
  def automatic_label_click; end
  def automatic_label_click=(_arg0); end
  def automatic_reload; end
  def automatic_reload=(_arg0); end
  def default_host; end
  def default_host=(url); end
  def default_max_wait_time; end
  def default_max_wait_time=(_arg0); end
  def default_normalize_ws; end
  def default_normalize_ws=(_arg0); end
  def default_selector; end
  def default_selector=(_arg0); end
  def default_set_options; end
  def default_set_options=(_arg0); end
  def disable_animation; end
  def disable_animation=(_arg0); end
  def enable_aria_label; end
  def enable_aria_label=(_arg0); end
  def enable_aria_role; end
  def enable_aria_role=(_arg0); end
  def exact; end
  def exact=(_arg0); end
  def exact_text; end
  def exact_text=(_arg0); end
  def ignore_hidden_elements; end
  def ignore_hidden_elements=(_arg0); end
  def match; end
  def match=(_arg0); end
  def predicates_wait; end
  def predicates_wait=(_arg0); end
  def raise_server_errors; end
  def raise_server_errors=(_arg0); end
  def run_server; end
  def run_server=(_arg0); end
  def save_path; end
  def save_path=(_arg0); end
  def server_errors; end
  def server_errors=(errors); end
  def server_host; end
  def server_host=(_arg0); end
  def server_port; end
  def server_port=(_arg0); end
  def test_id; end
  def test_id=(id); end
  def visible_text_only; end
  def visible_text_only=(_arg0); end
  def w3c_click_offset; end
  def w3c_click_offset=(_arg0); end

  private

  def initialize_copy(other); end
end

Capybara::SessionConfig::OPTIONS = T.let(T.unsafe(nil), Array)

module Capybara::SessionMatchers
  def assert_current_path(path, **options, &optional_filter_block); end
  def assert_no_current_path(path, **options, &optional_filter_block); end
  def has_current_path?(path, **options, &optional_filter_block); end
  def has_no_current_path?(path, **options, &optional_filter_block); end

  private

  def _verify_current_path(path, filter_block, **options); end
  def make_predicate(options); end
end

class Capybara::UnselectNotAllowed < ::Capybara::CapybaraError
end

Capybara::VERSION = T.let(T.unsafe(nil), String)

class Capybara::Window
  def initialize(session, handle); end

  def ==(other); end
  def close; end
  def closed?; end
  def current?; end
  def eql?(other); end
  def exists?; end
  def fullscreen; end
  def handle; end
  def hash; end
  def inspect; end
  def maximize; end
  def resize_to(width, height); end
  def session; end
  def size; end

  private

  def wait_for_stable_size(seconds = T.unsafe(nil)); end
end

class Capybara::WindowError < ::Capybara::CapybaraError
end

module XPath
  include(::XPath::DSL)
  extend(::XPath::DSL)

  class << self
    def generate; end
  end
end

module XPath::DSL
  def !(*args); end
  def !=(rhs); end
  def %(rhs); end
  def &(rhs); end
  def *(rhs); end
  def +(*expressions); end
  def /(rhs); end
  def <(rhs); end
  def <=(rhs); end
  def ==(rhs); end
  def >(rhs); end
  def >=(rhs); end
  def [](expression); end
  def ancestor(*element_names); end
  def ancestor_or_self(*element_names); end
  def and(rhs); end
  def anywhere(*expressions); end
  def attr(expression); end
  def attribute(*element_names); end
  def axis(name, *element_names); end
  def binary_operator(name, rhs); end
  def boolean(*args); end
  def ceiling(*args); end
  def child(*expressions); end
  def concat(*args); end
  def contains(*args); end
  def contains_word(word); end
  def count(*args); end
  def css(selector); end
  def current; end
  def descendant(*expressions); end
  def descendant_or_self(*element_names); end
  def divide(rhs); end
  def ends_with(suffix); end
  def equals(rhs); end
  def false(*args); end
  def floor(*args); end
  def following(*element_names); end
  def following_sibling(*element_names); end
  def function(name, *arguments); end
  def gt(rhs); end
  def gte(rhs); end
  def id(*args); end
  def inverse(*args); end
  def is(expression); end
  def join(*expressions); end
  def lang(*args); end
  def last; end
  def local_name(*args); end
  def lowercase; end
  def lt(rhs); end
  def lte(rhs); end
  def method(name, *arguments); end
  def minus(rhs); end
  def mod(rhs); end
  def multiply(rhs); end
  def n(*args); end
  def namespace(*element_names); end
  def namespace_uri(*args); end
  def next_sibling(*expressions); end
  def normalize(*args); end
  def normalize_space(*args); end
  def not(*args); end
  def not_equals(rhs); end
  def number(*args); end
  def one_of(*expressions); end
  def or(rhs); end
  def parent(*element_names); end
  def plus(rhs); end
  def position; end
  def preceding(*element_names); end
  def preceding_sibling(*element_names); end
  def previous_sibling(*expressions); end
  def qname; end
  def round(*args); end
  def self(*element_names); end
  def self_axis(*element_names); end
  def starts_with(*args); end
  def string(*args); end
  def string_length(*args); end
  def substring(*args); end
  def substring_after(*args); end
  def substring_before(*args); end
  def sum(*args); end
  def text; end
  def translate(*args); end
  def true(*args); end
  def union(*expressions); end
  def uppercase; end
  def where(expression); end
  def |(rhs); end
  def ~(*args); end
end

XPath::DSL::AXES = T.let(T.unsafe(nil), Array)

XPath::DSL::LOWERCASE_LETTERS = T.let(T.unsafe(nil), String)

XPath::DSL::METHODS = T.let(T.unsafe(nil), Array)

XPath::DSL::OPERATORS = T.let(T.unsafe(nil), Array)

XPath::DSL::UPPERCASE_LETTERS = T.let(T.unsafe(nil), String)

class XPath::Renderer
  def initialize(type); end

  def anywhere(element_names); end
  def attribute(current, name); end
  def axis(current, name, element_names); end
  def binary_operator(name, left, right); end
  def child(current, element_names); end
  def convert_argument(argument); end
  def css(current, selector); end
  def descendant(current, element_names); end
  def function(name, *arguments); end
  def is(one, two); end
  def join(*expressions); end
  def literal(node); end
  def render(node); end
  def string_literal(string); end
  def text(current); end
  def this_node; end
  def union(*expressions); end
  def variable(name); end
  def where(on, condition); end

  private

  def valid_xml_name?(name); end
  def with_element_conditions(expression, element_names); end

  class << self
    def render(node, type); end
  end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `easy_translate` gem.
# Please instead update this file by running `bin/tapioca gem easy_translate`.

# source://easy_translate//lib/easy_translate/request.rb#5
module EasyTranslate
  extend ::EasyTranslate::Threadable
  extend ::EasyTranslate::Detection
  extend ::EasyTranslate::Translation
  extend ::EasyTranslate::TranslationTarget

  class << self
    # Returns the value of attribute api_key.
    #
    # source://easy_translate//lib/easy_translate.rb#18
    def api_key; end

    # Sets the attribute api_key
    #
    # @param value the value to set the attribute api_key to.
    #
    # source://easy_translate//lib/easy_translate.rb#18
    def api_key=(_arg0); end
  end
end

# source://easy_translate//lib/easy_translate/detection.rb#8
module EasyTranslate::Detection
  include ::EasyTranslate::Threadable

  # Detect language
  #
  # @param texts [String, Array] - A single string or set of strings to detect for
  # @param options [Hash] - Extra options to pass along with the request
  # @return [String, Array] The resultant language or languages
  #
  # source://easy_translate//lib/easy_translate/detection.rb#15
  def detect(texts, options = T.unsafe(nil), http_options = T.unsafe(nil)); end

  private

  # source://easy_translate//lib/easy_translate/detection.rb#20
  def request_detection(texts, options, http_options); end
end

# A convenience class for wrapping a detection request
#
# source://easy_translate//lib/easy_translate/detection.rb#31
class EasyTranslate::Detection::DetectionRequest < ::EasyTranslate::Request
  # Set the texts and options
  #
  # @param texts [String, Array] - The text (or texts) to translate
  # @param options [Hash] - Options to override or pass along with the request
  # @return [DetectionRequest] a new instance of DetectionRequest
  #
  # source://easy_translate//lib/easy_translate/detection.rb#36
  def initialize(texts, options = T.unsafe(nil), http_options = T.unsafe(nil)); end

  # The body for the request
  #
  # @return [String] the body for the request, URL escaped
  #
  # source://easy_translate//lib/easy_translate/detection.rb#60
  def body; end

  # Whether or not this was a request for multiple texts
  #
  # @return [Boolean]
  #
  # source://easy_translate//lib/easy_translate/detection.rb#66
  def multi?; end

  # The params for this request
  #
  # @return [Hash] the params for the request
  #
  # source://easy_translate//lib/easy_translate/detection.rb#46
  def params; end

  # The path for the request
  #
  # @return [String] The path for the request
  #
  # source://easy_translate//lib/easy_translate/detection.rb#54
  def path; end

  private

  # Set the texts for this request
  #
  # @param texts [String, Array] - The text or texts for this request
  #
  # source://easy_translate//lib/easy_translate/detection.rb#74
  def texts=(texts); end
end

# source://easy_translate//lib/easy_translate/easy_translate_exception.rb#3
class EasyTranslate::EasyTranslateException < ::StandardError; end

# source://easy_translate//lib/easy_translate/languages.rb#3
EasyTranslate::LANGUAGES = T.let(T.unsafe(nil), Hash)

# source://easy_translate//lib/easy_translate/request.rb#7
class EasyTranslate::Request
  # @return [Request] a new instance of Request
  #
  # source://easy_translate//lib/easy_translate/request.rb#10
  def initialize(options = T.unsafe(nil), http_options = T.unsafe(nil)); end

  # Body, blank by default
  #
  # @return [String] The body for this request
  #
  # source://easy_translate//lib/easy_translate/request.rb#17
  def body; end

  # Returns the value of attribute http_options.
  #
  # source://easy_translate//lib/easy_translate/request.rb#8
  def http_options; end

  # Sets the attribute http_options
  #
  # @param value the value to set the attribute http_options to.
  #
  # source://easy_translate//lib/easy_translate/request.rb#8
  def http_options=(_arg0); end

  # The base params for a request
  #
  # @return [Hash] a hash of the base parameters for any request
  #
  # source://easy_translate//lib/easy_translate/request.rb#29
  def params; end

  # The path for the request
  #
  # @raise [NotImplementedError]
  # @return [String] The path for this request
  #
  # source://easy_translate//lib/easy_translate/request.rb#23
  def path; end

  # Perform the given request
  #
  # @return [String] The response String
  #
  # source://easy_translate//lib/easy_translate/request.rb#38
  def perform_raw; end

  private

  # source://easy_translate//lib/easy_translate/request.rb#70
  def configure_ssl(http); end

  # source://easy_translate//lib/easy_translate/request.rb#65
  def configure_timeouts(http); end

  # source://easy_translate//lib/easy_translate/request.rb#58
  def http; end

  # Stringify the params
  #
  # @return [String] The params as a string
  #
  # source://easy_translate//lib/easy_translate/request.rb#97
  def param_s; end

  # source://easy_translate//lib/easy_translate/request.rb#83
  def ssl_cert_store; end

  # source://easy_translate//lib/easy_translate/request.rb#91
  def ssl_options; end

  # source://easy_translate//lib/easy_translate/request.rb#54
  def uri; end
end

# source://easy_translate//lib/easy_translate/threadable.rb#6
module EasyTranslate::Threadable
  # source://easy_translate//lib/easy_translate/threadable.rb#7
  def threaded_process(method, *args); end
end

# source://easy_translate//lib/easy_translate/translation.rb#8
module EasyTranslate::Translation
  include ::EasyTranslate::Threadable

  # Translate text
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param texts [String, Array] - A single string or set of strings to translate
  # @param options [Hash] a customizable set of options
  # @return [String, Array] Translated text or texts
  #
  # source://easy_translate//lib/easy_translate/translation.rb#19
  def translate(texts, options = T.unsafe(nil), http_options = T.unsafe(nil)); end

  private

  # Perform a single request to translate texts
  #
  # @option options
  # @option options
  # @option options
  # @param texts [Array] - Texts to translate
  # @param options [Hash] a customizable set of options
  # @return [String, Array] Translated text or texts
  #
  # source://easy_translate//lib/easy_translate/translation.rb#31
  def request_translations(texts, options = T.unsafe(nil), http_options = T.unsafe(nil)); end
end

# A convenience class for wrapping a translation request
#
# source://easy_translate//lib/easy_translate/translation.rb#42
class EasyTranslate::Translation::TranslationRequest < ::EasyTranslate::Request
  # Set the texts and options
  #
  # @param texts [String, Array] - the text (or texts) to translate
  # @param options [Hash] - Options to override or pass along with the request
  # @raise [ArgumentError]
  # @return [TranslationRequest] a new instance of TranslationRequest
  #
  # source://easy_translate//lib/easy_translate/translation.rb#47
  def initialize(texts, options, http_options = T.unsafe(nil)); end

  # The body for the request
  #
  # @return [String] the body for the request, URL escaped
  #
  # source://easy_translate//lib/easy_translate/translation.rb#85
  def body; end

  # Whether or not this was a request for multiple texts
  #
  # @return [Boolean]
  #
  # source://easy_translate//lib/easy_translate/translation.rb#91
  def multi?; end

  # The params for this request
  #
  # @return [Hash] the params for the request
  #
  # source://easy_translate//lib/easy_translate/translation.rb#67
  def params; end

  # The path for the request
  #
  # @return [String] The path for the request
  #
  # source://easy_translate//lib/easy_translate/translation.rb#79
  def path; end

  private

  # Set the HTML attribute, if true add a format
  #
  # @param b [Boolean] - Whether or not the text supplied iS HTML
  #
  # source://easy_translate//lib/easy_translate/translation.rb#109
  def html=(b); end

  # Look up a language in the table (if needed)
  #
  # source://easy_translate//lib/easy_translate/translation.rb#98
  def lang(orig); end

  # Set the texts for this request
  #
  # @param texts [String, Array] - The text or texts for this request
  #
  # source://easy_translate//lib/easy_translate/translation.rb#115
  def texts=(texts); end
end

# source://easy_translate//lib/easy_translate/translation_target.rb#6
module EasyTranslate::TranslationTarget
  # Determine what translations are available
  #
  # @param source [String] - The source language (optional)
  # @param options [Hash] - extra options
  # @return [Array] an array of strings representing languages
  #
  # source://easy_translate//lib/easy_translate/translation_target.rb#12
  def translations_available(target = T.unsafe(nil), options = T.unsafe(nil)); end
end

# source://easy_translate//lib/easy_translate/translation_target.rb#20
class EasyTranslate::TranslationTarget::TranslationTargetRequest < ::EasyTranslate::Request
  # @return [TranslationTargetRequest] a new instance of TranslationTargetRequest
  #
  # source://easy_translate//lib/easy_translate/translation_target.rb#22
  def initialize(target = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://easy_translate//lib/easy_translate/translation_target.rb#32
  def params; end

  # source://easy_translate//lib/easy_translate/translation_target.rb#39
  def path; end
end

# source://easy_translate//lib/easy_translate/version.rb#3
EasyTranslate::VERSION = T.let(T.unsafe(nil), String)

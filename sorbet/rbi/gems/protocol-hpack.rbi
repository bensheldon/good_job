# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/protocol-hpack/all/protocol-hpack.rbi
#
# protocol-hpack-1.4.2

module Protocol
end
module Protocol::HPACK
end
class Protocol::HPACK::Huffman
  def decode(buffer); end
  def encode(str); end
end
class Protocol::HPACK::Error < StandardError
end
class Protocol::HPACK::CompressionError < Protocol::HPACK::Error
end
class Protocol::HPACK::DecompressionError < Protocol::HPACK::Error
end
class Protocol::HPACK::Context
  def add_command(*header); end
  def add_to_table(command); end
  def change_table_size(size); end
  def current_table_size; end
  def decode(command); end
  def dereference(index); end
  def encode(headers); end
  def huffman; end
  def index; end
  def initialize(table = nil, huffman: nil, index: nil, table_size: nil); end
  def initialize_copy(other); end
  def size_check(command); end
  def table; end
  def table_size; end
  def table_size=(size); end
end
class Protocol::HPACK::Compressor
  def buffer; end
  def context; end
  def encode(headers, table_size = nil); end
  def huffman; end
  def initialize(buffer, context = nil, table_size_limit: nil); end
  def offset; end
  def table_size_limit; end
  def write_byte(byte); end
  def write_bytes(bytes); end
  def write_header(command); end
  def write_integer(value, bits); end
  def write_string(string, huffman = nil); end
end
class Protocol::HPACK::Decompressor
  def buffer; end
  def context; end
  def decode(list = nil); end
  def end?; end
  def initialize(buffer, context = nil, table_size_limit: nil); end
  def offset; end
  def peek_byte; end
  def read_byte; end
  def read_bytes(length); end
  def read_header; end
  def read_integer(bits); end
  def read_string; end
  def table_size_limit; end
end

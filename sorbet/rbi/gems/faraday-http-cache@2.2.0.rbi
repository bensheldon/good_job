# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `faraday-http-cache` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module Faraday
  class << self
    def default_adapter; end
    def default_adapter=(adapter); end
    def default_connection; end
    def default_connection=(_arg0); end
    def default_connection_options; end
    def default_connection_options=(options); end
    def ignore_env_proxy; end
    def ignore_env_proxy=(_arg0); end
    def lib_path; end
    def lib_path=(_arg0); end
    def new(url = T.unsafe(nil), options = T.unsafe(nil), &block); end
    def require_lib(*libs); end
    def require_libs(*libs); end
    def respond_to_missing?(symbol, include_private = T.unsafe(nil)); end
    def root_path; end
    def root_path=(_arg0); end

    private

    def method_missing(name, *args, &block); end
  end
end

Faraday::FilePart = UploadIO

class Faraday::HttpCache < ::Faraday::Middleware
  def initialize(app, store: T.unsafe(nil), serializer: T.unsafe(nil), shared_cache: T.unsafe(nil), instrumenter: T.unsafe(nil), instrument_name: T.unsafe(nil), logger: T.unsafe(nil)); end

  def call(env); end
  def call!(env); end

  protected

  def request; end
  def storage; end

  private

  def create_request(env); end
  def create_response(env); end
  def delete(request, response); end
  def extract_status(trace); end
  def fetch(env); end
  def instrument(env); end
  def log_request; end
  def process(env); end
  def shared_cache?; end
  def should_delete?(status, method); end
  def store(response); end
  def trace(operation); end
  def validate(entry, env); end
end

Faraday::HttpCache::CACHE_STATUSES = T.let(T.unsafe(nil), Array)

class Faraday::HttpCache::CacheControl
  def initialize(header); end

  def max_age; end
  def must_revalidate?; end
  def no_cache?; end
  def no_store?; end
  def normalize_max_ages(age); end
  def private?; end
  def proxy_revalidate?; end
  def public?; end
  def s_maxage; end
  def shared_max_age; end
  def to_s; end

  private

  def parse(header); end
end

Faraday::HttpCache::ERROR_STATUSES = T.let(T.unsafe(nil), Range)

Faraday::HttpCache::EVENT_NAME = T.let(T.unsafe(nil), String)

class Faraday::HttpCache::MemoryStore
  def initialize; end

  def delete(key); end
  def read(key); end
  def write(key, value); end
end

class Faraday::HttpCache::Request
  def initialize(method:, url:, headers:); end

  def cache_control; end
  def cacheable?; end
  def headers; end
  def method; end
  def no_cache?; end
  def serializable_hash; end
  def url; end

  class << self
    def from_env(env); end
  end
end

class Faraday::HttpCache::Response
  def initialize(payload = T.unsafe(nil)); end

  def age; end
  def cacheable_in_private_cache?; end
  def cacheable_in_shared_cache?; end
  def date; end
  def etag; end
  def fresh?; end
  def last_modified; end
  def max_age; end
  def not_modified?; end
  def payload; end
  def serializable_hash; end
  def to_response(env); end
  def ttl; end

  private

  def cache_control; end
  def cacheable?(shared_cache); end
  def cacheable_status_code?; end
  def ensure_date_header!; end
  def expires; end
  def headers; end
  def prepare_to_cache; end
  def validateable?; end
  def wrap_headers!; end
end

Faraday::HttpCache::Response::CACHEABLE_STATUS_CODES = T.let(T.unsafe(nil), Array)

class Faraday::HttpCache::Storage
  def initialize(store: T.unsafe(nil), serializer: T.unsafe(nil), logger: T.unsafe(nil)); end

  def cache; end
  def delete(url); end
  def read(request, klass: T.unsafe(nil)); end
  def write(request, response); end

  private

  def assert_valid_store!; end
  def cache_key_for(url); end
  def deserialize_entry(*objects); end
  def deserialize_object(object); end
  def lookup_response(request, entries); end
  def response_matches?(request, cached_request, cached_response); end
  def serialize_entry(*objects); end
  def serialize_object(object); end
  def vary_matches?(cached_response, request, cached_request); end
  def warn(message); end
end

Faraday::HttpCache::UNSAFE_METHODS = T.let(T.unsafe(nil), Array)

Faraday::METHODS_WITH_BODY = T.let(T.unsafe(nil), Array)

Faraday::METHODS_WITH_QUERY = T.let(T.unsafe(nil), Array)

Faraday::Parts = Parts

Faraday::Timer = Timeout

Faraday::UploadIO = UploadIO

Faraday::VERSION = T.let(T.unsafe(nil), String)

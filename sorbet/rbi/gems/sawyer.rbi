# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/sawyer/all/sawyer.rbi
#
# sawyer-0.8.2

module Sawyer
end
class Sawyer::Resource
  def [](method); end
  def []=(method, value); end
  def _agent; end
  def _fields; end
  def _rels; end
  def attrs; end
  def each(&block); end
  def initialize(agent, data = nil); end
  def inspect; end
  def key?(key); end
  def marshal_dump; end
  def marshal_load(dumped); end
  def method_missing(method, *args); end
  def process_value(value); end
  def self.attr_accessor(*attrs); end
  def to_attrs; end
  def to_h; end
  def to_hash; end
  def to_yaml_properties; end
  include Enumerable
end
class Sawyer::Relation
  def agent; end
  def available_methods; end
  def call(data = nil, options = nil); end
  def delete(data = nil, options = nil); end
  def get(options = nil); end
  def head(options = nil); end
  def href(options = nil); end
  def href_template; end
  def initialize(agent, name, href, method = nil); end
  def inspect; end
  def method; end
  def name; end
  def options(data = nil, opt = nil); end
  def patch(data = nil, options = nil); end
  def post(data = nil, options = nil); end
  def put(data = nil, options = nil); end
  def self.from_link(agent, name, options); end
  def self.from_links(agent, index, rels = nil); end
end
class Sawyer::Relation::Map
  def <<(rel); end
  def [](key); end
  def initialize; end
  def inspect; end
  def keys; end
  def size; end
  def to_h; end
  def to_hash; end
end
class Sawyer::Response
  def agent; end
  def body; end
  def data; end
  def env; end
  def headers; end
  def initialize(agent, res, options = nil); end
  def inspect; end
  def process_data(data); end
  def process_rels; end
  def rels; end
  def status; end
  def time; end
  def timing; end
end
class Sawyer::Serializer
  def decode(data); end
  def decode_hash(hash); end
  def decode_hash_value(key, value); end
  def decode_object(data); end
  def dump(data); end
  def encode(data); end
  def encode_hash(hash); end
  def encode_object(data); end
  def initialize(format, dump_method_name = nil, load_method_name = nil); end
  def load(data); end
  def self.any_json; end
  def self.json; end
  def self.message_pack; end
  def self.multi_json; end
  def self.yajl; end
  def time_field?(key, value); end
end
class Sawyer::Agent
  def allow_undefined_methods; end
  def allow_undefined_methods=(arg0); end
  def allow_undefined_methods?; end
  def call(method, url, data = nil, options = nil); end
  def decode_body(str); end
  def encode_body(data); end
  def expand_url(url, options = nil); end
  def initialize(endpoint, options = nil); end
  def inspect; end
  def links_parser; end
  def links_parser=(arg0); end
  def marshal_dump; end
  def marshal_load(dumped); end
  def parse_links(data); end
  def rels; end
  def root; end
  def self.decode(data); end
  def self.encode(data); end
  def self.serializer; end
  def self.serializer=(arg0); end
  def start; end
  def to_yaml_properties; end
end
module Sawyer::LinkParsers
end
class Sawyer::LinkParsers::Hal
  def parse(data); end
end
class Sawyer::LinkParsers::Simple
  def parse(data); end
end
class Sawyer::Error < StandardError
end

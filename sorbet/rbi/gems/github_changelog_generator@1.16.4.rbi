# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `github_changelog_generator` gem.
# Please instead update this file by running `bin/tapioca gem github_changelog_generator`.

# The main module, where placed all classes (now, at least)
#
# source://github_changelog_generator//lib/github_changelog_generator/helper.rb#6
module GitHubChangelogGenerator; end

# source://github_changelog_generator//lib/github_changelog_generator/argv_parser.rb#7
class GitHubChangelogGenerator::ArgvParser
  # @return [ArgvParser] a new instance of ArgvParser
  #
  # source://github_changelog_generator//lib/github_changelog_generator/argv_parser.rb#10
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute options.
  #
  # source://github_changelog_generator//lib/github_changelog_generator/argv_parser.rb#8
  def options; end

  # source://github_changelog_generator//lib/github_changelog_generator/argv_parser.rb#14
  def parse!(argv); end

  # source://github_changelog_generator//lib/github_changelog_generator/argv_parser.rb#21
  def parser; end

  class << self
    # source://github_changelog_generator//lib/github_changelog_generator/argv_parser.rb#220
    def banner; end
  end
end

# Main class and entry point for this script.
#
# source://github_changelog_generator//lib/github_changelog_generator.rb#24
class GitHubChangelogGenerator::ChangelogGenerator
  # Class, responsible for whole changelog generation cycle
  #
  # @return initialised instance of ChangelogGenerator
  #
  # source://github_changelog_generator//lib/github_changelog_generator.rb#27
  def initialize; end

  # The entry point of this script to generate changelog
  #
  # @raise [ChangelogGeneratorError] Is thrown when one of specified tags was not found in list of tags.
  #
  # source://github_changelog_generator//lib/github_changelog_generator.rb#34
  def run; end
end

# Default error for ChangelogGenerator
#
# source://github_changelog_generator//lib/github_changelog_generator/generator/generator.rb#12
class GitHubChangelogGenerator::ChangelogGeneratorError < ::StandardError; end

# This class generates the content for a single changelog entry. An entry is
# generally either for a specific tagged release or the collection of
# unreleased changes.
#
# An entry is comprised of header text followed by a series of sections
# relating to the entry.
#
# @see GitHubChangelogGenerator::Generator
# @see GitHubChangelogGenerator::Section
#
# source://github_changelog_generator//lib/github_changelog_generator/generator/entry.rb#15
class GitHubChangelogGenerator::Entry
  # @return [Entry] a new instance of Entry
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/entry.rb#18
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute content.
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/entry.rb#16
  def content; end

  # Generates log entry with header and body
  #
  # @param pull_requests [Array] List or PR's in new section
  # @param issues [Array] List of issues in new section
  # @param newer_tag_name [String] Name of the newer tag. Could be nil for `Unreleased` section.
  # @param newer_tag_link [String] Name of the newer tag. Could be "HEAD" for `Unreleased` section.
  # @param newer_tag_time [Time] Time of the newer tag
  # @param older_tag_name [Hash, nil] Older tag, used for the links. Could be nil for last tag.
  # @return [String] Ready and parsed section content.
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/entry.rb#32
  def generate_entry_for_tag(pull_requests, issues, newer_tag_name, newer_tag_link, newer_tag_time, older_tag_name); end

  # source://github_changelog_generator//lib/github_changelog_generator/generator/entry.rb#43
  def line_labels_for(issue); end

  private

  # Creates a section for issues/PRs with no labels or no mapped labels.
  #
  # @param issues [Array]
  # @return [Nil]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/entry.rb#194
  def add_unmapped_section(issues); end

  # Creates section objects for this entry.
  #
  # @return [Nil]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/entry.rb#56
  def create_sections; end

  # Default sections to used when --configure-sections is not set.
  #
  # @return [Array] Section objects.
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/entry.rb#135
  def default_sections; end

  # Generates complete body text for a tag (without a header)
  #
  # @param pull_requests [Array]
  # @param issues [Array]
  # @return [String] Content generated from sections of sorted issues & PRs.
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/entry.rb#127
  def generate_body(pull_requests, issues); end

  # Generates header text for an entry.
  #
  # @param newer_tag_name [String] The name of a newer tag
  # @param newer_tag_link [String] Used for URL generation. Could be same as #newer_tag_name or some specific value, like HEAD
  # @param newer_tag_time [Time] Time when the newer tag was created
  # @param older_tag_name [String] The name of an older tag; used for URLs.
  # @param project_url [String] URL for the current project.
  # @return [String] Header text content.
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/entry.rb#96
  def generate_header(newer_tag_name, newer_tag_link, newer_tag_time, older_tag_name, project_url); end

  # Turns the argument from the commandline of --configure-sections or
  # --add-sections into an array of Section objects.
  #
  # @param sections_desc [String, Hash] Either string or hash describing sections
  # @return [Array] Parsed section objects.
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/entry.rb#72
  def parse_sections(sections_desc); end

  # Sorts issues and PRs into entry sections by labels and lack of labels.
  #
  # @param pull_requests [Array]
  # @param issues [Array]
  # @return [Nil]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/entry.rb#152
  def sort_into_sections(pull_requests, issues); end

  # Iterates through sections and sorts labeled issues into them based on
  # the label mapping. Returns any unmapped or unlabeled issues.
  #
  # @param issues [Array] Issues or pull requests.
  # @return [Array] Issues that were not mapped into any sections.
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/entry.rb#169
  def sort_labeled_issues(issues); end
end

# source://github_changelog_generator//lib/github_changelog_generator/parser_file.rb#8
class GitHubChangelogGenerator::FileParserChooser
  # @return [FileParserChooser] a new instance of FileParserChooser
  #
  # source://github_changelog_generator//lib/github_changelog_generator/parser_file.rb#9
  def initialize(options); end

  # source://github_changelog_generator//lib/github_changelog_generator/parser_file.rb#14
  def parse!(_argv); end

  # source://github_changelog_generator//lib/github_changelog_generator/parser_file.rb#20
  def resolve_path; end
end

# This class is the high-level code for gathering issues and PRs for a github
# repository and generating a CHANGELOG.md file. A changelog is made up of a
# series of "entries" of all tagged releases, plus an extra entry for the
# unreleased changes. Entries are made up of various organizational
# "sections," and sections contain the github issues and PRs.
#
# So the changelog contains entries, entries contain sections, and sections
# contain issues and PRs.
#
# @see GitHubChangelogGenerator::Entry
# @see GitHubChangelogGenerator::Section
#
# source://github_changelog_generator//lib/github_changelog_generator/generator/generator_fetcher.rb#4
class GitHubChangelogGenerator::Generator
  # A Generator responsible for all logic, related with changelog generation from ready-to-parse issues
  #
  # Example:
  #   generator = GitHubChangelogGenerator::Generator.new
  #   content = generator.compound_changelog
  #
  # @return [Generator] a new instance of Generator
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator.rb#40
  def initialize(options = T.unsafe(nil)); end

  # Adds a key "first_occurring_tag" to each PR with a value of the oldest
  # tag that a PR's merge commit occurs in in the git history. This should
  # indicate the release of each PR by git's history regardless of dates and
  # divergent branches.
  #
  # @param tags [Array] The tags sorted by time, newest to oldest.
  # @param prs [Array] The PRs to discover the tags of.
  # @return [Nil] No return; PRs are updated in-place.
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_fetcher.rb#45
  def add_first_occurring_tag_to_prs(tags, prs); end

  # Associate merged PRs by the SHA detected in github comments of the form
  # "rebased commit: <sha>". For use when the merge_commit_sha is not in the
  # actual git history due to rebase.
  #
  # @param tags [Array] The tags sorted by time, newest to oldest.
  # @param prs_left [Array] The PRs not yet associated with any tag or branch.
  # @return [Array] PRs without rebase comments.
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_fetcher.rb#126
  def associate_rebase_comment_prs(tags, prs_left, total); end

  # Associate merged PRs by the HEAD of the release branch. If no
  # --release-branch was specified, then the github default branch is used.
  #
  # @param prs_left [Array] PRs not associated with any tag.
  # @param total [Integer] The total number of PRs to associate; used for verbose printing.
  # @return [Array] PRs without their merge_commit_sha in the branch.
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_fetcher.rb#102
  def associate_release_branch_prs(prs_left, total); end

  # Associate merged PRs by the merge SHA contained in each tag. If the
  # merge_commit_sha is not found in any tag's history, skip association.
  #
  # @param tags [Array] The tags sorted by time, newest to oldest.
  # @param prs [Array] The PRs to associate.
  # @return [Array] PRs without their merge_commit_sha in a tag.
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_fetcher.rb#64
  def associate_tagged_prs(tags, prs, total); end

  # PRs to include in this section will be >= [Left Tag Date] and <= [Right Tag Date]
  #
  # @param section_tags [Array] are the tags that need a subsection output
  # @param filtered_tags [Array] is the list of filtered tags ordered from newest -> oldest
  # @return [Hash] key is the tag to output, value is an array of [Left Tag, Right Tag]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_tags.rb#27
  def build_tag_section_mapping(section_tags, filtered_tags); end

  # Main function to start changelog generation
  #
  # @return [String] Generated changelog file
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator.rb#50
  def compound_changelog; end

  # Method filter issues, that belong only specified tag range
  #
  # @param issues [Array] issues to filter
  # @param hash_key [Symbol] key of date value default is :actual_date
  # @param older_tag [Hash, Nil] all issues before this tag date will be excluded. May be nil, if it's first tag
  # @param newer_tag [Hash, Nil] all issue after this tag will be excluded. May be nil for unreleased section
  # @return [Array] filtered issues
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_processor.rb#99
  def delete_by_time(issues, hash_key = T.unsafe(nil), older_tag = T.unsafe(nil), newer_tag = T.unsafe(nil)); end

  # Find correct closed dates, if issues was closed by commits
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_fetcher.rb#26
  def detect_actual_closed_dates(issues); end

  # Detect link, name and time for specified tag.
  #
  # @param newer_tag [Hash] newer tag. Can be nil, if it's Unreleased section.
  # @return [Array] link, name and time of the tag
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_tags.rb#79
  def detect_link_tag_time(newer_tag); end

  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_tags.rb#100
  def due_tag; end

  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_processor.rb#125
  def ensure_older_tag(older_tag, newer_tag); end

  # delete all issues with labels from options[:exclude_labels] array
  #
  # @param issues [Array]
  # @return [Array] filtered array
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_processor.rb#8
  def exclude_issues_by_labels(issues); end

  # Only include issues without labels if options[:add_issues_wo_labels]
  #
  # @param issues [Array]
  # @return [Array] filtered array
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_processor.rb#20
  def exclude_issues_without_labels(issues); end

  # fetch, filter tags, fetch dates and sort them in time order
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_tags.rb#6
  def fetch_and_filter_tags; end

  # Fetch event for issues and pull requests
  #
  # @return [Array] array of fetched issues
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_fetcher.rb#7
  def fetch_events_for_issues_and_pr; end

  # Async fetching of all tags dates
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_fetcher.rb#15
  def fetch_tags_dates(tags); end

  # General filtered function
  #
  # @param all_issues [Array] PRs or issues
  # @return [Array] filtered issues
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_processor.rb#189
  def filter_array_by_labels(all_issues); end

  # @param issues [Object]
  # @todo Document this
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_processor.rb#174
  def filter_by_include_labels(issues); end

  # @return [Array] filtered issues accourding milestone
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_processor.rb#31
  def filter_by_milestone(filtered_issues, tag_name, all_issues); end

  # Method filter issues, that belong only specified tag range
  #
  # @param issues [Array] issues to filter
  # @param newer_tag [Hash, Nil] Tag to find PRs of. May be nil for unreleased section
  # @return [Array] filtered issues
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_processor.rb#87
  def filter_by_tag(issues, newer_tag = T.unsafe(nil)); end

  # @param all_tags [Array] all tags
  # @return [Array] filtered tags according :due_tag option
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_tags.rb#141
  def filter_due_tag(all_tags); end

  # @param all_tags [Array] all tags
  # @return [Array] filtered tags according :exclude_tags or :exclude_tags_regex option
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_tags.rb#172
  def filter_excluded_tags(all_tags); end

  # @param all_tags [Array] all tags
  # @return [Array] filtered tags according to :include_tags_regex option
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_tags.rb#161
  def filter_included_tags(all_tags); end

  # This method filter only merged PR and
  # fetch missing required attributes for pull requests
  # :merged_at - is a date, when issue PR was merged.
  # More correct to use merged date, rather than closed date.
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_processor.rb#218
  def filter_merged_pull_requests(pull_requests); end

  # @param all_tags [Array] all tags
  # @return [Array] filtered tags according :since_tag option
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_tags.rb#121
  def filter_since_tag(all_tags); end

  # @param items [Array] Issues & PRs to filter when without labels
  # @return [Array] Issues & PRs without labels or empty array if
  #   add_issues_wo_labels or add_pr_wo_labels are false
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_processor.rb#162
  def filter_wo_labels(items); end

  # Returns the value of attribute filtered_tags.
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator.rb#27
  def filtered_tags; end

  # Sets the attribute filtered_tags
  #
  # @param value the value to set the attribute filtered_tags to.
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator.rb#27
  def filtered_tags=(_arg0); end

  # Fill :actual_date parameter of specified issue by closed date of the commit, if it was closed by commit.
  #
  # @param issue [Hash]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_fetcher.rb#156
  def find_closed_date_by_commit(issue); end

  # Add all issues, that should be in that tag, according milestone
  #
  # @param all_issues [Array]
  # @param tag_name [String]
  # @return [Array] issues with milestone #tag_name
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_processor.rb#47
  def find_issues_to_add(all_issues, tag_name); end

  # Filter issues according labels
  #
  # @return [Array] Filtered issues
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_processor.rb#197
  def get_filtered_issues(issues); end

  # This method fetches missing params for PR and filter them by specified options
  # It include add all PR's with labels from options[:include_labels] array
  # And exclude all from :exclude_labels array.
  #
  # @return [Array] filtered PR's
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_processor.rb#207
  def get_filtered_pull_requests(pull_requests); end

  # Return tags after filtering tags in lists provided by option: --exclude-tags
  #
  # @return [Array]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_tags.rb#114
  def get_filtered_tags(all_tags); end

  # Returns date for given GitHub Tag hash
  #
  # Memoize the date by tag name.
  #
  # @param tag_name [Hash]
  # @raise [ChangelogGeneratorError]
  # @return [Time] time of specified tag
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_tags.rb#63
  def get_time_of_tag(tag_name); end

  # Include issues with labels, specified in :include_labels
  #
  # @param issues [Array] to filter
  # @return [Array] filtered array of issues
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_processor.rb#154
  def include_issues_by_labels(issues); end

  # Returns the value of attribute options.
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator.rb#27
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator.rb#27
  def options=(_arg0); end

  # @return [Array] array with removed issues, that contain milestones with same name as a tag
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_processor.rb#67
  def remove_issues_in_milestones(filtered_issues); end

  # Set closed date from this issue
  #
  # @param event [Hash]
  # @param issue [Hash]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_fetcher.rb#175
  def set_date_from_event(event, issue); end

  # @return [Object] try to find newest tag using #Reader and :base option if specified otherwise returns nil
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_tags.rb#96
  def since_tag; end

  # Sort all tags by date, newest to oldest
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_tags.rb#49
  def sort_tags_by_date(tags); end

  # Returns the value of attribute sorted_tags.
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator.rb#27
  def sorted_tags; end

  # Sets the attribute sorted_tags
  #
  # @param value the value to set the attribute sorted_tags to.
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator.rb#27
  def sorted_tags=(_arg0); end

  # @return [Boolean]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_processor.rb#143
  def tag_newer_old_tag?(older_tag_time, time); end

  # @return [Boolean]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_processor.rb#135
  def tag_older_new_tag?(newer_tag_time, time); end

  # Returns the value of attribute tag_section_mapping.
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator.rb#27
  def tag_section_mapping; end

  # Sets the attribute tag_section_mapping
  #
  # @param value the value to set the attribute tag_section_mapping to.
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator.rb#27
  def tag_section_mapping=(_arg0); end

  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_tags.rb#104
  def version_of_first_item; end

  private

  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_tags.rb#184
  def apply_exclude_tags(all_tags); end

  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_tags.rb#192
  def apply_exclude_tags_regex(all_tags); end

  # Fetches @pull_requests and @issues and filters them based on options.
  #
  # @return [Nil] No return.
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator.rb#143
  def fetch_issues_and_pr; end

  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_tags.rb#202
  def filter_exact_tags(all_tags); end

  # Filters issues and pull requests based on, respectively, `actual_date`
  # and `merged_at` timestamp fields. `actual_date` is the detected form of
  # `closed_at` based on merge event SHA commit times.
  #
  # @return [Array] filtered issues and pull requests
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator.rb#101
  def filter_issues_for_tags(newer_tag, older_tag); end

  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_tags.rb#197
  def filter_tags_with_regex(all_tags, regex, regex_option_name); end

  # The full cycle of generation for whole project
  #
  # @return [String] All entries in the changelog
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator.rb#117
  def generate_entries_for_all_tags; end

  # Generate log only between 2 specified tags
  #
  # @param older_tag [String] all issues before this tag date will be excluded. May be nil, if it's first tag
  # @param newer_tag [String] all issue after this tag will be excluded. May be nil for unreleased section
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator.rb#74
  def generate_entry_between_tags(older_tag, newer_tag); end

  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator.rb#130
  def generate_unreleased_entry; end

  # Add template messages to given string. Previously added
  # messages of the same wording are removed.
  #
  # @param log [String]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator.rb#168
  def insert_fixed_string(log); end

  # Remove the previously assigned fixed message.
  #
  # @param log [String] Old lines are fixed
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator.rb#158
  def remove_old_fixed_string(log); end

  # Detect if a sha occurs in the --release-branch. Uses the github repo
  # default branch if not specified.
  #
  # @param sha [String] SHA to check.
  # @return [Boolean] True if SHA is in the branch git history.
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_fetcher.rb#198
  def sha_in_release_branch?(sha); end

  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_tags.rb#209
  def warn_if_nonmatching_regex(all_tags, regex, regex_option_name); end

  # source://github_changelog_generator//lib/github_changelog_generator/generator/generator_tags.rb#216
  def warn_if_tag_not_found(all_tags, tag); end
end

# source://github_changelog_generator//lib/github_changelog_generator/generator/generator.rb#29
GitHubChangelogGenerator::Generator::CREDIT_LINE = T.let(T.unsafe(nil), String)

# source://github_changelog_generator//lib/github_changelog_generator/helper.rb#7
module GitHubChangelogGenerator::Helper
  class << self
    # Returns the value of attribute log.
    #
    # source://github_changelog_generator//lib/github_changelog_generator/helper.rb#34
    def log; end

    # @return [Boolean] true if the currently running program is a unit test
    #
    # source://github_changelog_generator//lib/github_changelog_generator/helper.rb#9
    def test?; end
  end
end

# A Fetcher responsible for all requests to GitHub and all basic manipulation with related data
# (such as filtering, validating, e.t.c)
#
# Example:
# fetcher = GitHubChangelogGenerator::OctoFetcher.new(options)
#
# source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#16
class GitHubChangelogGenerator::OctoFetcher
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] Options passed in
  # @return [OctoFetcher] a new instance of OctoFetcher
  #
  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#33
  def initialize(options = T.unsafe(nil)); end

  # Returns the number of pages for a API call
  #
  # @param request_options [Object]
  # @param method [Object]
  # @param client [Object]
  # @return [Integer] number of pages for this API call in total
  #
  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#110
  def calculate_pages(client, method, request_options); end

  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#89
  def client; end

  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#72
  def client_options; end

  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#150
  def closed_pr_options; end

  # Fetch all commits
  #
  # @return [Array] Commits in a repo.
  #
  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#302
  def commits; end

  # @param name [String]
  # @return [Array<String>]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#342
  def commits_in_branch(name); end

  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#66
  def connection_options; end

  # @return [String] Default branch of the repo
  #
  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#336
  def default_branch; end

  # This method fetch all closed issues and separate them to pull requests and pure issues
  # (pull request is kind of issue in term of GitHub)
  #
  # @return [Tuple] with (issues [Array <Hash>], pull-requests [Array <Hash>])
  #
  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#160
  def fetch_closed_issues_and_pr; end

  # Fetch all pull requests. We need them to detect :merged_at parameter
  #
  # @return [Array <Hash>] all pull requests
  #
  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#183
  def fetch_closed_pull_requests; end

  # Fetch comments for PRs and add them to "comments"
  #
  # @param prs [Array] The array of PRs.
  # @return [Void] No return; PRs are updated in-place.
  #
  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#242
  def fetch_comments_async(prs); end

  # Fetch commit for specified event
  #
  # @param commit_id [String] the SHA of a commit to fetch
  # @return [Hash]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#281
  def fetch_commit(commit_id); end

  # Fetch tag time from repo
  #
  # @param tag [Hash] GitHub data item about a Tag
  # @return [Time] time of specified tag
  #
  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#270
  def fetch_date_of_tag(tag); end

  # Fetch event for all issues and add them to 'events'
  #
  # @param issues [Array]
  # @return [Void]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#206
  def fetch_events_async(issues); end

  # Fetch all SHAs occurring in or before a given tag and add them to
  # "shas_in_tag"
  #
  # @param tags [Array] The array of tags.
  # @return void
  #
  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#357
  def fetch_tag_shas(tags); end

  # Fetch all tags from repo
  #
  # @return [Array <Hash>] array of tags
  #
  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#98
  def get_all_tags; end

  # Fill input array with tags
  #
  # @return [Array <Hash>] array of tags in repo
  #
  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#128
  def github_fetch_tags; end

  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#46
  def middleware; end

  # Return the oldest commit in a repo
  #
  # @return [Hash] Oldest commit in the github git history.
  #
  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#331
  def oldest_commit; end

  private

  # This is wrapper with rescue block
  #
  # @param block [Proc]
  # @return [Object] returns exactly the same, what you put in the block, but wrap it with begin-rescue block
  #
  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#458
  def check_github_response; end

  # @param shas [Set]
  # @param sha [Object]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#368
  def commits_in_tag(sha, shas = T.unsafe(nil)); end

  # Presents the exception, and the aborts with the message.
  #
  # @param message [Object]
  # @param error [Object]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#482
  def fail_with_message(error, message); end

  # Returns GitHub token. First try to use variable, provided by --token option,
  # otherwise try to fetch it from CHANGELOG_GITHUB_TOKEN env variable.
  #
  # @return [String]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#508
  def fetch_github_token; end

  # Iterates through all pages until there are no more :next pages to follow
  # yields the result per page
  #
  # @param client [Octokit::Client]
  # @param method [String] (eg. 'tags')
  # @param arguments [Array]
  # @param parent [Async::Semaphore]
  # @param options [Hash]
  # @return [void]
  # @yield [Sawyer::Resource] An OctoKit-provided response (which can be empty)
  #
  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#424
  def iterate_pages(client, method, *arguments, parent: T.unsafe(nil), **options); end

  # Print long line with spaces on same line to clear prev message
  #
  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#500
  def print_empty_line; end

  # Print specified line on the same string
  #
  # @param log_string [String]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#495
  def print_in_same_line(log_string); end

  # Returns Hash of all querystring variables in given URI.
  #
  # @param uri [String] eg. https://api.github.com/repositories/43914960/tags?page=37&foo=1
  # @return [Hash] of all GET variables. eg. { 'page' => 37, 'foo' => 1 }
  #
  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#525
  def querystring_as_hash(uri); end

  # @param indata [Object]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#394
  def stringify_keys_deep(indata); end

  # @param msg [Object]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#488
  def sys_abort(msg); end

  # @return [String] helper to return Github "user/project"
  #
  # source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#517
  def user_project; end
end

# source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#20
GitHubChangelogGenerator::OctoFetcher::CHANGELOG_GITHUB_TOKEN = T.let(T.unsafe(nil), String)

# source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#93
GitHubChangelogGenerator::OctoFetcher::DEFAULT_REQUEST_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#21
GitHubChangelogGenerator::OctoFetcher::GH_RATE_LIMIT_EXCEEDED_MSG = T.let(T.unsafe(nil), String)

# source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#18
GitHubChangelogGenerator::OctoFetcher::MAXIMUM_CONNECTIONS = T.let(T.unsafe(nil), Integer)

# source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#19
GitHubChangelogGenerator::OctoFetcher::MAX_FORBIDDEN_RETRIES = T.let(T.unsafe(nil), Integer)

# Exception raised to warn about moved repositories.
#
# source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#410
class GitHubChangelogGenerator::OctoFetcher::MovedPermanentlyError < ::RuntimeError; end

# source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#23
GitHubChangelogGenerator::OctoFetcher::NO_TOKEN_PROVIDED = T.let(T.unsafe(nil), String)

# source://github_changelog_generator//lib/github_changelog_generator/octo_fetcher.rb#17
GitHubChangelogGenerator::OctoFetcher::PER_PAGE_NUMBER = T.let(T.unsafe(nil), Integer)

# This class wraps Options, and knows a list of known options. Others options
# will raise exceptions.
#
# source://github_changelog_generator//lib/github_changelog_generator/options.rb#9
class GitHubChangelogGenerator::Options < ::SimpleDelegator
  # @param values [Hash]
  # @raise [UnsupportedOptionError] if given values contain unknown options
  # @return [Options] a new instance of Options
  #
  # source://github_changelog_generator//lib/github_changelog_generator/options.rb#84
  def initialize(values); end

  # Set option key to val.
  #
  # @param key [Symbol]
  # @param val [Object]
  # @raise [UnsupportedOptionError] when trying to set an unknown option
  #
  # source://github_changelog_generator//lib/github_changelog_generator/options.rb#95
  def []=(key, val); end

  # Boolean method for whether the user is using add_sections
  #
  # @return [Boolean]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/options.rb#129
  def add_sections?; end

  # Boolean method for whether the user is using configure_sections
  #
  # @return [Boolean]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/options.rb#124
  def configure_sections?; end

  # Loads the configured Ruby files from the --require option.
  #
  # source://github_changelog_generator//lib/github_changelog_generator/options.rb#106
  def load_custom_ruby_files; end

  # Pretty-prints a censored options hash, if :verbose.
  #
  # source://github_changelog_generator//lib/github_changelog_generator/options.rb#111
  def print_options; end

  # @return [Hash]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/options.rb#101
  def to_hash; end

  # @return [Boolean] whether write to `:output`
  #
  # source://github_changelog_generator//lib/github_changelog_generator/options.rb#134
  def write_to_file?; end

  private

  # Returns a censored options hash.
  #
  # @return [Hash] The GitHub `:token` key is censored in the output.
  #
  # source://github_changelog_generator//lib/github_changelog_generator/options.rb#147
  def censored_values; end

  # @return [Boolean]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/options.rb#155
  def supported_option?(key); end

  # source://github_changelog_generator//lib/github_changelog_generator/options.rb#151
  def unsupported_options; end

  # source://github_changelog_generator//lib/github_changelog_generator/options.rb#140
  def values; end
end

# List of valid option names
#
# source://github_changelog_generator//lib/github_changelog_generator/options.rb#15
GitHubChangelogGenerator::Options::KNOWN_OPTIONS = T.let(T.unsafe(nil), Array)

# Raised on initializing with unknown keys in the values hash,
# and when trying to store a value on an unknown key.
#
# source://github_changelog_generator//lib/github_changelog_generator/options.rb#12
class GitHubChangelogGenerator::Options::UnsupportedOptionError < ::ArgumentError; end

# source://github_changelog_generator//lib/github_changelog_generator/parser.rb#9
class GitHubChangelogGenerator::Parser
  class << self
    # source://github_changelog_generator//lib/github_changelog_generator/parser.rb#31
    def abort_if_user_and_project_not_given!(options); end

    # @return [Options] Default options
    #
    # source://github_changelog_generator//lib/github_changelog_generator/parser.rb#42
    def default_options; end

    # source://github_changelog_generator//lib/github_changelog_generator/parser.rb#17
    def parse_options(argv = T.unsafe(nil)); end
  end
end

# source://github_changelog_generator//lib/github_changelog_generator/parser_file.rb#6
class GitHubChangelogGenerator::ParserError < ::StandardError; end

# ParserFile is a configuration file reader which sets options in the
# given Hash.
#
# In your project's root, you can put a file named
# <tt>.github_changelog_generator</tt> to override defaults.
#
# Example:
#   header_label=# My Super Changelog
#   ; Comments are allowed
#   future-release=5.0.0
#   # Ruby-style comments, too
#   since-tag=1.0.0
#
# The configuration format is <tt>some-key=value</tt> or <tt>some_key=value</tt>.
#
# source://github_changelog_generator//lib/github_changelog_generator/parser_file.rb#45
class GitHubChangelogGenerator::ParserFile
  # @param options [Hash] options to be configured from file contents
  # @param io [nil, IO] configuration file handle
  # @return [ParserFile] a new instance of ParserFile
  #
  # source://github_changelog_generator//lib/github_changelog_generator/parser_file.rb#48
  def initialize(options, io = T.unsafe(nil)); end

  # Sets options using configuration file content
  #
  # source://github_changelog_generator//lib/github_changelog_generator/parser_file.rb#54
  def parse!; end

  private

  # source://github_changelog_generator//lib/github_changelog_generator/parser_file.rb#92
  def convert_value(value, option_name); end

  # Returns a the option name as a symbol and its string value sans newlines.
  #
  # @param line [String] unparsed line from config file
  # @return [Array<Symbol, String>]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/parser_file.rb#81
  def extract_pair(line); end

  # Returns true if the line starts with a pound sign or a semi-colon.
  #
  # @return [Boolean]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/parser_file.rb#73
  def non_configuration_line?(line); end

  # source://github_changelog_generator//lib/github_changelog_generator/parser_file.rb#121
  def option_key_for(option_name); end

  # source://github_changelog_generator//lib/github_changelog_generator/parser_file.rb#63
  def parse_line!(line, line_number); end
end

# source://github_changelog_generator//lib/github_changelog_generator/parser_file.rb#106
GitHubChangelogGenerator::ParserFile::IRREGULAR_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://github_changelog_generator//lib/github_changelog_generator/parser_file.rb#86
GitHubChangelogGenerator::ParserFile::KNOWN_ARRAY_KEYS = T.let(T.unsafe(nil), Array)

# source://github_changelog_generator//lib/github_changelog_generator/parser_file.rb#90
GitHubChangelogGenerator::ParserFile::KNOWN_INTEGER_KEYS = T.let(T.unsafe(nil), Array)

# A Reader to read an existing ChangeLog file and return a structured object
#
# Example:
#   reader = GitHubChangelogGenerator::Reader.new
#   content = reader.read('./CHANGELOG.md')
#
# source://github_changelog_generator//lib/github_changelog_generator/reader.rb#27
class GitHubChangelogGenerator::Reader
  # @return [Reader] a new instance of Reader
  #
  # source://github_changelog_generator//lib/github_changelog_generator/reader.rb#28
  def initialize(options = T.unsafe(nil)); end

  # Parse the given ChangeLog data into a list of Hashes
  #
  # @param data [String] File data from the ChangeLog.md
  # @return [Array<Hash>] Parsed data, e.g. [{ 'version' => ..., 'url' => ..., 'date' => ..., 'content' => ...}, ...]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/reader.rb#73
  def parse(data); end

  # Parse a single heading and return a Hash
  #
  # The following heading structures are currently valid:
  # - ## [v1.0.2](https://github.com/zanui/chef-thumbor/tree/v1.0.1) (2015-03-24)
  # - ## [v1.0.2](https://github.com/zanui/chef-thumbor/tree/v1.0.1)
  # - ## [v1.0.2] (2015-03-24)
  # - ## [v1.0.2]
  # - ## v1.0.2 (2015-03-24)
  # - ## v1.0.2
  #
  # @param heading [String] Heading from the ChangeLog File
  # @return [Hash] Returns a structured Hash with version, url and date
  #
  # source://github_changelog_generator//lib/github_changelog_generator/reader.rb#55
  def parse_heading(heading); end

  # source://github_changelog_generator//lib/github_changelog_generator/reader.rb#84
  def read(file_path); end
end

# This class generates the content for a single section of a changelog entry.
# It turns the tagged issues and PRs into a well-formatted list of changes to
# be later incorporated into a changelog entry.
#
# @see GitHubChangelogGenerator::Entry
#
# source://github_changelog_generator//lib/github_changelog_generator/generator/section.rb#9
class GitHubChangelogGenerator::Section
  # @return [Section] a new instance of Section
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/section.rb#28
  def initialize(opts = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/section.rb#23
  def body_only; end

  # Returns the content of a section.
  #
  # @return [String] Generated section content
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/section.rb#41
  def generate_content; end

  # @return [Array<Hash>]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/section.rb#17
  def issues; end

  # @return [Array<String>]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/section.rb#20
  def labels; end

  # @return [String]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/section.rb#11
  def name; end

  # @return [String]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/section.rb#11
  def name=(_arg0); end

  # @return [Options]
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/section.rb#26
  def options; end

  # @return [String] a merge prefix, or an issue prefix
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/section.rb#14
  def prefix; end

  private

  # source://github_changelog_generator//lib/github_changelog_generator/generator/section.rb#88
  def body_till_first_break(body); end

  # Encapsulate characters to make Markdown look as expected.
  #
  # @param string [String]
  # @return [String] encapsulated input string
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/section.rb#111
  def encapsulate_string(string); end

  # Parse issue and generate single line formatted issue line.
  #
  # Example output:
  # - Add coveralls integration [\#223](https://github.com/github-changelog-generator/github-changelog-generator/pull/223) (@github-changelog-generator)
  #
  # @param issue [Hash] Fetched issue from GitHub
  # @return [String] Markdown-formatted single issue
  #
  # source://github_changelog_generator//lib/github_changelog_generator/generator/section.rb#65
  def get_string_for_issue(issue); end

  # source://github_changelog_generator//lib/github_changelog_generator/generator/section.rb#74
  def issue_line_with_body(line, issue); end

  # source://github_changelog_generator//lib/github_changelog_generator/generator/section.rb#92
  def issue_line_with_user(line, issue); end
end

# source://github_changelog_generator//lib/github_changelog_generator/generator/section.rb#105
GitHubChangelogGenerator::Section::ENCAPSULATED_CHARACTERS = T.let(T.unsafe(nil), Array)

# source://github_changelog_generator//lib/github_changelog_generator/version.rb#4
GitHubChangelogGenerator::VERSION = T.let(T.unsafe(nil), String)

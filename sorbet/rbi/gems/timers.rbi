# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/timers/all/timers.rbi
#
# timers-4.3.3

module Timers
end
class Timers::Interval
  def duration; end
  def initialize; end
  def now; end
  def start; end
  def stop; end
  def to_f; end
end
class Timers::Timer
  def call(offset = nil); end
  def cancel; end
  def continue; end
  def delay(seconds); end
  def fire(offset = nil); end
  def fires_in; end
  def initialize(group, interval, recurring = nil, offset = nil, &block); end
  def inspect; end
  def interval; end
  def offset; end
  def pause; end
  def paused?; end
  def recurring; end
  def reset(offset = nil); end
  def resume; end
  include Comparable
end
class Timers::PriorityHeap
  def bubble_down(index); end
  def bubble_up(index); end
  def initialize; end
  def peek; end
  def pop; end
  def push(element); end
  def size; end
  def swap(i, j); end
  def validate!(index = nil); end
end
class Timers::Events
  def fire(time); end
  def first; end
  def initialize; end
  def merge!; end
  def schedule(time, callback); end
  def size; end
end
class Timers::Events::Handle
  def <=>(other); end
  def cancel!; end
  def cancelled?; end
  def fire(time); end
  def initialize(time, callback); end
  def time; end
  include Comparable
end
class Timers::Group
  def after(interval, &block); end
  def cancel; end
  def continue; end
  def current_offset; end
  def delay(seconds); end
  def each(*args, &block); end
  def empty?(*args, &block); end
  def events; end
  def every(interval, recur = nil, &block); end
  def fire(offset = nil); end
  def initialize; end
  def now_and_after(interval, &block); end
  def now_and_every(interval, recur = nil, &block); end
  def pause; end
  def paused_timers; end
  def resume; end
  def timers; end
  def wait; end
  def wait_interval(offset = nil); end
  extend Forwardable
  include Enumerable
end
class Timers::Wait
  def duration; end
  def initialize(duration); end
  def remaining; end
  def self.for(duration, &block); end
  def time_remaining?; end
  def while_time_remaining; end
end

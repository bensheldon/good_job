# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `mini_mime` gem.
# Please instead update this file by running `bin/tapioca gem mini_mime`.

module MiniMime
  class << self
    def lookup_by_content_type(mime); end
    def lookup_by_extension(extension); end
    def lookup_by_filename(filename); end
  end
end

module MiniMime::Configuration
  class << self
    # Returns the value of attribute content_type_db_path.
    def content_type_db_path; end

    # Sets the attribute content_type_db_path
    #
    # @param value the value to set the attribute content_type_db_path to.
    def content_type_db_path=(_arg0); end

    # Returns the value of attribute ext_db_path.
    def ext_db_path; end

    # Sets the attribute ext_db_path
    #
    # @param value the value to set the attribute ext_db_path to.
    def ext_db_path=(_arg0); end
  end
end

class MiniMime::Db
  # @return [Db] a new instance of Db
  def initialize; end

  def lookup_by_content_type(content_type); end
  def lookup_by_extension(extension); end

  class << self
    def lookup_by_content_type(content_type); end
    def lookup_by_extension(extension); end
    def lookup_by_filename(filename); end
  end
end

class MiniMime::Db::Cache
  # @return [Cache] a new instance of Cache
  def initialize(size); end

  def []=(key, val); end
  def fetch(key, &blk); end
end

MiniMime::Db::LOCK = T.let(T.unsafe(nil), Thread::Mutex)

class MiniMime::Db::RandomAccessDb
  # @return [RandomAccessDb] a new instance of RandomAccessDb
  def initialize(path, sort_order); end

  def lookup(val); end

  # lifted from marcandre/backports
  def lookup_uncached(val); end

  def resolve(row); end
end

MiniMime::Db::RandomAccessDb::MAX_CACHED = T.let(T.unsafe(nil), Integer)

class MiniMime::Info
  # @return [Info] a new instance of Info
  def initialize(buffer); end

  def [](idx); end

  # @return [Boolean]
  def binary?; end

  # Returns the value of attribute content_type.
  def content_type; end

  # Sets the attribute content_type
  #
  # @param value the value to set the attribute content_type to.
  def content_type=(_arg0); end

  # Returns the value of attribute encoding.
  def encoding; end

  # Sets the attribute encoding
  #
  # @param value the value to set the attribute encoding to.
  def encoding=(_arg0); end

  # Returns the value of attribute extension.
  def extension; end

  # Sets the attribute extension
  #
  # @param value the value to set the attribute extension to.
  def extension=(_arg0); end
end

MiniMime::Info::BINARY_ENCODINGS = T.let(T.unsafe(nil), Array)
MiniMime::VERSION = T.let(T.unsafe(nil), String)

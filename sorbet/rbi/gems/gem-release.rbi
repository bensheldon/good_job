# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/gem-release/all/gem-release.rbi
#
# gem-release-2.2.2

module Gem
end
module Gem::Release
end
module Gem::Release::Helper
  def abort(msg, *args); end
  def announce(msg, *args); end
  def cmd(cmd, *args); end
  def error(msg, *args); end
  def gem(*args, &block); end
  def gem_cmd(cmd, *args); end
  def git(*args, &block); end
  def info(msg, *args); end
  def notice(msg, *args); end
  def run(cmd); end
  def ui(*args, &block); end
  def warn(msg, *args); end
  extend Forwardable
end
module Gem::Release::Helper::Hash
  def deep_merge(hash, other); end
  def except(hash, *keys); end
  def only(hash, *keys); end
  def symbolize_keys(hash); end
end
class Anonymous_Struct_44 < Struct
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def str; end
  def str=(_); end
  def width; end
  def width=(_); end
end
class Gem::Release::Helper::Wrapper < Anonymous_Struct_44
  def apply; end
  def wrap_lines(str); end
  def wrap_paragraph(str); end
end
module Gem::Release::Helper::String
  def camelize(str); end
  def underscore(str); end
  def wrap(str, width); end
end
module Gem::Release::Registry
  def self.included(const); end
end
class Gem::Release::Registry::Registry
  def [](key); end
  def []=(key, object); end
  def cmds; end
  def registry; end
end
module Gem::Release::Registry::ClassMethods
  def [](key); end
  def register(key); end
  def registry; end
  def registry_key; end
  def underscore(string); end
end
module Gem::Release::Registry::InstanceMethods
  def registry_key; end
end
module Gem::Release::Cmds
  def self.[](cmd); end
end
class Anonymous_Struct_45 < Struct
  def args; end
  def args=(_); end
  def context; end
  def context=(_); end
  def opts; end
  def opts=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class Gem::Release::Cmds::Base < Anonymous_Struct_45
  def config; end
  def defaults; end
  def gem; end
  def in_dirs; end
  def in_gem_dirs; end
  def initialize(context, args, opts); end
  def opts; end
  def pretend?; end
  def quiet?; end
  def self.arg(name, summary); end
  def self.args; end
  def self.default(opt); end
  def self.descr(opt); end
  def self.description(description = nil); end
  def self.inherited(cmd); end
  def self.opt(*args, &block); end
  def self.opts; end
  def self.summary(summary = nil); end
  def self.usage(usage = nil); end
  extend Gem::Release::Registry::ClassMethods
  include Gem::Release::Helper
  include Gem::Release::Registry::InstanceMethods
end
class Anonymous_Struct_46 < Struct
  def gem; end
  def gem=(_); end
  def git; end
  def git=(_); end
  def opts; end
  def opts=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class Gem::Release::Data < Anonymous_Struct_46
  def bin_files; end
  def data; end
  def files; end
  def gem_name; end
  def gem_path; end
  def homepage; end
  def license; end
  def licenses; end
  def module_names; end
  def strategy; end
  def user_email; end
  def user_login; end
  def user_name; end
  include Gem::Release::Helper::String
end
module Gem::Release::Files
end
class Gem::Release::Files::Templates < Anonymous_Struct_47
  def [](filename); end
  def all; end
  def builtin; end
  def custom; end
  def executable; end
  def license; end
  def self.executable(target); end
  def self.license(name, data); end
  def templates_for(sources, files = nil, opts = nil); end
end
class Gem::Release::Files::Templates::Group
  def all; end
  def data; end
  def files; end
  def groups; end
  def initialize(groups, data, sources, files); end
  def paths; end
  def paths_for(group); end
  def pattern; end
  def relative(file); end
  def sources; end
end
class Anonymous_Struct_47 < Struct
  def data; end
  def data=(_); end
  def files; end
  def files=(_); end
  def groups; end
  def groups=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class Gem::Release::Cmds::Bootstrap < Gem::Release::Cmds::Base
  def create_repo; end
  def data; end
  def executable; end
  def files; end
  def init_git; end
  def license; end
  def normalize(opts); end
  def opts; end
  def remote; end
  def run; end
  def scaffold; end
  def write(file); end
end
module Gem::Release::Version
end
class Anonymous_Struct_48 < Struct
  def number; end
  def number=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def target; end
  def target=(_); end
end
class Gem::Release::Version::Number < Anonymous_Struct_48
  def bump; end
  def fresh_pre_release?; end
  def from_pre_release?; end
  def from_release?; end
  def from_stage; end
  def major; end
  def matches; end
  def minor; end
  def num; end
  def parse; end
  def parts; end
  def patch; end
  def pre?; end
  def same_stage?; end
  def specific?; end
  def stage; end
  def stage_delim; end
  def target; end
  def to?(*targets); end
  def to_release?; end
  def validate_stage; end
end
class Anonymous_Struct_49 < Struct
  def name; end
  def name=(_); end
  def opts; end
  def opts=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def version; end
  def version=(_); end
end
class Gem::Release::Files::Version < Anonymous_Struct_49
  def bump; end
  def bumped; end
  def content; end
  def exists?; end
  def from; end
  def name; end
  def not_found; end
  def number; end
  def path; end
  def path_to(path); end
  def paths; end
  def to; end
  def to_h; end
  def to_num(*args); end
end
class Gem::Release::Cmds::Bump < Gem::Release::Cmds::Base
  def branch; end
  def bump; end
  def checkout; end
  def commit; end
  def message; end
  def push; end
  def push?; end
  def release(new_version); end
  def remote; end
  def reset; end
  def run; end
  def tag(new_version); end
  def validate; end
  def version; end
end
class Gem::Release::Files::Template
  def binding; end
  def context; end
  def data; end
  def data=(arg0); end
  def exists?; end
  def filename; end
  def initialize(source, target, data, opts); end
  def opts; end
  def opts=(arg0); end
  def render; end
  def source; end
  def source=(arg0); end
  def target; end
  def target=(arg0); end
  def template; end
  def write; end
end
class Gem::Release::Files::Template::Context < OpenStruct
  def define(type, &block); end
end
class Anonymous_Struct_50 < Struct
  def names; end
  def names=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def type; end
  def type=(_); end
end
class Gem::Release::Files::Template::Context::Const < Anonymous_Struct_50
  def build(names, &block); end
  def define(&block); end
  def indent(str, level); end
end
class Gem::Release::Cmds::Gemspec < Gem::Release::Cmds::Base
  def data; end
  def file; end
  def generate; end
  def run; end
  def templates; end
end
module Gem::Release::Helper::Http
  def post(url, body = nil, headers = nil); end
end
class Anonymous_Struct_51 < Struct
  def body; end
  def body=(_); end
  def headers; end
  def headers=(_); end
  def method; end
  def method=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def url; end
  def url=(_); end
end
class Gem::Release::Helper::Http::Client < Anonymous_Struct_51
  def client; end
  def const; end
  def request; end
  def uri; end
end
class Gem::Release::Context
  def abort(str); end
  def config; end
  def config=(arg0); end
  def gem; end
  def gem=(arg0); end
  def gem_cmd(cmd, *args); end
  def git; end
  def git=(arg0); end
  def in_dirs(args, opts, &block); end
  def in_gem_dirs(args, opts, &block); end
  def initialize(*args); end
  def run(cmd); end
  def ui; end
  def ui=(arg0); end
end
class Gem::Release::Context::Github
  def body; end
  def data; end
  def headers; end
  def initialize(repo, data); end
  def pre?(version); end
  def release; end
  def repo; end
  def url; end
  include Gem::Release::Helper::Http
end
class Gem::Release::Cmds::Github < Gem::Release::Cmds::Base
  def data; end
  def descr; end
  def release; end
  def repo; end
  def repo_from(url); end
  def run; end
  def tag_name; end
  def tagged?; end
  def token; end
  def validate; end
end
class Gem::Release::Cmds::Release < Gem::Release::Cmds::Base
  def build; end
  def cleanup; end
  def github; end
  def push; end
  def push_args; end
  def release; end
  def run; end
  def tag; end
  def target_version; end
  def validate; end
end
class Anonymous_Struct_52 < Struct
  def name; end
  def name=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class Gem::Release::Context::Gemspec < Anonymous_Struct_52
  def exists?; end
  def filename; end
  def filenames; end
  def gem_filename; end
  def gem_name; end
  def gemspec; end
  def homepage; end
  def initialize(*arg0); end
  def metadata; end
  def version; end
end
class Gem::Release::Context::Gem
  def filename; end
  def initialize(name); end
  def name; end
  def spec; end
  def spec_filename; end
  def version; end
end
class Gem::Release::Context::Git
  def clean?; end
  def remotes; end
  def tags; end
  def user_email; end
  def user_login; end
  def user_name; end
end
class Anonymous_Struct_53 < Struct
  def names; end
  def names=(_); end
  def opts; end
  def opts=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class Gem::Release::Context::Paths < Anonymous_Struct_53
end
class Anonymous_Struct_54 < Struct
  def names; end
  def names=(_); end
  def opts; end
  def opts=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class Gem::Release::Context::Paths::Base < Anonymous_Struct_54
  def current; end
  def cwd; end
  def in_dir(dir, &block); end
end
class Gem::Release::Context::Paths::ByNames < Gem::Release::Context::Paths::Base
  def dir; end
  def dirs; end
  def dirs_by_names; end
  def in_dirs(&block); end
end
class Gem::Release::Context::Paths::ByGemspecs < Gem::Release::Context::Paths::Base
  def by_gemspecs; end
  def by_names; end
  def dirs; end
  def gemspec; end
  def gemspecs(recurse = nil); end
  def in_dirs(&block); end
  def name_for(path); end
end
module Gem::Release::Context::Ui
  def self.new(opts); end
end
class Anonymous_Struct_55 < Struct
  def opts; end
  def opts=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class Gem::Release::Context::Ui::Base < Anonymous_Struct_55
  def puts(*str); end
  def stdout; end
  def stdout=(arg0); end
end
class Gem::Release::Context::Ui::Pipe < Gem::Release::Context::Ui::Base
  def announce(msg, args = nil, _ = nil); end
  def cmd(*arg0); end
  def error(msg, args = nil, _ = nil); end
  def format_msg(msg, args); end
  def info(msg, args = nil, _ = nil); end
  def notice(msg, args = nil, _ = nil); end
  def quote_spaced(str); end
  def success(*arg0); end
  def warn(msg, args = nil, _ = nil); end
end
class Gem::Release::Context::Ui::Quiet < Gem::Release::Context::Ui::Base
  def announce(*arg0); end
  def cmd(*arg0); end
  def error(*arg0); end
  def info(*arg0); end
  def notice(*arg0); end
  def success(*arg0); end
  def warn(*arg0); end
end
module Gem::Release::Context::Ui::Colors
  def colored(color, str); end
end
class Gem::Release::Context::Ui::Tty < Gem::Release::Context::Ui::Base
  def announce(msg, args = nil, msgs = nil); end
  def cmd(msg); end
  def colored(color, str); end
  def error(msg, args = nil, msgs = nil); end
  def format_msg(msg, args, msgs); end
  def info(msg, args = nil, msgs = nil); end
  def notice(msg, args = nil, msgs = nil); end
  def success(msg); end
  def warn(msg, args = nil, msgs = nil); end
  def with_spacing(str, space); end
  include Gem::Release::Context::Ui::Colors
end
class Anonymous_Struct_56 < Struct
  def args; end
  def args=(_); end
  def context; end
  def context=(_); end
  def name; end
  def name=(_); end
  def opts; end
  def opts=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class Gem::Release::Cmds::Runner < Anonymous_Struct_56
  def args; end
  def config; end
  def const; end
  def context; end
  def except(hash, *keys); end
  def opts; end
  def run; end
  def run_cmd; end
  def success; end
end
class Gem::Release::Cmds::Tag < Gem::Release::Cmds::Base
  def exists?; end
  def push; end
  def push?; end
  def remote; end
  def run; end
  def tag; end
  def tag_and_push; end
  def tag_name; end
  def target_version; end
  def validate; end
end
class Gem::Release::Config
  def [](key); end
  def common; end
  def for(key); end
  def initialize; end
  def load; end
  def opts; end
  def sources; end
  include Gem::Release::Helper::Hash
end
class Gem::Release::Config::Env
  def cast(value); end
  def keys_for(key); end
  def load; end
  def to_hash(keys, value); end
  def vars; end
  include Gem::Release::Helper::Hash
end
class Gem::Release::Config::Files
  def load; end
  def path; end
  def paths; end
  include Gem::Release::Helper::Hash
end
class Gem::Release::Abort < StandardError
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `kramdown-parser-gfm` gem.
# Please instead update this file by running `bin/tapioca gem kramdown-parser-gfm`.

module Kramdown
  class << self
    # Return the data directory for kramdown.
    def data_dir; end
  end
end

# This module defines all options that are used by parsers and/or converters as well as providing
# methods to deal with the options.
module Kramdown::Options
  class << self
    # Return a Hash with the default values for all options.
    def defaults; end

    # Define a new option called +name+ (a Symbol) with the given +type+ (String, Integer, Float,
    # Symbol, Boolean, Object), default value +default+ and the description +desc+. If a block is
    # specified, it should validate the value and either raise an error or return a valid value.
    #
    # The type 'Object' should only be used for complex types for which none of the other types
    # suffices. A block needs to be specified when using type 'Object' and it has to cope with
    # a value given as string and as the opaque type.
    #
    # @raise [ArgumentError]
    def define(name, type, default, desc, &block); end

    # Return +true+ if an option called +name+ is defined.
    #
    # @return [Boolean]
    def defined?(name); end

    # Return all option definitions.
    def definitions; end

    # Merge the #defaults Hash with the *parsed* options from the given Hash, i.e. only valid option
    # names are considered and their value is run through the #parse method.
    def merge(hash); end

    # Parse the given value +data+ as if it was a value for the option +name+ and return the parsed
    # value with the correct type.
    #
    # If +data+ already has the correct type, it is just returned. Otherwise it is converted to a
    # String and then to the correct type.
    #
    # @raise [ArgumentError]
    def parse(name, data); end

    # Ensures that the option value +val+ for the option called +name+ is a valid array. The
    # parameter +val+ can be
    #
    # - a comma separated string which is split into an array of values
    # - or an array.
    #
    # Optionally, the array is checked for the correct size.
    def simple_array_validator(val, name, size = T.unsafe(nil)); end

    # Ensures that the option value +val+ for the option called +name+ is a valid hash. The
    # parameter +val+ can be
    #
    # - a hash in YAML format
    # - or a Ruby Hash object.
    #
    # @raise [Kramdown::Error]
    def simple_hash_validator(val, name); end

    # Converts the given String +data+ into a Symbol or +nil+ with the
    # following provisions:
    #
    # - A leading colon is stripped from the string.
    # - An empty value or a value equal to "nil" results in +nil+.
    def str_to_sym(data); end
  end
end

# Allowed option types.
Kramdown::Options::ALLOWED_TYPES = T.let(T.unsafe(nil), Array)

# Struct class for storing the definition of an option.
class Kramdown::Options::Definition < ::Struct
  # Returns the value of attribute default
  #
  # @return [Object] the current value of default
  def default; end

  # Sets the attribute default
  #
  # @param value [Object] the value to set the attribute default to.
  # @return [Object] the newly set value
  def default=(_); end

  # Returns the value of attribute desc
  #
  # @return [Object] the current value of desc
  def desc; end

  # Sets the attribute desc
  #
  # @param value [Object] the value to set the attribute desc to.
  # @return [Object] the newly set value
  def desc=(_); end

  # Returns the value of attribute name
  #
  # @return [Object] the current value of name
  def name; end

  # Sets the attribute name
  #
  # @param value [Object] the value to set the attribute name to.
  # @return [Object] the newly set value
  def name=(_); end

  # Returns the value of attribute type
  #
  # @return [Object] the current value of type
  def type; end

  # Sets the attribute type
  #
  # @param value [Object] the value to set the attribute type to.
  # @return [Object] the newly set value
  def type=(_); end

  # Returns the value of attribute validator
  #
  # @return [Object] the current value of validator
  def validator; end

  # Sets the attribute validator
  #
  # @param value [Object] the value to set the attribute validator to.
  # @return [Object] the newly set value
  def validator=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# This module contains all available parsers. A parser takes an input string and converts the
# string to an element tree.
#
# New parsers should be derived from the Base class which provides common functionality - see its
# API documentation for how to create a custom converter class.
module Kramdown::Parser; end

# This class provides a parser implementation for the GFM dialect of Markdown.
class Kramdown::Parser::GFM < ::Kramdown::Parser::Kramdown
  # @return [GFM] a new instance of GFM
  def initialize(source, options); end

  def generate_gfm_header_id(text); end

  # Returns the value of attribute paragraph_end.
  def paragraph_end; end

  def parse; end

  # Copied from kramdown/parser/kramdown/header.rb, removed the first line
  def parse_atx_header_gfm_quirk; end

  # To handle task-lists we override the parse method for lists, converting matching text into
  # checkbox input elements where necessary (as well as applying classes to the ul/ol and li
  # elements).
  def parse_list; end

  def parse_strikethrough_gfm; end
  def update_elements(element); end

  # Update the raw text for automatic ID generation.
  def update_raw_text(item); end

  private

  def update_text_type(element, child); end
end

Kramdown::Parser::GFM::ATX_HEADER_START = T.let(T.unsafe(nil), Regexp)
Kramdown::Parser::GFM::ESCAPED_CHARS_GFM = T.let(T.unsafe(nil), Regexp)
Kramdown::Parser::GFM::FENCED_CODEBLOCK_MATCH = T.let(T.unsafe(nil), Regexp)
Kramdown::Parser::GFM::FENCED_CODEBLOCK_START = T.let(T.unsafe(nil), Regexp)
Kramdown::Parser::GFM::LIST_TYPES = T.let(T.unsafe(nil), Array)
Kramdown::Parser::GFM::NON_WORD_RE = T.let(T.unsafe(nil), Regexp)
Kramdown::Parser::GFM::PARAGRAPH_END_GFM = T.let(T.unsafe(nil), Regexp)
Kramdown::Parser::GFM::STRIKETHROUGH_DELIM = T.let(T.unsafe(nil), Regexp)
Kramdown::Parser::GFM::STRIKETHROUGH_MATCH = T.let(T.unsafe(nil), Regexp)
Kramdown::Parser::GFM::VERSION = T.let(T.unsafe(nil), String)

# The kramdown version.
Kramdown::VERSION = T.let(T.unsafe(nil), String)

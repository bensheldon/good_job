# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/faraday-http-cache/all/faraday-http-cache.rbi
#
# faraday-http-cache-2.2.0

module Faraday
end
class Faraday::HttpCache < Faraday::Middleware
  def call!(env); end
  def call(env); end
  def create_request(env); end
  def create_response(env); end
  def delete(request, response); end
  def extract_status(trace); end
  def fetch(env); end
  def initialize(app, store: nil, serializer: nil, shared_cache: nil, instrumenter: nil, instrument_name: nil, logger: nil); end
  def instrument(env); end
  def log_request; end
  def process(env); end
  def request; end
  def shared_cache?; end
  def should_delete?(status, method); end
  def storage; end
  def store(response); end
  def trace(operation); end
  def validate(entry, env); end
end
class Faraday::HttpCache::Storage
  def assert_valid_store!; end
  def cache; end
  def cache_key_for(url); end
  def delete(url); end
  def deserialize_entry(*objects); end
  def deserialize_object(object); end
  def initialize(store: nil, serializer: nil, logger: nil); end
  def lookup_response(request, entries); end
  def read(request, klass: nil); end
  def response_matches?(request, cached_request, cached_response); end
  def serialize_entry(*objects); end
  def serialize_object(object); end
  def vary_matches?(cached_response, request, cached_request); end
  def warn(message); end
  def write(request, response); end
end
class Faraday::HttpCache::MemoryStore
  def delete(key); end
  def initialize; end
  def read(key); end
  def write(key, value); end
end
class Faraday::HttpCache::Request
  def cache_control; end
  def cacheable?; end
  def headers; end
  def initialize(method:, url:, headers:); end
  def method; end
  def no_cache?; end
  def self.from_env(env); end
  def serializable_hash; end
  def url; end
end
class Faraday::HttpCache::CacheControl
  def initialize(header); end
  def max_age; end
  def must_revalidate?; end
  def no_cache?; end
  def no_store?; end
  def normalize_max_ages(age); end
  def parse(header); end
  def private?; end
  def proxy_revalidate?; end
  def public?; end
  def s_maxage; end
  def shared_max_age; end
  def to_s; end
end
class Faraday::HttpCache::Response
  def age; end
  def cache_control; end
  def cacheable?(shared_cache); end
  def cacheable_in_private_cache?; end
  def cacheable_in_shared_cache?; end
  def cacheable_status_code?; end
  def date; end
  def ensure_date_header!; end
  def etag; end
  def expires; end
  def fresh?; end
  def headers; end
  def initialize(payload = nil); end
  def last_modified; end
  def max_age; end
  def not_modified?; end
  def payload; end
  def prepare_to_cache; end
  def serializable_hash; end
  def to_response(env); end
  def ttl; end
  def validateable?; end
  def wrap_headers!; end
end

# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/database_cleaner-core/all/database_cleaner-core.rbi
#
# database_cleaner-core-2.0.1

module DatabaseCleaner
  def self.[](*args, &block); end
  def self.allow_production; end
  def self.allow_production=(arg0); end
  def self.allow_remote_database_url; end
  def self.allow_remote_database_url=(arg0); end
  def self.clean(*args, &block); end
  def self.clean_with(*args, &block); end
  def self.cleaners; end
  def self.cleaners=(arg0); end
  def self.cleaning(*args, &block); end
  def self.start(*args, &block); end
  def self.strategy=(*args, &block); end
  def self.url_allowlist; end
  def self.url_allowlist=(arg0); end
  def self.url_whitelist; end
  def self.url_whitelist=(arg0); end
end
class DatabaseCleaner::NullStrategy
  def clean; end
  def cleaning(&block); end
  def db=(db); end
  def start; end
end
class DatabaseCleaner::Strategy
  def clean; end
  def cleaning(&block); end
  def db; end
  def db=(arg0); end
  def initialize(options = nil); end
  def start; end
end
class DatabaseCleaner::UnknownStrategySpecified < ArgumentError
end
class DatabaseCleaner::Cleaner
  def <=>(other); end
  def camelize(term); end
  def clean(*args, &block); end
  def clean_with(*args); end
  def cleaning(*args, &block); end
  def create_strategy(*args); end
  def db; end
  def db=(desired_db); end
  def initialize(orm, db: nil); end
  def orm; end
  def orm_module; end
  def orm_strategy(strategy); end
  def self.available_strategies(orm_module); end
  def self.underscore(camel_cased_word); end
  def set_strategy_db(strategy, desired_db); end
  def start(*args, &block); end
  def strategy; end
  def strategy=(args); end
  def strategy_db=(desired_db); end
  extend Forwardable
  include Comparable
end
class DatabaseCleaner::Safeguard
  def run; end
end
class DatabaseCleaner::Safeguard::Error < Exception
end
class DatabaseCleaner::Safeguard::Error::RemoteDatabaseUrl < DatabaseCleaner::Safeguard::Error
  def initialize; end
end
class DatabaseCleaner::Safeguard::Error::ProductionEnv < DatabaseCleaner::Safeguard::Error
  def initialize(env); end
end
class DatabaseCleaner::Safeguard::Error::UrlNotAllowed < DatabaseCleaner::Safeguard::Error
  def initialize; end
end
class DatabaseCleaner::Safeguard::AllowedUrl
  def database_url_not_allowed?; end
  def run; end
  def skip?; end
end
class DatabaseCleaner::Safeguard::RemoteDatabaseUrl
  def given?; end
  def remote?(url); end
  def run; end
  def skip?; end
end
class DatabaseCleaner::Safeguard::Production
  def given?; end
  def key; end
  def run; end
  def skip?; end
end
class DatabaseCleaner::Cleaners < Hash
  def [](orm, **opts); end
  def add_cleaner(orm, **opts); end
  def clean; end
  def clean_with(*args); end
  def cleaning(&inner_block); end
  def initialize(hash = nil); end
  def remove_duplicates; end
  def start; end
  def strategy=(strategy); end
end

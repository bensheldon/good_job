# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: ignore
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/capybara/all/capybara.rbi
#
# capybara-3.35.3

module Capybara
  def self.HTML(html); end
  def self.add_selector(name, **options, &block); end
  def self.allow_gumbo(*args, &block); end
  def self.allow_gumbo=(*args, &block); end
  def self.always_include_port(*args, &block); end
  def self.always_include_port=(*args, &block); end
  def self.app(*args, &block); end
  def self.app=(*args, &block); end
  def self.app_host(*args, &block); end
  def self.app_host=(*args, &block); end
  def self.asset_host(*args, &block); end
  def self.asset_host=(*args, &block); end
  def self.automatic_label_click(*args, &block); end
  def self.automatic_label_click=(*args, &block); end
  def self.automatic_reload(*args, &block); end
  def self.automatic_reload=(*args, &block); end
  def self.config; end
  def self.configure; end
  def self.current_driver; end
  def self.current_driver=(name); end
  def self.current_session; end
  def self.default_driver(*args, &block); end
  def self.default_driver=(*args, &block); end
  def self.default_host(*args, &block); end
  def self.default_host=(*args, &block); end
  def self.default_max_wait_time(*args, &block); end
  def self.default_max_wait_time=(*args, &block); end
  def self.default_normalize_ws(*args, &block); end
  def self.default_normalize_ws=(*args, &block); end
  def self.default_selector(*args, &block); end
  def self.default_selector=(*args, &block); end
  def self.default_set_options(*args, &block); end
  def self.default_set_options=(*args, &block); end
  def self.disable_animation(*args, &block); end
  def self.disable_animation=(*args, &block); end
  def self.drivers; end
  def self.enable_aria_label(*args, &block); end
  def self.enable_aria_label=(*args, &block); end
  def self.enable_aria_role(*args, &block); end
  def self.enable_aria_role=(*args, &block); end
  def self.exact(*args, &block); end
  def self.exact=(*args, &block); end
  def self.exact_text(*args, &block); end
  def self.exact_text=(*args, &block); end
  def self.ignore_hidden_elements(*args, &block); end
  def self.ignore_hidden_elements=(*args, &block); end
  def self.javascript_driver(*args, &block); end
  def self.javascript_driver=(*args, &block); end
  def self.match(*args, &block); end
  def self.match=(*args, &block); end
  def self.mode; end
  def self.modify_selector(name, &block); end
  def self.predicates_wait(*args, &block); end
  def self.predicates_wait=(*args, &block); end
  def self.raise_server_errors(*args, &block); end
  def self.raise_server_errors=(*args, &block); end
  def self.register_driver(name, &block); end
  def self.register_server(name, &block); end
  def self.reset!; end
  def self.reset_sessions!; end
  def self.reuse_server(*args, &block); end
  def self.reuse_server=(*args, &block); end
  def self.run_default_server(app, port); end
  def self.run_server(*args, &block); end
  def self.run_server=(*args, &block); end
  def self.save_path(*args, &block); end
  def self.save_path=(*args, &block); end
  def self.server(*args, &block); end
  def self.server=(*args, &block); end
  def self.server_errors(*args, &block); end
  def self.server_errors=(*args, &block); end
  def self.server_host(*args, &block); end
  def self.server_host=(*args, &block); end
  def self.server_port(*args, &block); end
  def self.server_port=(*args, &block); end
  def self.servers; end
  def self.session_name; end
  def self.session_name=(name); end
  def self.session_options; end
  def self.session_pool; end
  def self.specified_session; end
  def self.specified_session=(session); end
  def self.string(html); end
  def self.test_id(*args, &block); end
  def self.test_id=(*args, &block); end
  def self.threadsafe(*args, &block); end
  def self.threadsafe=(*args, &block); end
  def self.use_default_driver; end
  def self.using_driver(driver); end
  def self.using_session(name_or_session, &block); end
  def self.using_wait_time(seconds); end
  def self.visible_text_only(*args, &block); end
  def self.visible_text_only=(*args, &block); end
  def self.w3c_click_offset(*args, &block); end
  def self.w3c_click_offset=(*args, &block); end
end
class Capybara::SessionConfig
  def always_include_port; end
  def always_include_port=(arg0); end
  def app_host; end
  def app_host=(url); end
  def asset_host; end
  def asset_host=(arg0); end
  def automatic_label_click; end
  def automatic_label_click=(arg0); end
  def automatic_reload; end
  def automatic_reload=(arg0); end
  def default_host; end
  def default_host=(url); end
  def default_max_wait_time; end
  def default_max_wait_time=(arg0); end
  def default_normalize_ws; end
  def default_normalize_ws=(arg0); end
  def default_selector; end
  def default_selector=(arg0); end
  def default_set_options; end
  def default_set_options=(arg0); end
  def disable_animation; end
  def disable_animation=(arg0); end
  def enable_aria_label; end
  def enable_aria_label=(arg0); end
  def enable_aria_role; end
  def enable_aria_role=(arg0); end
  def exact; end
  def exact=(arg0); end
  def exact_text; end
  def exact_text=(arg0); end
  def ignore_hidden_elements; end
  def ignore_hidden_elements=(arg0); end
  def initialize_copy(other); end
  def match; end
  def match=(arg0); end
  def predicates_wait; end
  def predicates_wait=(arg0); end
  def raise_server_errors; end
  def raise_server_errors=(arg0); end
  def run_server; end
  def run_server=(arg0); end
  def save_path; end
  def save_path=(arg0); end
  def server_errors; end
  def server_errors=(errors); end
  def server_host; end
  def server_host=(arg0); end
  def server_port; end
  def server_port=(arg0); end
  def test_id; end
  def test_id=(id); end
  def visible_text_only; end
  def visible_text_only=(arg0); end
  def w3c_click_offset; end
  def w3c_click_offset=(arg0); end
end
class Capybara::ReadOnlySessionConfig < SimpleDelegator
  def always_include_port=(_); end
  def app_host=(_); end
  def asset_host=(_); end
  def automatic_label_click=(_); end
  def automatic_reload=(_); end
  def default_host=(_); end
  def default_max_wait_time=(_); end
  def default_normalize_ws=(_); end
  def default_selector=(_); end
  def default_set_options=(_); end
  def disable_animation=(_); end
  def enable_aria_label=(_); end
  def enable_aria_role=(_); end
  def exact=(_); end
  def exact_text=(_); end
  def ignore_hidden_elements=(_); end
  def match=(_); end
  def predicates_wait=(_); end
  def raise_server_errors=(_); end
  def run_server=(_); end
  def save_path=(_); end
  def server_errors=(_); end
  def server_host=(_); end
  def server_port=(_); end
  def test_id=(_); end
  def visible_text_only=(_); end
  def w3c_click_offset=(_); end
end
class Capybara::Config
  def allow_gumbo; end
  def allow_gumbo=(arg0); end
  def always_include_port(*args, &block); end
  def always_include_port=(*args, &block); end
  def app; end
  def app=(arg0); end
  def app_host(*args, &block); end
  def app_host=(*args, &block); end
  def asset_host(*args, &block); end
  def asset_host=(*args, &block); end
  def automatic_label_click(*args, &block); end
  def automatic_label_click=(*args, &block); end
  def automatic_reload(*args, &block); end
  def automatic_reload=(*args, &block); end
  def default_driver; end
  def default_driver=(arg0); end
  def default_host(*args, &block); end
  def default_host=(*args, &block); end
  def default_max_wait_time(*args, &block); end
  def default_max_wait_time=(*args, &block); end
  def default_normalize_ws(*args, &block); end
  def default_normalize_ws=(*args, &block); end
  def default_selector(*args, &block); end
  def default_selector=(*args, &block); end
  def default_set_options(*args, &block); end
  def default_set_options=(*args, &block); end
  def deprecate(method, alternate_method, once: nil); end
  def disable_animation(*args, &block); end
  def disable_animation=(*args, &block); end
  def enable_aria_label(*args, &block); end
  def enable_aria_label=(*args, &block); end
  def enable_aria_role(*args, &block); end
  def enable_aria_role=(*args, &block); end
  def exact(*args, &block); end
  def exact=(*args, &block); end
  def exact_text(*args, &block); end
  def exact_text=(*args, &block); end
  def ignore_hidden_elements(*args, &block); end
  def ignore_hidden_elements=(*args, &block); end
  def initialize; end
  def javascript_driver; end
  def javascript_driver=(arg0); end
  def match(*args, &block); end
  def match=(*args, &block); end
  def predicates_wait(*args, &block); end
  def predicates_wait=(*args, &block); end
  def raise_server_errors(*args, &block); end
  def raise_server_errors=(*args, &block); end
  def reuse_server; end
  def reuse_server=(arg0); end
  def run_server(*args, &block); end
  def run_server=(*args, &block); end
  def save_path(*args, &block); end
  def save_path=(*args, &block); end
  def server; end
  def server=(name); end
  def server_errors(*args, &block); end
  def server_errors=(*args, &block); end
  def server_host(*args, &block); end
  def server_host=(*args, &block); end
  def server_port(*args, &block); end
  def server_port=(*args, &block); end
  def session_options; end
  def test_id(*args, &block); end
  def test_id=(*args, &block); end
  def threadsafe; end
  def threadsafe=(bool); end
  def visible_text_only(*args, &block); end
  def visible_text_only=(*args, &block); end
  def w3c_click_offset(*args, &block); end
  def w3c_click_offset=(*args, &block); end
  extend Forwardable
end
class Capybara::RegistrationContainer
  def [](name); end
  def []=(name, value); end
  def initialize; end
  def method_missing(method_name, *args, **options, &block); end
  def names; end
  def register(name, block); end
  def respond_to_missing?(method_name, include_all); end
end
module Capybara::Helpers
  def declension(singular, plural, count); end
  def filter_backtrace(trace); end
  def inject_asset_host(html, host: nil); end
  def monotonic_time; end
  def normalize_whitespace(text); end
  def self.declension(singular, plural, count); end
  def self.filter_backtrace(trace); end
  def self.inject_asset_host(html, host: nil); end
  def self.monotonic_time; end
  def self.normalize_whitespace(text); end
  def self.timer(expire_in:); end
  def self.to_regexp(text, exact: nil, all_whitespace: nil, options: nil); end
  def self.warn(message, uplevel: nil); end
  def timer(expire_in:); end
  def to_regexp(text, exact: nil, all_whitespace: nil, options: nil); end
  def warn(message, uplevel: nil); end
end
class Capybara::Helpers::Timer
  def current; end
  def expired?; end
  def initialize(expire_in); end
  def stalled?; end
end
module Capybara::SessionMatchers
  def _verify_current_path(path, filter_block, **options); end
  def assert_current_path(path, **options, &optional_filter_block); end
  def assert_no_current_path(path, **options, &optional_filter_block); end
  def has_current_path?(path, **options, &optional_filter_block); end
  def has_no_current_path?(path, **options, &optional_filter_block); end
  def make_predicate(options); end
end
class Capybara::Session
  def _find_frame(*args, **kw_args); end
  def _switch_to_window(window = nil, **options, &window_locator); end
  def _switch_to_window_by_locator; end
  def accept_alert(text = nil, **options, &blk); end
  def accept_confirm(text = nil, **options, &blk); end
  def accept_modal(type, text_or_options, options, &blk); end
  def accept_prompt(text = nil, **options, &blk); end
  def adjust_server_port(uri); end
  def all(**, &&); end
  def app; end
  def assert_all_of_selectors(**, &&); end
  def assert_any_of_selectors(**, &&); end
  def assert_no_selector(**, &&); end
  def assert_no_text(**, &&); end
  def assert_no_title(**, &&); end
  def assert_none_of_selectors(**, &&); end
  def assert_selector(**, &&); end
  def assert_text(**, &&); end
  def assert_title(**, &&); end
  def attach_file(**, &&); end
  def body; end
  def check(**, &&); end
  def choose(**, &&); end
  def cleanup!; end
  def click_button(**, &&); end
  def click_link(**, &&); end
  def click_link_or_button(**, &&); end
  def click_on(**, &&); end
  def config; end
  def configure; end
  def current_host; end
  def current_path; end
  def current_scope; end
  def current_url; end
  def current_window; end
  def default_fn(extension); end
  def dismiss_confirm(text = nil, **options, &blk); end
  def dismiss_modal(type, text_or_options, options, &blk); end
  def dismiss_prompt(text = nil, **options, &blk); end
  def document; end
  def driver; end
  def driver_args(args); end
  def element_script_result(arg); end
  def evaluate_async_script(script, *args); end
  def evaluate_script(script, *args); end
  def execute_script(script, *args); end
  def fill_in(**, &&); end
  def find(**, &&); end
  def find_all(**, &&); end
  def find_button(**, &&); end
  def find_by_id(**, &&); end
  def find_field(**, &&); end
  def find_link(**, &&); end
  def first(**, &&); end
  def go_back; end
  def go_forward; end
  def has_button?(**, &&); end
  def has_checked_field?(**, &&); end
  def has_content?(**, &&); end
  def has_css?(**, &&); end
  def has_field?(**, &&); end
  def has_link?(**, &&); end
  def has_no_button?(**, &&); end
  def has_no_checked_field?(**, &&); end
  def has_no_content?(**, &&); end
  def has_no_css?(**, &&); end
  def has_no_field?(**, &&); end
  def has_no_link?(**, &&); end
  def has_no_select?(**, &&); end
  def has_no_selector?(**, &&); end
  def has_no_table?(**, &&); end
  def has_no_text?(**, &&); end
  def has_no_title?(**, &&); end
  def has_no_unchecked_field?(**, &&); end
  def has_no_xpath?(**, &&); end
  def has_select?(**, &&); end
  def has_selector?(**, &&); end
  def has_table?(**, &&); end
  def has_text?(**, &&); end
  def has_title?(**, &&); end
  def has_unchecked_field?(**, &&); end
  def has_xpath?(**, &&); end
  def html; end
  def initialize(mode, app = nil); end
  def inspect; end
  def modal_options(text = nil, **options); end
  def mode; end
  def open_file(path); end
  def open_new_window(kind = nil); end
  def prepare_path(path, extension); end
  def query(**, &&); end
  def quit; end
  def raise_server_error!; end
  def refresh; end
  def refute_selector(**, &&); end
  def reset!; end
  def reset_session!; end
  def response_headers; end
  def save_and_open_page(path = nil); end
  def save_and_open_screenshot(path = nil, **options); end
  def save_page(path = nil); end
  def save_screenshot(path = nil, **options); end
  def scopes; end
  def scroll_by(**, &&); end
  def scroll_to(**, &&); end
  def select(**, &&); end
  def self.instance_created?; end
  def send_keys(*args, **kw_args); end
  def server; end
  def server_url; end
  def source; end
  def status_code; end
  def switch_to_frame(frame); end
  def switch_to_window(window = nil, **options, &window_locator); end
  def synchronize_windows(options, &block); end
  def synchronized; end
  def synchronized=(arg0); end
  def text(**, &&); end
  def title(**, &&); end
  def uncheck(**, &&); end
  def unselect(**, &&); end
  def using_wait_time(seconds, &block); end
  def visit(visit_uri); end
  def window_opened_by(**options); end
  def windows; end
  def within(*args, **kw_args); end
  def within_element(*args, **kw_args); end
  def within_fieldset(locator, &block); end
  def within_frame(*args, **kw_args); end
  def within_table(locator, &block); end
  def within_window(window_or_proc); end
  include Capybara::SessionMatchers
end
class Capybara::Window
  def ==(other); end
  def close; end
  def closed?; end
  def current?; end
  def eql?(other); end
  def exists?; end
  def fullscreen; end
  def handle; end
  def hash; end
  def initialize(session, handle); end
  def inspect; end
  def maximize; end
  def resize_to(width, height); end
  def session; end
  def size; end
  def wait_for_stable_size(seconds = nil); end
end
class Capybara::Server
  def app; end
  def base_url; end
  def boot; end
  def error; end
  def find_available_port(host); end
  def host; end
  def initialize(app, *deprecated_options, port: nil, host: nil, reportable_errors: nil, extra_middleware: nil); end
  def middleware; end
  def pending_requests?; end
  def port; end
  def port_key; end
  def reset_error!; end
  def responsive?; end
  def self.ports; end
  def using_ssl?; end
  def wait_for_pending_requests; end
end
class Capybara::Server::Middleware
  def call(env); end
  def clear_error; end
  def error; end
  def initialize(app, server_errors, extra_middleware = nil); end
  def pending_requests; end
  def pending_requests?; end
end
class Capybara::Server::Middleware::Counter
  def decrement(uri); end
  def increment(uri); end
  def initialize; end
  def positive?; end
  def value; end
end
class Capybara::Server::AnimationDisabler
  def call(env); end
  def disable_markup; end
  def html_content?; end
  def initialize(app); end
  def insert_disable(html); end
  def self.selector_for(css_or_bool); end
end
class Capybara::Server::Checker
  def http_request(&block); end
  def https_request(&block); end
  def initialize(host, port); end
  def make_request(**options, &block); end
  def request(&block); end
  def ssl?; end
  def ssl_options; end
end
module XPath
end
class XPath::Renderer
  def join(*expressions); end
end
module XPath::DSL
  def join(*expressions); end
end
class Capybara::Selector < SimpleDelegator
  def add_error(error_msg); end
  def builder(expr = nil); end
  def call(locator, **options); end
  def current_format; end
  def enable_aria_label; end
  def enable_aria_role; end
  def errors; end
  def expression_for(name, locator, config: nil, format: nil, **options); end
  def find_by_attr(attribute, value); end
  def find_by_class_attr(classes); end
  def format; end
  def initialize(definition, config:, format:); end
  def locate_field(xpath, locator, **_options); end
  def locate_label(locator); end
  def locator_description; end
  def locator_valid?(locator); end
  def self.[](name); end
  def self.add(name, **options, &block); end
  def self.all; end
  def self.for(locator); end
  def self.remove(name); end
  def self.update(name, &block); end
  def test_id; end
  def with_filter_errors(errors); end
end
module Capybara::Selector::Filters
end
class Capybara::Selector::Filters::Base
  def apply(subject, name, value, skip_value, ctx); end
  def boolean?; end
  def default; end
  def default?; end
  def filter_context(context); end
  def format; end
  def handles_option?(option_name); end
  def initialize(name, matcher, block, **options); end
  def matcher?; end
  def skip?(value); end
  def valid_value?(value); end
end
class Capybara::Selector::Filters::NodeFilter < Capybara::Selector::Filters::Base
  def initialize(name, matcher, block, **options); end
  def matches?(node, name, value, context = nil); end
end
class Capybara::Selector::Filters::ExpressionFilter < Capybara::Selector::Filters::Base
  def apply_filter(expr, name, value, selector); end
end
class Capybara::Selector::Filters::IdentityExpressionFilter < Capybara::Selector::Filters::ExpressionFilter
  def apply_filter(expr, _name, _value, _ctx); end
  def default?; end
  def initialize(name); end
  def matcher?; end
end
class Capybara::Selector::Filters::LocatorFilter < Capybara::Selector::Filters::NodeFilter
  def apply(subject, value, skip_value, ctx, **options); end
  def initialize(block, **options); end
  def matches?(node, value, context = nil, exact:); end
end
class Capybara::Selector::FilterSet
  def add_filter(name, filter_class, *types, matcher: nil, **options, &block); end
  def describe(what = nil, &block); end
  def description(node_filters: nil, expression_filters: nil, **options); end
  def descriptions; end
  def expression_filter(name, *types, **options, &block); end
  def expression_filter_descriptions; end
  def expression_filters; end
  def filter(names, *types, **options, &block); end
  def import(name, filters = nil); end
  def initialize(name, &block); end
  def node_filter(names, *types, **options, &block); end
  def node_filter_descriptions; end
  def node_filters; end
  def options_with_defaults(options); end
  def self.[](name); end
  def self.add(name, &block); end
  def self.all; end
  def self.remove(name); end
  def undeclared_descriptions; end
end
class Capybara::Selector::CSS
  def self.escape(str); end
  def self.escape_char(char); end
  def self.split(css); end
end
class Capybara::Selector::CSS::Splitter
  def parse_block(start, final, strio); end
  def parse_paren(strio); end
  def parse_square(strio); end
  def parse_string(quote, strio); end
  def split(css); end
end
class Capybara::Selector::RegexpDisassembler
  def alternated_substrings; end
  def collapse(strs); end
  def combine(strs); end
  def extract_strings(expression, alternation: nil); end
  def initialize(regexp); end
  def process(alternation:); end
  def remove_and_covered(strings); end
  def remove_or_covered(or_series); end
  def substrings; end
end
class Capybara::Selector::RegexpDisassembler::Expression
  def alternation?; end
  def alternative_strings; end
  def alternatives; end
  def each; end
  def extract_strings(process_alternatives); end
  def fixed_repeat?; end
  def ignore?; end
  def indeterminate?; end
  def initialize(exp); end
  def max_repeat; end
  def min_repeat; end
  def optional?; end
  def optional_strings; end
  def options_set(strs); end
  def repeat_set(str); end
  def repeated_strings(process_alternatives); end
  def strings(process_alternatives); end
  def terminal?; end
  def terminal_strings; end
  def type; end
end
class Capybara::Selector::XPathBuilder
  def add_attribute_conditions(**conditions); end
  def attribute_conditions(attributes); end
  def class_conditions(classes); end
  def expression; end
  def initialize(expression); end
  def regexp_to_xpath_conditions(regexp); end
end
class Capybara::Selector::CSSBuilder
  def add_attribute_conditions(**attributes); end
  def attribute_conditions(attributes); end
  def class_conditions(classes); end
  def expression; end
  def initialize(expression); end
  def regexp_conditions(name, value); end
end
class Capybara::Selector::Definition
  def css(*allowed_filters, &block); end
  def custom_filters; end
  def default_format; end
  def default_visibility(fallback = nil, options = nil); end
  def describe(*args, &block); end
  def describe_all_expression_filters(**opts); end
  def describe_expression_filters(&block); end
  def describe_node_filters(&block); end
  def description(*args, &block); end
  def expression(type, allowed_filters, &block); end
  def expression_filter(*args, &block); end
  def expression_filters; end
  def expressions; end
  def filter(*args, &block); end
  def filter_set(name, filters_to_use = nil); end
  def handled_custom_options(filter, options); end
  def initialize(name, locator_type: nil, raw_locator: nil, supports_exact: nil, &block); end
  def label(label = nil); end
  def locator_filter(*types, **options, &block); end
  def locator_types; end
  def match(&block); end
  def match?(locator); end
  def name; end
  def node_filter(*args, &block); end
  def node_filters; end
  def parameter_names(block); end
  def raw_locator?; end
  def supports_exact?; end
  def visible(default_visibility = nil, &block); end
  def xpath(*allowed_filters, &block); end
  extend Forwardable
end
class Capybara::Result
  def [](*args); end
  def add_to_cache(elem); end
  def allow_reload!; end
  def at(*args); end
  def compare_count; end
  def each(&block); end
  def empty?; end
  def failure_message; end
  def full_results; end
  def index(*arg0); end
  def initialize(elements, query); end
  def inspect(*args, &block); end
  def last(*args, &block); end
  def lazy_select_elements(&block); end
  def length(*args, &block); end
  def load_up_to(num); end
  def matches_count?; end
  def negative_failure_message; end
  def rest; end
  def sample(*args, &block); end
  def size(*args, &block); end
  def unfiltered_size; end
  def values_at(*args, &block); end
  extend Forwardable
  include Enumerable
end
module Capybara::Queries
end
class Capybara::Queries::BaseQuery
  def assert_valid_keys; end
  def count_message; end
  def count_specified?; end
  def expects_none?; end
  def failure_message; end
  def initialize(options); end
  def matches_count?(count); end
  def negative_failure_message; end
  def occurrences(count); end
  def options; end
  def self.wait(options, default = nil); end
  def session_options; end
  def session_options=(arg0); end
  def wait; end
end
class Capybara::Queries::SelectorQuery < Capybara::Queries::BaseQuery
  def applied_description; end
  def applied_filters; end
  def apply_expression_filters(expression); end
  def apply_filter?(filter); end
  def assert_valid_keys; end
  def builder(expr); end
  def css; end
  def custom_keys; end
  def default_visibility; end
  def describe_within?; end
  def description(only_applied = nil); end
  def document?(node); end
  def exact?; end
  def exact_text; end
  def expression; end
  def expression_filters; end
  def failure_message; end
  def filter_set(name); end
  def filtered_expression(expr); end
  def find_nodes_by_selector_format(node, exact); end
  def find_selector(locator); end
  def first_try?; end
  def initialize(*args, session_options:, enable_aria_label: nil, enable_aria_role: nil, test_id: nil, selector_format: nil, order: nil, **options, &filter_block); end
  def label; end
  def locator; end
  def match; end
  def matches_class_filter?(node); end
  def matches_exact_text_filter?(node); end
  def matches_filter_block?(node); end
  def matches_filters?(node, node_filter_errors = nil); end
  def matches_id_filter?(node); end
  def matches_locator_filter?(node); end
  def matches_node_filters?(node, errors); end
  def matches_spatial_filters?(node); end
  def matches_style?(node, styles); end
  def matches_style_filter?(node); end
  def matches_system_filters?(node); end
  def matches_text_exactly?(node, value); end
  def matches_text_filter?(node); end
  def matches_text_regexp?(node, regexp); end
  def matches_visibility_filters?(node); end
  def matching_text; end
  def name; end
  def need_to_process_classes?; end
  def negative_failure_message; end
  def node_filters; end
  def normalize_ws; end
  def options; end
  def ordered_results(results); end
  def position_cache(key); end
  def rect_cache(key); end
  def resolve_for(node, exact = nil); end
  def selector; end
  def selector_format; end
  def show_for_stage(only_applied); end
  def simple_root?(node); end
  def supports_exact?; end
  def text_fragments; end
  def to_element(node); end
  def try_text_match_in_expression?; end
  def use_default_class_filter?; end
  def use_default_id_filter?; end
  def use_default_style_filter?; end
  def use_spatial_filter?; end
  def valid_keys; end
  def visible; end
  def warn_exact_usage; end
  def xpath(exact = nil); end
  def xpath_text_conditions; end
end
class Capybara::Queries::SelectorQuery::Rectangle
  def above?(other); end
  def below?(other); end
  def bottom; end
  def distance(other); end
  def distance_segment_segment(l1p1, l1p2, l2p1, l2p2); end
  def initialize(position); end
  def left; end
  def left_of?(other); end
  def line_segments; end
  def near?(other); end
  def right; end
  def right_of?(other); end
  def top; end
end
class Capybara::Queries::TextQuery < Capybara::Queries::BaseQuery
  def build_message(report_on_invisible); end
  def case_insensitive_message; end
  def check_case_insensitive?; end
  def check_visible_text?; end
  def default_type; end
  def description; end
  def exact?; end
  def failure_message; end
  def initialize(type = nil, expected_text, session_options:, **options); end
  def invisible_message; end
  def negative_failure_message; end
  def resolve_for(node); end
  def text(node: nil, query_type: nil); end
  def valid_keys; end
  def valid_types; end
end
class Capybara::Queries::TitleQuery < Capybara::Queries::BaseQuery
  def failure_message; end
  def failure_message_helper(negated = nil); end
  def initialize(expected_title, **options); end
  def negative_failure_message; end
  def resolves_for?(node); end
  def valid_keys; end
end
class Capybara::Queries::CurrentPathQuery < Capybara::Queries::BaseQuery
  def failure_message; end
  def failure_message_helper(negated = nil); end
  def initialize(expected_path, **options, &optional_filter_block); end
  def matches_filter_block?(url); end
  def negative_failure_message; end
  def resolves_for?(session); end
  def valid_keys; end
end
class Capybara::Queries::MatchQuery < Capybara::Queries::SelectorQuery
  def assert_valid_keys; end
  def valid_keys; end
  def visible; end
end
class Capybara::Queries::AncestorQuery < Capybara::Queries::SelectorQuery
  def description(applied = nil); end
  def resolve_for(node, exact = nil); end
end
class Capybara::Queries::SiblingQuery < Capybara::Queries::SelectorQuery
  def description(applied = nil); end
  def resolve_for(node, exact = nil); end
end
class Capybara::Queries::StyleQuery < Capybara::Queries::BaseQuery
  def failure_message; end
  def initialize(expected_styles, session_options:, **options); end
  def resolves_for?(node); end
  def stringify_keys(hsh); end
  def valid_keys; end
end
module Capybara::Node
end
module Capybara::Node::Finders
  def all(*args, allow_reload: nil, **options, &optional_filter_block); end
  def ambiguous?(query, result); end
  def ancestor(*args, **options, &optional_filter_block); end
  def find(*args, **options, &optional_filter_block); end
  def find_all(*args, allow_reload: nil, **options, &optional_filter_block); end
  def find_button(locator = nil, **options, &optional_filter_block); end
  def find_by_id(id, **options, &optional_filter_block); end
  def find_field(locator = nil, **options, &optional_filter_block); end
  def find_link(locator = nil, **options, &optional_filter_block); end
  def first(*args, **options, &optional_filter_block); end
  def options_include_minimum?(opts); end
  def parent; end
  def prefer_exact?(query); end
  def sibling(*args, **options, &optional_filter_block); end
  def synced_resolve(query); end
end
module Capybara::Node::Matchers
  def ==(other); end
  def _set_query_session_options(*query_args); end
  def _verify_match_result(query_args, optional_filter_block); end
  def _verify_multiple(*args, wait: nil, **options); end
  def _verify_selector_result(query_args, optional_filter_block, query_type = nil); end
  def _verify_text(type = nil, expected_text, **query_options); end
  def assert_all_of_selectors(*args, **options, &optional_filter_block); end
  def assert_ancestor(*args, &optional_filter_block); end
  def assert_any_of_selectors(*args, wait: nil, **options, &optional_filter_block); end
  def assert_matches_selector(*args, &optional_filter_block); end
  def assert_matches_style(styles = nil, **options); end
  def assert_no_ancestor(*args, &optional_filter_block); end
  def assert_no_selector(*args, &optional_filter_block); end
  def assert_no_sibling(*args, &optional_filter_block); end
  def assert_no_text(type_or_text, *args, **opts); end
  def assert_none_of_selectors(*args, **options, &optional_filter_block); end
  def assert_not_matches_selector(*args, &optional_filter_block); end
  def assert_selector(*args, &optional_filter_block); end
  def assert_sibling(*args, &optional_filter_block); end
  def assert_style(styles = nil, **options); end
  def assert_text(type_or_text, *args, **opts); end
  def extract_selector(args); end
  def has_ancestor?(*args, **options, &optional_filter_block); end
  def has_button?(locator = nil, **options, &optional_filter_block); end
  def has_checked_field?(locator = nil, **options, &optional_filter_block); end
  def has_content?(*args, **options); end
  def has_css?(path, **options, &optional_filter_block); end
  def has_field?(locator = nil, **options, &optional_filter_block); end
  def has_link?(locator = nil, **options, &optional_filter_block); end
  def has_no_ancestor?(*args, **options, &optional_filter_block); end
  def has_no_button?(locator = nil, **options, &optional_filter_block); end
  def has_no_checked_field?(locator = nil, **options, &optional_filter_block); end
  def has_no_content?(*args, **options); end
  def has_no_css?(path, **options, &optional_filter_block); end
  def has_no_field?(locator = nil, **options, &optional_filter_block); end
  def has_no_link?(locator = nil, **options, &optional_filter_block); end
  def has_no_select?(locator = nil, **options, &optional_filter_block); end
  def has_no_selector?(*args, **options, &optional_filter_block); end
  def has_no_sibling?(*args, **options, &optional_filter_block); end
  def has_no_table?(locator = nil, **options, &optional_filter_block); end
  def has_no_text?(*args, **options); end
  def has_no_unchecked_field?(locator = nil, **options, &optional_filter_block); end
  def has_no_xpath?(path, **options, &optional_filter_block); end
  def has_select?(locator = nil, **options, &optional_filter_block); end
  def has_selector?(*args, **options, &optional_filter_block); end
  def has_sibling?(*args, **options, &optional_filter_block); end
  def has_style?(styles = nil, **options); end
  def has_table?(locator = nil, **options, &optional_filter_block); end
  def has_text?(*args, **options); end
  def has_unchecked_field?(locator = nil, **options, &optional_filter_block); end
  def has_xpath?(path, **options, &optional_filter_block); end
  def make_predicate(options); end
  def matches_css?(css, **options, &optional_filter_block); end
  def matches_selector?(*args, **options, &optional_filter_block); end
  def matches_style?(styles = nil, **options); end
  def matches_xpath?(xpath, **options, &optional_filter_block); end
  def not_matches_css?(css, **options, &optional_filter_block); end
  def not_matches_selector?(*args, **options, &optional_filter_block); end
  def not_matches_xpath?(xpath, **options, &optional_filter_block); end
end
module Capybara::Node::Actions
  def _check_with_label(selector, checked, locator, allow_label_click: nil, **options); end
  def _reset_style(element); end
  def _update_style(element, style); end
  def attach_file(locator = nil, paths, make_visible: nil, **options); end
  def check(locator = nil, **options); end
  def choose(locator = nil, **options); end
  def click_button(locator = nil, **options); end
  def click_link(locator = nil, **options); end
  def click_link_or_button(locator = nil, **options); end
  def click_on(locator = nil, **options); end
  def fill_in(locator = nil, with:, currently_with: nil, fill_options: nil, **find_options); end
  def find_select_or_datalist_input(from, options); end
  def select(value = nil, from: nil, **options); end
  def select_datalist_option(input, value); end
  def uncheck(locator = nil, **options); end
  def unselect(value = nil, from: nil, **options); end
  def while_visible(element, visible_css); end
end
module Capybara::Node::DocumentMatchers
  def _verify_title(title, options); end
  def assert_no_title(title, **options); end
  def assert_title(title, **options); end
  def has_no_title?(title, **options); end
  def has_title?(title, **options); end
end
class Capybara::Node::Simple
  def [](name); end
  def allow_reload!(*arg0); end
  def checked?; end
  def disabled?; end
  def find_css(css, **_options); end
  def find_xpath(xpath, **_options); end
  def initial_cache; end
  def initialize(native); end
  def inspect; end
  def multiple?; end
  def native; end
  def option_value(option); end
  def path; end
  def readonly?; end
  def selected?; end
  def session_options; end
  def synchronize(_seconds = nil); end
  def tag_name; end
  def text(_type = nil, normalize_ws: nil); end
  def title; end
  def value; end
  def visible?(check_ancestors = nil); end
  include Capybara::Node::DocumentMatchers
  include Capybara::Node::Finders
  include Capybara::Node::Matchers
end
class Capybara::Node::Base
  def base; end
  def catch_error?(error, errors = nil); end
  def driver; end
  def find_css(css, **options); end
  def find_xpath(xpath, **options); end
  def initialize(session, base); end
  def query_scope; end
  def reload; end
  def session; end
  def session_options; end
  def synchronize(seconds = nil, errors: nil); end
  def to_capybara_node; end
  include Capybara::Node::Actions
  include Capybara::Node::Finders
  include Capybara::Node::Matchers
end
class Capybara::Node::Element < Capybara::Node::Base
  def [](attribute); end
  def allow_reload!(idx = nil); end
  def checked?; end
  def click(*keys, **options); end
  def disabled?; end
  def double_click(*keys, **options); end
  def drag_to(node, **options); end
  def drop(*args); end
  def evaluate_async_script(script, *args); end
  def evaluate_script(script, *args); end
  def execute_script(script, *args); end
  def flash; end
  def hover; end
  def initial_cache; end
  def initialize(session, base, query_scope, query); end
  def inspect; end
  def multiple?; end
  def native; end
  def obscured?; end
  def path; end
  def perform_click_action(keys, wait: nil, **options); end
  def readonly?; end
  def rect; end
  def reload; end
  def right_click(*keys, **options); end
  def scroll_to(pos_or_el_or_x, y = nil, align: nil, offset: nil); end
  def select_option(wait: nil); end
  def selected?; end
  def send_keys(*args); end
  def set(value, **options); end
  def style(*styles); end
  def tag_name; end
  def text(type = nil, normalize_ws: nil); end
  def trigger(event); end
  def unselect_option(wait: nil); end
  def value; end
  def visible?; end
end
class Capybara::Node::Document < Capybara::Node::Base
  def evaluate_script(*args); end
  def execute_script(*args); end
  def inspect; end
  def scroll_to(*args, **options); end
  def text(type = nil, normalize_ws: nil); end
  def title; end
  include Capybara::Node::DocumentMatchers
end
class Capybara::Driver::Base
  def accept_modal(type, **options, &blk); end
  def close_window(handle); end
  def current_url; end
  def current_window_handle; end
  def dismiss_modal(type, **options, &blk); end
  def evaluate_async_script(script, *args); end
  def evaluate_script(script, *args); end
  def execute_script(script, *args); end
  def find_css(query, **options); end
  def find_xpath(query, **options); end
  def frame_title; end
  def frame_url; end
  def fullscreen_window(handle); end
  def go_back; end
  def go_forward; end
  def html; end
  def invalid_element_errors; end
  def maximize_window(handle); end
  def needs_server?; end
  def no_such_window_error; end
  def open_new_window; end
  def refresh; end
  def reset!; end
  def resize_window_to(handle, width, height); end
  def response_headers; end
  def save_screenshot(path, **options); end
  def send_keys(*arg0); end
  def session; end
  def session=(arg0); end
  def session_options; end
  def status_code; end
  def switch_to_frame(frame); end
  def switch_to_window(handle); end
  def visit(path); end
  def wait?; end
  def window_handles; end
  def window_size(handle); end
end
module Capybara::Driver
end
class Capybara::Driver::Node
  def ==(other); end
  def [](name); end
  def all_text; end
  def checked?; end
  def click(keys = nil, **options); end
  def disabled?; end
  def double_click(keys = nil, **options); end
  def drag_to(element, **options); end
  def driver; end
  def drop(*args); end
  def hover; end
  def initial_cache; end
  def initialize(driver, native, initial_cache = nil); end
  def inspect; end
  def multiple?; end
  def native; end
  def obscured?; end
  def path; end
  def readonly?; end
  def rect; end
  def right_click(keys = nil, **options); end
  def scroll_by(x, y); end
  def scroll_to(element, alignment, position = nil); end
  def select_option; end
  def selected?; end
  def send_keys(*args); end
  def set(value, **options); end
  def style(styles); end
  def tag_name; end
  def trigger(event); end
  def unselect_option; end
  def value; end
  def visible?; end
  def visible_text; end
end
class Capybara::RackTest::Driver < Capybara::Driver::Base
  def app; end
  def browser; end
  def current_url; end
  def delete(*args, &block); end
  def dom; end
  def find_css(selector); end
  def find_xpath(selector); end
  def follow(method, path, **attributes); end
  def follow_redirects?; end
  def get(*args, &block); end
  def header(key, value); end
  def html; end
  def initialize(app, **options); end
  def invalid_element_errors; end
  def options; end
  def post(*args, &block); end
  def put(*args, &block); end
  def redirect_limit; end
  def refresh; end
  def request; end
  def reset!; end
  def response; end
  def response_headers; end
  def status_code; end
  def submit(method, path, attributes); end
  def title; end
  def visit(path, **attributes); end
end
module Capybara::RackTest::Errors
end
class Capybara::RackTest::Errors::StaleElementReferenceError < StandardError
end
class Capybara::RackTest::Node < Capybara::Driver::Node
  def ==(other); end
  def [](**, &&); end
  def all_text(**, &&); end
  def attribute_is_not_blank?(attribute); end
  def checkable?; end
  def checkbox?; end
  def checkbox_or_radio?(field = nil); end
  def checked?(**, &&); end
  def click(**, &&); end
  def click_label; end
  def deselect_options; end
  def disabled?(**, &&); end
  def displayed_text(check_ancestor: nil); end
  def find_css(**, &&); end
  def find_xpath(**, &&); end
  def follow_link; end
  def form; end
  def input_field?; end
  def link?; end
  def path(**, &&); end
  def radio?; end
  def range?; end
  def select_node; end
  def select_option(**, &&); end
  def selected?(**, &&); end
  def set(**, &&); end
  def set_checkbox(value); end
  def set_input(value); end
  def set_radio(_value); end
  def set_range(value); end
  def stale_check; end
  def string_node; end
  def style(**, &&); end
  def submits?; end
  def tag_name(**, &&); end
  def text_or_password?; end
  def textarea?; end
  def toggle_details(details = nil); end
  def type; end
  def unchecked_all_text; end
  def unchecked_checked?; end
  def unchecked_click(keys = nil, **options); end
  def unchecked_disabled?; end
  def unchecked_find_css(locator, **_hints); end
  def unchecked_find_xpath(locator, **_hints); end
  def unchecked_path; end
  def unchecked_select_option; end
  def unchecked_selected?; end
  def unchecked_set(value, **options); end
  def unchecked_style(_styles); end
  def unchecked_tag_name; end
  def unchecked_unselect_option; end
  def unchecked_value; end
  def unchecked_visible?; end
  def unchecked_visible_text; end
  def unselect_option(**, &&); end
  def value(**, &&); end
  def visible?(**, &&); end
  def visible_text(**, &&); end
end
class Capybara::RackTest::Form < Capybara::RackTest::Node
  def add_input_param(field, params); end
  def add_select_param(field, params); end
  def add_textarea_param(field, params); end
  def file_to_upload(filename); end
  def make_params; end
  def merge_param!(params, key, value); end
  def multipart?; end
  def params(button); end
  def request_method; end
  def submit(button); end
  def submitter?(el); end
end
class Capybara::RackTest::Form::NilUploadedFile < Rack::Test::UploadedFile
  def content_type; end
  def initialize; end
  def original_filename; end
  def path; end
  def read; end
  def size; end
end
class Capybara::RackTest::Form::ParamsHash < Hash
  def to_params_hash; end
end
class Capybara::RackTest::Browser
  def app; end
  def build_rack_mock_session; end
  def build_uri(path); end
  def current_host; end
  def current_host=(arg0); end
  def current_url; end
  def dom; end
  def driver; end
  def find(format, selector); end
  def follow(method, path, **attributes); end
  def fragment_or_script?(path); end
  def html; end
  def initialize(driver); end
  def options; end
  def process(method, path, attributes = nil, env = nil); end
  def process_and_follow_redirects(method, path, attributes = nil, env = nil); end
  def refresh; end
  def request_path; end
  def reset_cache!; end
  def reset_host!; end
  def submit(method, path, attributes); end
  def title; end
  def visit(path, **attributes); end
  include Rack::Test::Methods
end
class Capybara::RackTest::CSSHandlers < BasicObject
  def disabled(list); end
  def enabled(list); end
  include Kernel
end
module Capybara::Selenium
end
module Capybara::Selenium::Find
  def build_hints_js(uses_visibility, styles, position); end
  def es_context; end
  def filter_by_text(elements, texts); end
  def find_by(format, selector, uses_visibility:, texts:, styles:, position:); end
  def find_css(selector, uses_visibility: nil, texts: nil, styles: nil, position: nil, **_options); end
  def find_xpath(selector, uses_visibility: nil, styles: nil, position: nil, **_options); end
  def gather_hints(elements, uses_visibility:, styles:, position:); end
  def is_displayed_atom; end
end
module Capybara::Selenium::Scroll
  def scroll_by(x, y); end
  def scroll_element_to_location(element, location); end
  def scroll_to(element, location, position = nil); end
  def scroll_to_coords(x, y); end
  def scroll_to_location(location); end
end
class Capybara::Selenium::Node < Capybara::Driver::Node
  def ==(other); end
  def [](name); end
  def action_with_modifiers(click_options); end
  def all_text; end
  def attrs(*attr_names); end
  def auto_rapid_set_length; end
  def boolean_attr(val); end
  def bridge; end
  def browser; end
  def browser_action; end
  def build_node(native_node, initial_cache = nil); end
  def capabilities; end
  def checked?; end
  def click(keys = nil, **options); end
  def content_editable?; end
  def disabled?; end
  def double_click(keys = nil, **options); end
  def drag_to(element, drop_modifiers: nil, **arg2); end
  def drop(*_); end
  def each_key(keys, &block); end
  def find_context; end
  def hover; end
  def modifiers_down(actions, keys); end
  def modifiers_up(actions, keys); end
  def multiple?; end
  def normalize_keys(keys); end
  def obscured?(x: nil, y: nil); end
  def path; end
  def perform_with_options(click_options, &block); end
  def readonly?; end
  def rect; end
  def right_click(keys = nil, **options); end
  def scroll_if_needed; end
  def scroll_to_center; end
  def select_node; end
  def select_option; end
  def selected?; end
  def send_keys(*args); end
  def set(value, **options); end
  def set_color(value); end
  def set_content_editable(value); end
  def set_date(value); end
  def set_datetime_local(value); end
  def set_file(value); end
  def set_range(value); end
  def set_text(value, clear: nil, rapid: nil, **_unused); end
  def set_time(value); end
  def sibling_index(parent, node, selector); end
  def style(styles); end
  def tag_name; end
  def unselect_option; end
  def update_value_js(value); end
  def value; end
  def visible?; end
  def visible_text; end
  def w3c?; end
  def with_file_detector; end
  include Capybara::Selenium::Find
  include Capybara::Selenium::Scroll
end
class Capybara::Selenium::Node::SettableValue
  def dateable?; end
  def initialize(value); end
  def timeable?; end
  def to_date_str; end
  def to_datetime_str; end
  def to_s; end
  def to_time_str; end
  def value; end
end
class Capybara::Selenium::Node::ClickOptions
  def center_offset?; end
  def coords; end
  def coords?; end
  def delay; end
  def empty?; end
  def initialize(keys, options); end
  def keys; end
  def options; end
end
module Capybara::Selenium::Node::Html5Drag
  def drag_to(element, html5: nil, delay: nil, drop_modifiers: nil); end
  def html5_drop(*args); end
  def perform_html5_drag(element, delay, drop_modifiers); end
  def perform_legacy_drag(element, drop_modifiers); end
end
module Capybara::Selenium::Node::FileInputClickEmulation
  def attaching_file?; end
  def click(keys = nil, **options); end
  def emulate_click; end
  def visible_file_field?; end
end
class Capybara::Selenium::ChromeNode < Capybara::Selenium::Node
  def browser_version(to_float: nil); end
  def chromedriver_fixed_actions_key_state?; end
  def chromedriver_supports_displayed_endpoint?; end
  def chromedriver_version; end
  def click(*arg0, **arg1); end
  def disabled?; end
  def drop(*args); end
  def file_errors; end
  def native_displayed?; end
  def perform_legacy_drag(element, drop_modifiers); end
  def select_option; end
  def send_keys(*args); end
  def set_file(value); end
  def set_text(value, clear: nil, **_unused); end
  def visible?; end
  include Capybara::Selenium::Node::FileInputClickEmulation
  include Capybara::Selenium::Node::Html5Drag
end
module Capybara::Selenium::ChromeLogs
  def available_log_types; end
  def commands(command); end
  def log(type); end
end
module Capybara::Selenium::Driver::ChromeDriver
  def build_node(native_node, initial_cache = nil); end
  def cdp_unsupported_errors; end
  def chromedriver_version; end
  def clear_all_storage?; end
  def clear_storage; end
  def delete_all_cookies; end
  def execute_cdp(cmd, params = nil); end
  def fullscreen_window(handle); end
  def reset!; end
  def resize_window_to(handle, width, height); end
  def self.extended(base); end
  def storage_clears; end
  def storage_types_to_clear; end
  def uniform_storage_clear?; end
end
class Capybara::Selenium::FirefoxNode < Capybara::Selenium::Node
  def _send_keys(keys, actions = nil, down_keys = nil); end
  def browser_version; end
  def click(keys = nil, **options); end
  def disabled?; end
  def drop(*args); end
  def focused?; end
  def hover; end
  def native_displayed?; end
  def perform_with_options(click_options); end
  def select_option; end
  def send_keys(*args); end
  def set_file(value); end
  def upload(local_file); end
  def visible?; end
  include Capybara::Selenium::Node::FileInputClickEmulation
  include Capybara::Selenium::Node::Html5Drag
end
module Capybara::Selenium::Driver::FirefoxDriver
  def self.extended(driver); end
  def self.w3c?(driver); end
end
module Capybara::Selenium::Driver::W3CFirefoxDriver
  def browser_version; end
  def build_node(native_node, initial_cache = nil); end
  def refresh; end
  def reset!; end
  def resize_window_to(handle, width, height); end
  def self.extended(driver); end
  def self.pause_broken?(sel_driver); end
  def switch_to_frame(frame); end
end
class Capybara::Selenium::IENode < Capybara::Selenium::Node
  def disabled?; end
end
module Capybara::Selenium::Driver::InternetExplorerDriver
  def build_node(native_node, initial_cache = nil); end
  def switch_to_frame(frame); end
end
class Capybara::Selenium::Node::ModifierKeysStack
  def include?(key); end
  def initialize; end
  def pop; end
  def press(key); end
  def push; end
end
class Capybara::Selenium::SafariNode < Capybara::Selenium::Node
  def _send_keys(keys, actions = nil, down_keys = nil); end
  def click(keys = nil, **options); end
  def disabled?; end
  def hover; end
  def select_option; end
  def send_keys(*args); end
  def set_file(value); end
  def set_text(value, clear: nil, **_unused); end
  def unselect_option; end
  def visible_text; end
end
module Capybara::Selenium::Driver::SafariDriver
  def build_node(native_node, initial_cache = nil); end
  def switch_to_frame(frame); end
end
class Capybara::Selenium::EdgeNode < Capybara::Selenium::Node
  def browser_version; end
  def chrome_edge?; end
  def click(*arg0); end
  def disabled?; end
  def drop(*args); end
  def file_errors; end
  def native_displayed?; end
  def select_option; end
  def set_file(value); end
  def set_text(value, clear: nil, **_unused); end
  def visible?; end
  include Capybara::Selenium::Node::Html5Drag
end
module Capybara::Selenium::Driver::EdgeDriver
  def build_node(native_node, initial_cache = nil); end
  def cdp_unsupported_errors; end
  def clear_all_storage?; end
  def clear_storage; end
  def delete_all_cookies; end
  def download_path=(path); end
  def edgedriver_version; end
  def execute_cdp(cmd, params = nil); end
  def fullscreen_window(handle); end
  def reset!; end
  def resize_window_to(handle, width, height); end
  def self.extended(base); end
  def storage_clears; end
  def storage_types_to_clear; end
  def uniform_storage_clear?; end
end
class Capybara::Selenium::Driver < Capybara::Driver::Base
  def accept_modal(_type, **options); end
  def accept_unhandled_reset_alert; end
  def active_element; end
  def app; end
  def bridge; end
  def browser; end
  def build_node(native_node, initial_cache = nil); end
  def clear_browser_state; end
  def clear_browser_state_errors; end
  def clear_local_storage; end
  def clear_session_storage; end
  def clear_storage; end
  def close_window(handle); end
  def current_url; end
  def current_window_handle; end
  def delete_all_cookies; end
  def dismiss_modal(_type, **options); end
  def evaluate_async_script(script, *args); end
  def evaluate_script(script, *args); end
  def execute_script(script, *args); end
  def find_context; end
  def find_modal(text: nil, **options); end
  def find_modal_errors; end
  def frame_obscured_at?(x:, y:); end
  def fullscreen_window(handle); end
  def go_back; end
  def go_forward; end
  def html; end
  def initialize(app, **options); end
  def invalid_element_errors; end
  def maximize_window(handle); end
  def modal_error; end
  def native_args(args); end
  def navigate_with_accept(url); end
  def needs_server?; end
  def no_such_window_error; end
  def open_new_window(kind = nil); end
  def options; end
  def quit; end
  def refresh; end
  def reset!; end
  def reset_browser_state; end
  def resize_window_to(handle, width, height); end
  def save_screenshot(path, **_options); end
  def selenium_4?; end
  def self.load_selenium; end
  def self.register_specialization(browser_name, specialization); end
  def self.selenium_webdriver_version; end
  def self.specializations; end
  def send_keys(*args); end
  def setup_exit_handler; end
  def silenced_unknown_error_message?(msg); end
  def silenced_unknown_error_messages; end
  def specialize_driver; end
  def switch_to_frame(frame); end
  def switch_to_window(handle); end
  def title; end
  def unhandled_alert_errors; end
  def unwrap_script_result(arg); end
  def visit(path); end
  def wait?; end
  def wait_for_empty_page(timer); end
  def window_handles; end
  def window_size(handle); end
  def with_legacy_error(errors, legacy_error); end
  def within_given_window(handle); end
  include Capybara::Selenium::Find
end
class Capybara::CapybaraError < StandardError
end
class Capybara::DriverNotFoundError < Capybara::CapybaraError
end
class Capybara::FrozenInTime < Capybara::CapybaraError
end
class Capybara::ElementNotFound < Capybara::CapybaraError
end
class Capybara::ModalNotFound < Capybara::CapybaraError
end
class Capybara::Ambiguous < Capybara::ElementNotFound
end
class Capybara::ExpectationNotMet < Capybara::ElementNotFound
end
class Capybara::FileNotFound < Capybara::CapybaraError
end
class Capybara::UnselectNotAllowed < Capybara::CapybaraError
end
class Capybara::NotSupportedByDriverError < Capybara::CapybaraError
end
class Capybara::InfiniteRedirectError < Capybara::CapybaraError
end
class Capybara::ScopeError < Capybara::CapybaraError
end
class Capybara::WindowError < Capybara::CapybaraError
end
class Capybara::ReadOnlyElementError < Capybara::CapybaraError
end
module Capybara::RackTest
end

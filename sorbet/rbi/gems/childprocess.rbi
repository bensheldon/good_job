# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/childprocess/all/childprocess.rbi
#
# childprocess-3.0.0

module ChildProcess
  def self.arch; end
  def self.build(*args); end
  def self.close_on_exec(file); end
  def self.is_64_bit?; end
  def self.jruby?; end
  def self.linux?; end
  def self.logger; end
  def self.logger=(arg0); end
  def self.new(*args); end
  def self.os; end
  def self.platform; end
  def self.platform_name; end
  def self.posix_spawn=(bool); end
  def self.posix_spawn?; end
  def self.unix?; end
  def self.warn_once(msg); end
  def self.windows?; end
  def self.workaround_older_macosx_misreported_cpu?; end
end
class ChildProcess::Error < StandardError
end
class ChildProcess::TimeoutError < ChildProcess::Error
end
class ChildProcess::SubclassResponsibility < ChildProcess::Error
end
class ChildProcess::InvalidEnvironmentVariable < ChildProcess::Error
end
class ChildProcess::LaunchError < ChildProcess::Error
end
class ChildProcess::MissingFFIError < ChildProcess::Error
  def initialize; end
end
class ChildProcess::MissingPlatformError < ChildProcess::Error
  def initialize; end
end
class ChildProcess::AbstractProcess
  def alive?; end
  def assert_started; end
  def crashed?; end
  def cwd; end
  def cwd=(arg0); end
  def detach; end
  def detach=(arg0); end
  def detach?; end
  def duplex; end
  def duplex=(arg0); end
  def duplex?; end
  def environment; end
  def exit_code; end
  def exited?; end
  def initialize(args); end
  def io; end
  def launch_process; end
  def leader; end
  def leader=(arg0); end
  def leader?; end
  def log(*args); end
  def pid; end
  def poll_for_exit(timeout); end
  def start; end
  def started?; end
  def stop(timeout = nil); end
  def wait; end
end
class ChildProcess::AbstractIO
  def _stdin=(io); end
  def check_type(io); end
  def inherit!; end
  def stderr; end
  def stderr=(io); end
  def stdin; end
  def stdout; end
  def stdout=(io); end
end
module ChildProcess::Unix
end
class ChildProcess::Unix::IO < ChildProcess::AbstractIO
  def check_type(io); end
end
class ChildProcess::Unix::Process < ChildProcess::AbstractProcess
  def _pid; end
  def exited?; end
  def io; end
  def pid; end
  def send_kill; end
  def send_signal(sig); end
  def send_term; end
  def set_exit_code(status); end
  def stop(timeout = nil); end
  def wait; end
end
class ChildProcess::Unix::ForkExecProcess < ChildProcess::Unix::Process
  def launch_process; end
  def set_env; end
end

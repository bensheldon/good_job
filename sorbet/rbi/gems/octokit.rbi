# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/octokit/all/octokit.rbi
#
# octokit-4.21.0

module Octokit
  def self.client; end
  def self.enterprise_admin_client; end
  def self.enterprise_management_console_client; end
  def self.method_missing(method_name, *args, &block); end
  def self.respond_to_missing?(method_name, include_private = nil); end
end
module Octokit::Authentication
  def application_authenticated?; end
  def basic_authenticated?; end
  def bearer_authenticated?; end
  def login_from_netrc; end
  def token_authenticated?; end
  def user_authenticated?; end
end
module Octokit::Connection
  def agent; end
  def boolean_from_response(method, path, options = nil); end
  def delete(url, options = nil); end
  def endpoint; end
  def get(url, options = nil); end
  def head(url, options = nil); end
  def last_response; end
  def paginate(url, options = nil, &block); end
  def parse_query_and_convenience_headers(options); end
  def patch(url, options = nil); end
  def post(url, options = nil); end
  def put(url, options = nil); end
  def request(method, path, data, options = nil); end
  def reset_agent; end
  def root; end
  def sawyer_options; end
  include Octokit::Authentication
end
module Octokit::Warnable
  def octokit_warn(*message); end
end
class Octokit::Arguments < Array
  def initialize(args); end
  def options; end
end
class Octokit::RepoArguments < Octokit::Arguments
  def initialize(args); end
  def repo; end
end
module Octokit::Configurable
  def access_token; end
  def access_token=(arg0); end
  def api_endpoint; end
  def api_endpoint=(arg0); end
  def auto_paginate; end
  def auto_paginate=(arg0); end
  def bearer_token; end
  def bearer_token=(arg0); end
  def client_id; end
  def client_id=(arg0); end
  def client_secret; end
  def client_secret=(arg0); end
  def configure; end
  def connection_options; end
  def connection_options=(arg0); end
  def default_media_type; end
  def default_media_type=(arg0); end
  def fetch_client_id_and_secret(overrides = nil); end
  def login; end
  def login=(arg0); end
  def management_console_endpoint; end
  def management_console_endpoint=(arg0); end
  def management_console_password=(arg0); end
  def middleware; end
  def middleware=(arg0); end
  def netrc; end
  def netrc=(arg0); end
  def netrc?; end
  def netrc_file; end
  def netrc_file=(arg0); end
  def options; end
  def password=(arg0); end
  def per_page; end
  def per_page=(arg0); end
  def proxy; end
  def proxy=(arg0); end
  def reset!; end
  def same_options?(opts); end
  def self.keys; end
  def setup; end
  def ssl_verify_mode; end
  def ssl_verify_mode=(arg0); end
  def user_agent; end
  def user_agent=(arg0); end
  def web_endpoint; end
  def web_endpoint=(arg0); end
end
class Octokit::Gist
  def id; end
  def id=(arg0); end
  def initialize(gist); end
  def self.from_url(url); end
  def to_s; end
  def url; end
end
class Anonymous_Struct_33 < Struct
  def limit; end
  def limit=(_); end
  def remaining; end
  def remaining=(_); end
  def resets_at; end
  def resets_at=(_); end
  def resets_in; end
  def resets_in=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class Octokit::RateLimit < Anonymous_Struct_33
  def self.from_response(response); end
end
class Octokit::Repository
  def id; end
  def id=(arg0); end
  def id_api_path; end
  def initialize(repo); end
  def name; end
  def name=(arg0); end
  def named_api_path; end
  def owner; end
  def owner=(arg0); end
  def path; end
  def raise_invalid_repository!(repo); end
  def repo; end
  def self.from_url(url); end
  def self.path(repo); end
  def slug; end
  def to_s; end
  def url; end
  def user; end
  def username; end
  def validate_owner_and_name!(repo); end
end
class Octokit::User
  def self.path(user); end
end
class Octokit::Organization
  def self.path(org); end
end
module Octokit::Preview
  def ensure_api_media_type(type, options); end
  def warn_preview(type); end
end
class Octokit::Client
  def access_token=(value); end
  def as_app(key = nil, secret = nil, &block); end
  def bearer_token=(value); end
  def client_id=(value); end
  def client_secret=(value); end
  def client_without_redirects(options = nil); end
  def initialize(options = nil); end
  def inspect; end
  def login=(value); end
  def password=(value); end
  def user_path(user, path); end
  include Octokit::Authentication
  include Octokit::Client::ActionsSecrets
  include Octokit::Client::ActionsWorkflowRuns
  include Octokit::Client::ActionsWorkflows
  include Octokit::Client::Apps
  include Octokit::Client::Authorizations
  include Octokit::Client::Checks
  include Octokit::Client::CommitBranches
  include Octokit::Client::CommitComments
  include Octokit::Client::CommitPulls
  include Octokit::Client::Commits
  include Octokit::Client::CommunityProfile
  include Octokit::Client::Contents
  include Octokit::Client::Deployments
  include Octokit::Client::Downloads
  include Octokit::Client::Emojis
  include Octokit::Client::Events
  include Octokit::Client::Feeds
  include Octokit::Client::Gists
  include Octokit::Client::Gitignore
  include Octokit::Client::Hooks
  include Octokit::Client::Issues
  include Octokit::Client::Labels
  include Octokit::Client::LegacySearch
  include Octokit::Client::Licenses
  include Octokit::Client::Markdown
  include Octokit::Client::Marketplace
  include Octokit::Client::Meta
  include Octokit::Client::Milestones
  include Octokit::Client::Notifications
  include Octokit::Client::OauthApplications
  include Octokit::Client::Objects
  include Octokit::Client::Organizations
  include Octokit::Client::Pages
  include Octokit::Client::Projects
  include Octokit::Client::PubSubHubbub
  include Octokit::Client::PullRequests
  include Octokit::Client::RateLimit
  include Octokit::Client::Reactions
  include Octokit::Client::Refs
  include Octokit::Client::Releases
  include Octokit::Client::Repositories
  include Octokit::Client::RepositoryInvitations
  include Octokit::Client::Reviews
  include Octokit::Client::Say
  include Octokit::Client::Search
  include Octokit::Client::ServiceStatus
  include Octokit::Client::SourceImport
  include Octokit::Client::Stats
  include Octokit::Client::Statuses
  include Octokit::Client::Traffic
  include Octokit::Client::Users
  include Octokit::Configurable
  include Octokit::Connection
  include Octokit::Preview
  include Octokit::Warnable
end
module Octokit::Client::ActionsSecrets
  def create_or_update_secret(repo, name, options); end
  def delete_secret(repo, name); end
  def get_public_key(repo); end
  def get_secret(repo, name); end
  def list_secrets(repo); end
end
module Octokit::Client::ActionsWorkflows
  def list_workflows(repo, options = nil); end
  def workflow(repo, id, options = nil); end
  def workflow_dispatch(repo, id, ref, options = nil); end
  def workflows(repo, options = nil); end
end
module Octokit::Client::ActionsWorkflowRuns
  def cancel_workflow_run(repo, id, options = nil); end
  def delete_workflow_run(repo, id, options = nil); end
  def delete_workflow_run_logs(repo, id, options = nil); end
  def list_repository_workflow_runs(repo, options = nil); end
  def list_workflow_runs(repo, workflow, options = nil); end
  def repository_workflow_runs(repo, options = nil); end
  def rerun_workflow_run(repo, id, options = nil); end
  def workflow_run(repo, id, options = nil); end
  def workflow_run_logs(repo, id, options = nil); end
  def workflow_runs(repo, workflow, options = nil); end
end
module Octokit::Client::Apps
  def add_repo_to_installation(installation, repo, options = nil); end
  def add_repository_to_app_installation(installation, repo, options = nil); end
  def add_repository_to_integration_installation(installation, repo, options = nil); end
  def app(options = nil); end
  def create_app_installation_access_token(installation, options = nil); end
  def create_installation_access_token(installation, options = nil); end
  def create_integration_installation_access_token(installation, options = nil); end
  def delete_installation(installation, options = nil); end
  def find_app_installations(options = nil); end
  def find_installation_repositories_for_user(installation, options = nil); end
  def find_installations(options = nil); end
  def find_integration_installations(options = nil); end
  def find_organization_installation(organization, options = nil); end
  def find_repository_installation(repo, options = nil); end
  def find_user_installation(user, options = nil); end
  def find_user_installations(options = nil); end
  def installation(id, options = nil); end
  def list_app_installation_repositories(options = nil); end
  def list_installation_repos(options = nil); end
  def list_integration_installation_repositories(options = nil); end
  def remove_repo_from_installation(installation, repo, options = nil); end
  def remove_repository_from_app_installation(installation, repo, options = nil); end
  def remove_repository_from_integration_installation(installation, repo, options = nil); end
end
module Octokit::Client::Authorizations
  def authorization(number, options = nil); end
  def authorizations(options = nil); end
  def authorize_url(app_id = nil, options = nil); end
  def create_authorization(options = nil); end
  def delete_authorization(number, options = nil); end
  def revoke_all_application_authorizations(options = nil); end
  def scopes(token = nil, options = nil); end
  def update_authorization(number, options = nil); end
end
module Octokit::Client::Checks
  def check_run(repo, id, options = nil); end
  def check_run_annotations(repo, id, options = nil); end
  def check_runs_for_check_suite(repo, id, options = nil); end
  def check_runs_for_ref(repo, ref, options = nil); end
  def check_suite(repo, id, options = nil); end
  def check_suites_for_ref(repo, ref, options = nil); end
  def create_check_run(repo, name, head_sha, options = nil); end
  def create_check_suite(repo, head_sha, options = nil); end
  def list_check_runs_for_check_suite(repo, id, options = nil); end
  def list_check_runs_for_ref(repo, ref, options = nil); end
  def list_check_suites_for_ref(repo, ref, options = nil); end
  def rerequest_check_suite(repo, id, options = nil); end
  def set_check_suite_preferences(repo, options = nil); end
  def update_check_run(repo, id, options = nil); end
end
module Octokit::Client::Commits
  def commit(repo, sha, options = nil); end
  def commits(*args); end
  def commits_before(*args); end
  def commits_between(*args); end
  def commits_on(*args); end
  def commits_since(*args); end
  def compare(repo, start, endd, options = nil); end
  def create_commit(repo, message, tree, parents = nil, options = nil); end
  def git_commit(repo, sha, options = nil); end
  def iso8601(date); end
  def list_commits(*args); end
  def merge(repo, base, head, options = nil); end
  def parse_date(date); end
end
module Octokit::Client::CommitComments
  def commit_comment(repo, id, options = nil); end
  def commit_comments(repo, sha, options = nil); end
  def create_commit_comment(repo, sha, body, path = nil, line = nil, position = nil, options = nil); end
  def delete_commit_comment(repo, id, options = nil); end
  def list_commit_comments(repo, options = nil); end
  def update_commit_comment(repo, id, body, options = nil); end
end
module Octokit::Client::CommitPulls
  def commit_pulls(repo, sha, options = nil); end
end
module Octokit::Client::CommitBranches
  def commit_branches(repo, sha, options = nil); end
end
module Octokit::Client::CommunityProfile
  def community_profile(repo, options = nil); end
end
module Octokit::Client::Contents
  def add_content(*args); end
  def add_contents(*args); end
  def archive_link(repo, options = nil); end
  def content(repo, options = nil); end
  def contents(repo, options = nil); end
  def create_content(*args); end
  def create_contents(*args); end
  def delete_content(repo, path, message, sha, options = nil); end
  def delete_contents(repo, path, message, sha, options = nil); end
  def readme(repo, options = nil); end
  def remove_content(repo, path, message, sha, options = nil); end
  def remove_contents(repo, path, message, sha, options = nil); end
  def update_content(*args); end
  def update_contents(*args); end
end
module Octokit::Client::Downloads
  def delete_download(repo, id, options = nil); end
  def download(repo, id, options = nil); end
  def downloads(repo, options = nil); end
  def list_downloads(repo, options = nil); end
end
module Octokit::Client::Deployments
  def create_deployment(repo, ref, options = nil); end
  def create_deployment_status(deployment_url, state, options = nil); end
  def delete_deployment(repo, deployment_id, options = nil); end
  def deployment(repo, deployment_id, options = nil); end
  def deployment_statuses(deployment_url, options = nil); end
  def deployments(repo, options = nil); end
  def list_deployment_statuses(deployment_url, options = nil); end
  def list_deployments(repo, options = nil); end
end
module Octokit::Client::Emojis
  def emojis(options = nil); end
end
module Octokit::Client::Events
  def issue_event(repo, number, options = nil); end
  def issue_events(repo, number, options = nil); end
  def organization_events(org, options = nil); end
  def organization_public_events(org, options = nil); end
  def public_events(options = nil); end
  def received_events(user, options = nil); end
  def received_public_events(user, options = nil); end
  def repo_issue_events(repo, options = nil); end
  def repository_events(repo, options = nil); end
  def repository_issue_events(repo, options = nil); end
  def repository_network_events(repo, options = nil); end
  def user_events(user, options = nil); end
  def user_public_events(user, options = nil); end
end
module Octokit::Client::Feeds
  def feed(name, options = nil); end
  def feeds; end
end
module Octokit::Client::Gists
  def create_gist(options = nil); end
  def create_gist_comment(gist_id, comment, options = nil); end
  def delete_gist(gist, options = nil); end
  def delete_gist_comment(gist_id, gist_comment_id, options = nil); end
  def edit_gist(gist, options = nil); end
  def fork_gist(gist, options = nil); end
  def gist(gist, options = nil); end
  def gist_comment(gist_id, gist_comment_id, options = nil); end
  def gist_comments(gist_id, options = nil); end
  def gist_commits(gist, options = nil); end
  def gist_forks(gist, options = nil); end
  def gist_starred?(gist, options = nil); end
  def gists(user = nil, options = nil); end
  def list_gists(user = nil, options = nil); end
  def public_gists(options = nil); end
  def star_gist(gist, options = nil); end
  def starred_gists(options = nil); end
  def unstar_gist(gist, options = nil); end
  def update_gist_comment(gist_id, gist_comment_id, comment, options = nil); end
end
module Octokit::Client::Gitignore
  def gitignore_template(template_name, options = nil); end
  def gitignore_templates(options = nil); end
end
module Octokit::Client::Hooks
  def available_hooks(options = nil); end
  def create_hook(repo, name, config, options = nil); end
  def create_org_hook(org, config, options = nil); end
  def edit_hook(repo, id, name, config, options = nil); end
  def edit_org_hook(org, id, config, options = nil); end
  def hook(repo, id, options = nil); end
  def hooks(repo, options = nil); end
  def list_org_hooks(org, options = nil); end
  def org_hook(org, id, options = nil); end
  def org_hooks(org, options = nil); end
  def parse_payload(payload_string); end
  def ping_hook(repo, id, options = nil); end
  def ping_org_hook(org, id, options = nil); end
  def remove_hook(repo, id, options = nil); end
  def remove_org_hook(org, id, options = nil); end
  def test_hook(repo, id, options = nil); end
  def update_org_hook(org, id, config, options = nil); end
end
module Octokit::Client::Issues
  def add_assignees(repo, number, assignees, options = nil); end
  def add_comment(repo, number, comment, options = nil); end
  def close_issue(repo, number, options = nil); end
  def create_issue(repo, title, body = nil, options = nil); end
  def delete_comment(repo, number, options = nil); end
  def issue(repo, number, options = nil); end
  def issue_comment(repo, number, options = nil); end
  def issue_comments(repo, number, options = nil); end
  def issue_timeline(repo, number, options = nil); end
  def issues(repository = nil, options = nil); end
  def issues_comments(repo, options = nil); end
  def list_assignees(repo, options = nil); end
  def list_issues(repository = nil, options = nil); end
  def lock_issue(repo, number, options = nil); end
  def open_issue(repo, title, body = nil, options = nil); end
  def org_issues(org, options = nil); end
  def remove_assignees(repo, number, assignees, options = nil); end
  def reopen_issue(repo, number, options = nil); end
  def unlock_issue(repo, number, options = nil); end
  def update_comment(repo, number, comment, options = nil); end
  def update_issue(repo, number, *args); end
  def user_issues(options = nil); end
end
module Octokit::Client::Labels
  def add_label(repo, label, color = nil, options = nil); end
  def add_labels_to_an_issue(repo, number, labels); end
  def delete_label!(repo, label, options = nil); end
  def label(repo, name, options = nil); end
  def labels(repo, options = nil); end
  def labels_for_issue(repo, number, options = nil); end
  def labels_for_milestone(repo, number, options = nil); end
  def remove_all_labels(repo, number, options = nil); end
  def remove_label(repo, number, label, options = nil); end
  def replace_all_labels(repo, number, labels, options = nil); end
  def update_label(repo, label, options = nil); end
end
module Octokit::Client::LegacySearch
  def legacy_search_issues(repo, search_term, state = nil, options = nil); end
  def legacy_search_repositories(q, options = nil); end
  def legacy_search_users(search, options = nil); end
end
module Octokit::Client::Licenses
  def license(license_name, options = nil); end
  def licenses(options = nil); end
  def repository_license_contents(repo, options = nil); end
end
module Octokit::Client::Meta
  def github_meta(options = nil); end
  def meta(options = nil); end
end
module Octokit::Client::Markdown
  def markdown(text, options = nil); end
end
module Octokit::Client::Marketplace
  def list_accounts_for_plan(plan_id, options = nil); end
  def list_plans(options = nil); end
  def marketplace_purchases(options = nil); end
  def plan_for_account(account_id, options = nil); end
end
module Octokit::Client::Milestones
  def create_milestone(repository, title, options = nil); end
  def delete_milestone(repository, number, options = nil); end
  def edit_milestone(repository, number, options = nil); end
  def list_milestones(repository, options = nil); end
  def milestone(repository, number, options = nil); end
  def milestones(repository, options = nil); end
  def update_milestone(repository, number, options = nil); end
end
module Octokit::Client::Notifications
  def delete_thread_subscription(thread_id, options = nil); end
  def mark_notifications_as_read(options = nil); end
  def mark_repo_notifications_as_read(repo, options = nil); end
  def mark_repository_notifications_as_read(repo, options = nil); end
  def mark_thread_as_read(thread_id, options = nil); end
  def notifications(options = nil); end
  def repo_notifications(repo, options = nil); end
  def repository_notifications(repo, options = nil); end
  def thread_notifications(thread_id, options = nil); end
  def thread_subscription(thread_id, options = nil); end
  def update_thread_subscription(thread_id, options = nil); end
end
module Octokit::Client::OauthApplications
  def check_application_authorization(access_token, options = nil); end
  def check_token(access_token, options = nil); end
  def delete_app_authorization(access_token, options = nil); end
  def delete_app_token(access_token, options = nil); end
  def delete_application_authorization(access_token, options = nil); end
  def reset_application_authorization(access_token, options = nil); end
  def reset_token(access_token, options = nil); end
  def revoke_application_authorization(access_token, options = nil); end
end
module Octokit::Client::Objects
  def blob(repo, blob_sha, options = nil); end
  def create_blob(repo, content, encoding = nil, options = nil); end
  def create_tag(repo, tag, message, object_sha, type, tagger_name, tagger_email, tagger_date, options = nil); end
  def create_tree(repo, tree, options = nil); end
  def tag(repo, tag_sha, options = nil); end
  def tree(repo, tree_sha, options = nil); end
end
module Octokit::Client::Organizations
  def add_team_member(team_id, user, options = nil); end
  def add_team_membership(team_id, user, options = nil); end
  def add_team_repo(team_id, repo, options = nil); end
  def add_team_repository(team_id, repo, options = nil); end
  def all_organizations(options = nil); end
  def all_orgs(options = nil); end
  def billing_actions(org); end
  def child_teams(team_id, options = nil); end
  def conceal_membership(org, user, options = nil); end
  def convert_to_outside_collaborator(org, user, options = nil); end
  def create_team(org, options = nil); end
  def delete_migration_archive(org, id, options = nil); end
  def delete_team(team_id, options = nil); end
  def list_organizations(user = nil, options = nil); end
  def list_orgs(user = nil, options = nil); end
  def migration_archive_url(org, id, options = nil); end
  def migration_status(org, id, options = nil); end
  def migrations(org, options = nil); end
  def org(org, options = nil); end
  def org_invitations(org, options = nil); end
  def org_member?(org, user, options = nil); end
  def org_members(org, options = nil); end
  def org_membership(org, options = nil); end
  def org_memberships(options = nil); end
  def org_public_member?(org, user, options = nil); end
  def org_public_members(org, options = nil); end
  def org_repos(org, options = nil); end
  def org_repositories(org, options = nil); end
  def org_teams(org, options = nil); end
  def organization(org, options = nil); end
  def organization_invitations(org, options = nil); end
  def organization_member?(org, user, options = nil); end
  def organization_members(org, options = nil); end
  def organization_membership(org, options = nil); end
  def organization_memberships(options = nil); end
  def organization_public_member?(org, user, options = nil); end
  def organization_public_members(org, options = nil); end
  def organization_repositories(org, options = nil); end
  def organization_teams(org, options = nil); end
  def organizations(user = nil, options = nil); end
  def orgs(user = nil, options = nil); end
  def outside_collaborators(org, options = nil); end
  def publicize_membership(org, user, options = nil); end
  def remove_org_member(org, user, options = nil); end
  def remove_org_membership(org, options = nil); end
  def remove_organization_member(org, user, options = nil); end
  def remove_organization_membership(org, options = nil); end
  def remove_outside_collaborator(org, user, options = nil); end
  def remove_team_member(team_id, user, options = nil); end
  def remove_team_membership(team_id, user, options = nil); end
  def remove_team_repo(team_id, repo, options = nil); end
  def remove_team_repository(team_id, repo, options = nil); end
  def start_migration(org, repositories, options = nil); end
  def team(team_id, options = nil); end
  def team_by_name(org, team_slug, options = nil); end
  def team_invitations(team_id, options = nil); end
  def team_member?(team_id, user, options = nil); end
  def team_members(team_id, options = nil); end
  def team_membership(team_id, user, options = nil); end
  def team_repo?(team_id, repo, options = nil); end
  def team_repos(team_id, options = nil); end
  def team_repositories(team_id, options = nil); end
  def team_repository?(team_id, repo, options = nil); end
  def unlock_repository(org, id, repo, options = nil); end
  def unpublicize_membership(org, user, options = nil); end
  def update_org(org, values, options = nil); end
  def update_org_membership(org, options = nil); end
  def update_organization(org, values, options = nil); end
  def update_organization_membership(org, options = nil); end
  def update_team(team_id, options = nil); end
  def user_teams(options = nil); end
end
module Octokit::Client::Pages
  def latest_pages_build(repo, options = nil); end
  def list_pages_builds(repo, options = nil); end
  def pages(repo, options = nil); end
  def pages_build(repo, id, options = nil); end
  def pages_builds(repo, options = nil); end
  def request_page_build(repo, options = nil); end
end
module Octokit::Client::Projects
  def column_cards(id, options = nil); end
  def create_org_project(org, name, options = nil); end
  def create_organization_project(org, name, options = nil); end
  def create_project(repo, name, options = nil); end
  def create_project_card(id, options = nil); end
  def create_project_column(id, name, options = nil); end
  def delete_project(id, options = nil); end
  def delete_project_card(id, options = nil); end
  def delete_project_column(id, options = nil); end
  def move_project_card(id, position, options = nil); end
  def move_project_column(id, position, options = nil); end
  def org_projects(org, options = nil); end
  def organization_projects(org, options = nil); end
  def project(id, options = nil); end
  def project_card(id, options = nil); end
  def project_column(id, options = nil); end
  def project_columns(id, options = nil); end
  def projects(repo, options = nil); end
  def update_project(id, options = nil); end
  def update_project_card(id, options = nil); end
  def update_project_column(id, name, options = nil); end
end
module Octokit::Client::PubSubHubbub
  def pub_sub_hubbub_request(options = nil); end
  def subscribe(topic, callback, secret = nil); end
  def subscribe_service_hook(repo, service_name, service_arguments = nil, secret = nil); end
  def unsubscribe(topic, callback); end
  def unsubscribe_service_hook(repo, service_name); end
end
module Octokit::Client::PullRequests
  def close_pull_request(repo, number, options = nil); end
  def create_pull_comment(repo, pull_id, body, commit_id, path, position, options = nil); end
  def create_pull_reply(repo, pull_id, body, comment_id, options = nil); end
  def create_pull_request(repo, base, head, title, body = nil, options = nil); end
  def create_pull_request_comment(repo, pull_id, body, commit_id, path, position, options = nil); end
  def create_pull_request_comment_reply(repo, pull_id, body, comment_id, options = nil); end
  def create_pull_request_for_issue(repo, base, head, issue, options = nil); end
  def create_review_reply(repo, pull_id, body, comment_id, options = nil); end
  def create_view_comment(repo, pull_id, body, commit_id, path, position, options = nil); end
  def delete_pull_comment(repo, comment_id, options = nil); end
  def delete_pull_request_comment(repo, comment_id, options = nil); end
  def delete_review_comment(repo, comment_id, options = nil); end
  def merge_pull_request(repo, number, commit_message = nil, options = nil); end
  def pull(repo, number, options = nil); end
  def pull_comment(repo, comment_id, options = nil); end
  def pull_comments(repo, number, options = nil); end
  def pull_commits(repo, number, options = nil); end
  def pull_files(repo, number, options = nil); end
  def pull_merged?(repo, number, options = nil); end
  def pull_request(repo, number, options = nil); end
  def pull_request_comment(repo, comment_id, options = nil); end
  def pull_request_comments(repo, number, options = nil); end
  def pull_request_commits(repo, number, options = nil); end
  def pull_request_files(repo, number, options = nil); end
  def pull_request_merged?(repo, number, options = nil); end
  def pull_requests(repo, options = nil); end
  def pull_requests_comments(repo, options = nil); end
  def pulls(repo, options = nil); end
  def pulls_comments(repo, options = nil); end
  def review_comment(repo, comment_id, options = nil); end
  def review_comments(repo, number, options = nil); end
  def reviews_comments(repo, options = nil); end
  def update_pull_comment(repo, comment_id, body, options = nil); end
  def update_pull_request(*args); end
  def update_pull_request_comment(repo, comment_id, body, options = nil); end
  def update_review_comment(repo, comment_id, body, options = nil); end
end
module Octokit::Client::RateLimit
  def rate_limit!(options = nil); end
  def rate_limit(options = nil); end
  def rate_limit_remaining!(options = nil); end
  def rate_limit_remaining(options = nil); end
  def ratelimit!(options = nil); end
  def ratelimit(options = nil); end
  def ratelimit_remaining!(options = nil); end
  def ratelimit_remaining(options = nil); end
end
module Octokit::Client::Reactions
  def commit_comment_reactions(repo, id, options = nil); end
  def create_commit_comment_reaction(repo, id, reaction, options = nil); end
  def create_issue_comment_reaction(repo, id, reaction, options = nil); end
  def create_issue_reaction(repo, number, reaction, options = nil); end
  def create_pull_request_review_comment_reaction(repo, id, reaction, options = nil); end
  def delete_reaction(id, options = nil); end
  def issue_comment_reactions(repo, id, options = nil); end
  def issue_reactions(repo, number, options = nil); end
  def pull_request_review_comment_reactions(repo, id, options = nil); end
end
module Octokit::Client::Refs
  def create_ref(repo, ref, sha, options = nil); end
  def create_reference(repo, ref, sha, options = nil); end
  def delete_branch(repo, branch, options = nil); end
  def delete_ref(repo, ref, options = nil); end
  def delete_reference(repo, ref, options = nil); end
  def list_references(repo, namespace = nil, options = nil); end
  def list_refs(repo, namespace = nil, options = nil); end
  def matching_refs(repo, ref, options = nil); end
  def ref(repo, ref, options = nil); end
  def reference(repo, ref, options = nil); end
  def references(repo, namespace = nil, options = nil); end
  def refs(repo, namespace = nil, options = nil); end
  def update_branch(repo, branch, sha, force = nil, options = nil); end
  def update_ref(repo, ref, sha, force = nil, options = nil); end
  def update_reference(repo, ref, sha, force = nil, options = nil); end
end
module Octokit::Client::Releases
  def content_type_from_file(file); end
  def create_release(repo, tag_name, options = nil); end
  def delete_release(url, options = nil); end
  def delete_release_asset(asset_url, options = nil); end
  def edit_release(url, options = nil); end
  def edit_release_asset(asset_url, options = nil); end
  def latest_release(repo, options = nil); end
  def list_releases(repo, options = nil); end
  def release(url, options = nil); end
  def release_asset(asset_url, options = nil); end
  def release_assets(release_url, options = nil); end
  def release_for_tag(repo, tag_name, options = nil); end
  def releases(repo, options = nil); end
  def update_release(url, options = nil); end
  def update_release_asset(asset_url, options = nil); end
  def upload_asset(release_url, path_or_file, options = nil); end
end
module Octokit::Client::Repositories
  def add_collab(repo, collaborator, options = nil); end
  def add_collaborator(repo, collaborator, options = nil); end
  def add_deploy_key(repo, title, key, options = nil); end
  def all_repositories(options = nil); end
  def branch(repo, branch, options = nil); end
  def branch_protection(repo, branch, options = nil); end
  def branches(repo, options = nil); end
  def check_assignee(repo, assignee, options = nil); end
  def collaborator?(repo, collaborator, options = nil); end
  def collaborators(repo, options = nil); end
  def collabs(repo, options = nil); end
  def contribs(repo, anon = nil, options = nil); end
  def contributors(repo, anon = nil, options = nil); end
  def create(name, options = nil); end
  def create_repo(name, options = nil); end
  def create_repo_from_template(repo, name, options = nil); end
  def create_repository(name, options = nil); end
  def create_repository_from_template(repo, name, options = nil); end
  def delete_repo(repo, options = nil); end
  def delete_repository(repo, options = nil); end
  def delete_subscription(repo, options = nil); end
  def deploy_key(repo, id, options = nil); end
  def deploy_keys(repo, options = nil); end
  def disable_vulnerability_alerts(repo, options = nil); end
  def dispatch_event(repo, event_type, options = nil); end
  def edit(repo, options = nil); end
  def edit_deploy_key(repo, id, options); end
  def edit_repository(repo, options = nil); end
  def enable_vulnerability_alerts(repo, options = nil); end
  def fork(repo, options = nil); end
  def forks(repo, options = nil); end
  def get_branch(repo, branch, options = nil); end
  def languages(repo, options = nil); end
  def list_deploy_keys(repo, options = nil); end
  def list_repos(user = nil, options = nil); end
  def list_repositories(user = nil, options = nil); end
  def network(repo, options = nil); end
  def permission_level(repo, collaborator, options = nil); end
  def protect_branch(repo, branch, options = nil); end
  def remove_collab(repo, collaborator, options = nil); end
  def remove_collaborator(repo, collaborator, options = nil); end
  def remove_deploy_key(repo, id, options = nil); end
  def rename_branch(repo, branch, new_name, options = nil); end
  def replace_all_topics(repo, names, options = nil); end
  def repo(repo, options = nil); end
  def repo_assignees(repo, options = nil); end
  def repo_teams(repo, options = nil); end
  def repos(user = nil, options = nil); end
  def repositories(user = nil, options = nil); end
  def repository(repo, options = nil); end
  def repository?(repo, options = nil); end
  def repository_assignees(repo, options = nil); end
  def repository_teams(repo, options = nil); end
  def set_private(repo, options = nil); end
  def set_public(repo, options = nil); end
  def star(repo, options = nil); end
  def stargazers(repo, options = nil); end
  def subscribers(repo, options = nil); end
  def subscription(repo, options = nil); end
  def tags(repo, options = nil); end
  def teams(repo, options = nil); end
  def topics(repo, options = nil); end
  def transfer_repo(repo, new_owner, options = nil); end
  def transfer_repository(repo, new_owner, options = nil); end
  def unprotect_branch(repo, branch, options = nil); end
  def unstar(repo, options = nil); end
  def unwatch(repo, options = nil); end
  def update(repo, options = nil); end
  def update_deploy_key(repo, id, options); end
  def update_repository(repo, options = nil); end
  def update_subscription(repo, options = nil); end
  def vulnerability_alerts_enabled?(repo, options = nil); end
  def watch(repo, options = nil); end
  def watchers(repo, options = nil); end
end
module Octokit::Client::RepositoryInvitations
  def accept_repo_invitation(invitation_id, options = nil); end
  def accept_repository_invitation(invitation_id, options = nil); end
  def decline_invitation(invitation_id, options = nil); end
  def decline_repository_invitation(invitation_id, options = nil); end
  def delete_repo_invitation(repo, invitation_id, options = nil); end
  def delete_repository_invitation(repo, invitation_id, options = nil); end
  def invite_user_to_repo(repo, user, options = nil); end
  def invite_user_to_repository(repo, user, options = nil); end
  def repo_invitations(repo, options = nil); end
  def repository_invitations(repo, options = nil); end
  def update_repo_invitation(repo, invitation_id, options = nil); end
  def update_repository_invitation(repo, invitation_id, options = nil); end
  def user_repo_invitations(options = nil); end
  def user_repository_invitations(options = nil); end
end
module Octokit::Client::Reviews
  def create_pull_request_review(repo, number, options = nil); end
  def delete_pull_request_review(repo, number, review, options = nil); end
  def delete_pull_request_review_request(repo, id, reviewers = nil, options = nil); end
  def dismiss_pull_request_review(repo, number, review, message, options = nil); end
  def pull_request_review(repo, number, review, options = nil); end
  def pull_request_review_comments(repo, number, review, options = nil); end
  def pull_request_review_requests(repo, number, options = nil); end
  def pull_request_reviews(repo, number, options = nil); end
  def request_pull_request_review(repo, number, reviewers = nil, options = nil); end
  def submit_pull_request_review(repo, number, review, event, options = nil); end
  def update_pull_request_review(repo, number, review, body, options = nil); end
end
module Octokit::Client::Say
  def octocat(text = nil, options = nil); end
  def say(text = nil, options = nil); end
end
module Octokit::Client::Search
  def search(path, query, options = nil); end
  def search_code(query, options = nil); end
  def search_commits(query, options = nil); end
  def search_issues(query, options = nil); end
  def search_repos(query, options = nil); end
  def search_repositories(query, options = nil); end
  def search_users(query, options = nil); end
end
module Octokit::Client::ServiceStatus
  def github_status; end
  def github_status_last_message; end
  def github_status_messages; end
end
module Octokit::Client::SourceImport
  def cancel_source_import(repo, options = nil); end
  def map_source_import_commit_author(author_url, values, options = nil); end
  def set_source_import_lfs_preference(repo, use_lfs, options = nil); end
  def source_import_commit_authors(repo, options = nil); end
  def source_import_large_files(repo, options = nil); end
  def source_import_progress(repo, options = nil); end
  def start_source_import(*args); end
  def update_source_import(repo, options = nil); end
end
module Octokit::Client::Stats
  def code_frequency_stats(repo, options = nil); end
  def commit_activity_stats(repo, options = nil); end
  def contributor_stats(repo, options = nil); end
  def contributors_stats(repo, options = nil); end
  def get_stats(repo, metric, options = nil); end
  def participation_stats(repo, options = nil); end
  def punch_card(repo, options = nil); end
  def punch_card_stats(repo, options = nil); end
end
module Octokit::Client::Statuses
  def combined_status(repo, ref, options = nil); end
  def create_status(repo, sha, state, options = nil); end
  def list_statuses(repo, sha, options = nil); end
  def status(repo, ref, options = nil); end
  def statuses(repo, sha, options = nil); end
end
module Octokit::Client::Traffic
  def clones(repo, options = nil); end
  def top_paths(repo, options = nil); end
  def top_referrers(repo, options = nil); end
  def views(repo, options = nil); end
end
module Octokit::Client::Users
  def add_email(email, options = nil); end
  def add_key(title, key, options = nil); end
  def all_users(options = nil); end
  def delete_user_migration_archive(id, options = nil); end
  def emails(options = nil); end
  def exchange_code_for_token(code, app_id = nil, app_secret = nil, options = nil); end
  def follow(user, options = nil); end
  def followers(user = nil, options = nil); end
  def following(user = nil, options = nil); end
  def follows?(*args); end
  def key(key_id, options = nil); end
  def keys(options = nil); end
  def remove_email(email); end
  def remove_key(id, options = nil); end
  def starred(user = nil, options = nil); end
  def starred?(repo, options = nil); end
  def start_user_migration(repositories, options = nil); end
  def subscriptions(user = nil, options = nil); end
  def unfollow(user, options = nil); end
  def unlock_user_repository(id, repo, options = nil); end
  def update_key(key_id, options = nil); end
  def update_user(options); end
  def user(user = nil, options = nil); end
  def user_keys(user, options = nil); end
  def user_migration_archive_url(id, options = nil); end
  def user_migration_repositories(id, options = nil); end
  def user_migration_status(id, options = nil); end
  def user_migrations(options = nil); end
  def validate_credentials(options = nil); end
  def watched(user = nil, options = nil); end
end
class Octokit::EnterpriseAdminClient
  def initialize(options = nil); end
  include Octokit::Configurable
  include Octokit::Connection
  include Octokit::EnterpriseAdminClient::AdminStats
  include Octokit::EnterpriseAdminClient::License
  include Octokit::EnterpriseAdminClient::Orgs
  include Octokit::EnterpriseAdminClient::SearchIndexing
  include Octokit::EnterpriseAdminClient::Users
  include Octokit::Warnable
end
module Octokit::EnterpriseAdminClient::AdminStats
  def admin_comments_stats; end
  def admin_gists_stats; end
  def admin_hooks_stats; end
  def admin_issues_stats; end
  def admin_milestones_stats; end
  def admin_organization_stats; end
  def admin_pages_stats; end
  def admin_pull_requests_stats; end
  def admin_repository_stats; end
  def admin_stats; end
  def admin_users_stats; end
  def get_admin_stats(metric); end
end
module Octokit::EnterpriseAdminClient::License
  def license_info; end
end
module Octokit::EnterpriseAdminClient::Orgs
  def create_organization(login, admin, options = nil); end
end
module Octokit::EnterpriseAdminClient::SearchIndexing
  def index_organization(user); end
  def index_organizations_repositories(user); end
  def index_organizations_repositories_code(user); end
  def index_organizations_repositories_issues(user); end
  def index_repository(repo); end
  def index_repository_code(repo); end
  def index_repository_issues(repo); end
  def index_user(user); end
  def index_users_repositories(user); end
  def index_users_repositories_code(user); end
  def index_users_repositories_issues(user); end
  def queue_index(target); end
end
module Octokit::EnterpriseAdminClient::Users
  def create_impersonation_token(login, options = nil); end
  def create_user(login, email, options = nil); end
  def delete_impersonation_token(login, options = nil); end
  def delete_key(id, options = nil); end
  def delete_user(username, options = nil); end
  def demote(user, options = nil); end
  def list_all_keys(options = nil); end
  def promote(user, options = nil); end
  def rename_user(old_login, new_login, options = nil); end
  def suspend(user, options = nil); end
  def unsuspend(user, options = nil); end
end
class Octokit::EnterpriseManagementConsoleClient
  def endpoint; end
  def faraday_configuration; end
  def initialize(options = nil); end
  def management_console_endpoint=(value); end
  def management_console_password=(value); end
  def password_hash; end
  include Octokit::Configurable
  include Octokit::Connection
  include Octokit::EnterpriseManagementConsoleClient::ManagementConsole
  include Octokit::Warnable
end
module Octokit::EnterpriseManagementConsoleClient::ManagementConsole
  def add_authorized_key(key); end
  def authorized_keys; end
  def config_check; end
  def config_status; end
  def delete_authorized_key(key); end
  def edit_maintenance_status(maintenance); end
  def edit_settings(settings); end
  def get_authorized_keys; end
  def get_maintenance_status; end
  def get_settings; end
  def maintenance_status; end
  def remove_authorized_key(key); end
  def set_maintenance_status(maintenance); end
  def settings; end
  def start_configuration; end
  def upgrade(license); end
  def upload_license(license, settings = nil); end
end
module Octokit::Middleware
end
class Octokit::Middleware::RedirectLimitReached < Faraday::ClientError
  def initialize(response); end
  def response; end
end
class Octokit::Middleware::FollowRedirects < Faraday::Middleware
  def call(env); end
  def convert_to_get?(response); end
  def follow_limit; end
  def follow_redirect?(env, response); end
  def initialize(app, options = nil); end
  def perform_with_redirection(env, follows); end
  def safe_escape(uri); end
  def same_host?(original_url, redirect_url); end
  def update_env(env, request_body, response); end
end
class Octokit::Error < StandardError
  def build_error_context; end
  def build_error_message; end
  def context; end
  def data; end
  def documentation_url; end
  def errors; end
  def initialize(response = nil); end
  def redact_url(url_string); end
  def response_body; end
  def response_error; end
  def response_error_summary; end
  def response_headers; end
  def response_message; end
  def response_status; end
  def self.error_for_401(headers); end
  def self.error_for_403(body); end
  def self.error_for_404(body); end
  def self.error_for_422(body); end
  def self.from_response(response); end
end
class Octokit::ClientError < Octokit::Error
end
class Octokit::BadRequest < Octokit::ClientError
end
class Octokit::Unauthorized < Octokit::ClientError
end
class Octokit::OneTimePasswordRequired < Octokit::ClientError
  def delivery_method_from_header; end
  def password_delivery; end
  def self.required_header(headers); end
end
class Octokit::Forbidden < Octokit::ClientError
end
class Octokit::TooManyRequests < Octokit::Forbidden
end
class Octokit::TooManyLoginAttempts < Octokit::Forbidden
end
class Octokit::TooLargeContent < Octokit::Forbidden
end
class Octokit::AbuseDetected < Octokit::Forbidden
end
class Octokit::RepositoryUnavailable < Octokit::Forbidden
end
class Octokit::UnverifiedEmail < Octokit::Forbidden
end
class Octokit::AccountSuspended < Octokit::Forbidden
end
class Octokit::BillingIssue < Octokit::Forbidden
end
class Octokit::SAMLProtected < Octokit::Forbidden
end
class Octokit::InstallationSuspended < Octokit::Forbidden
end
class Octokit::NotFound < Octokit::ClientError
end
class Octokit::BranchNotProtected < Octokit::ClientError
end
class Octokit::MethodNotAllowed < Octokit::ClientError
end
class Octokit::NotAcceptable < Octokit::ClientError
end
class Octokit::Conflict < Octokit::ClientError
end
class Octokit::UnsupportedMediaType < Octokit::ClientError
end
class Octokit::UnprocessableEntity < Octokit::ClientError
end
class Octokit::CommitIsNotPartOfPullRequest < Octokit::UnprocessableEntity
end
class Octokit::PathDiffTooLarge < Octokit::UnprocessableEntity
end
class Octokit::UnavailableForLegalReasons < Octokit::ClientError
end
class Octokit::ServerError < Octokit::Error
end
class Octokit::InternalServerError < Octokit::ServerError
end
class Octokit::NotImplemented < Octokit::ServerError
end
class Octokit::BadGateway < Octokit::ServerError
end
class Octokit::ServiceUnavailable < Octokit::ServerError
end
class Octokit::MissingContentType < ArgumentError
end
class Octokit::ApplicationCredentialsRequired < StandardError
end
class Octokit::InvalidRepository < ArgumentError
end
module Octokit::Response
end
class Octokit::Response::RaiseError < Faraday::Response::Middleware
  def on_complete(response); end
end
class Octokit::Response::FeedParser < Faraday::Response::Middleware
  def on_complete(env); end
end
module Octokit::Default
  def self.access_token; end
  def self.api_endpoint; end
  def self.auto_paginate; end
  def self.bearer_token; end
  def self.client_id; end
  def self.client_secret; end
  def self.connection_options; end
  def self.default_media_type; end
  def self.login; end
  def self.management_console_endpoint; end
  def self.management_console_password; end
  def self.middleware; end
  def self.netrc; end
  def self.netrc_file; end
  def self.options; end
  def self.password; end
  def self.per_page; end
  def self.proxy; end
  def self.ssl_verify_mode; end
  def self.user_agent; end
  def self.web_endpoint; end
end

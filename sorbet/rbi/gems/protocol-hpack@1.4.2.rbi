# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `protocol-hpack` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module Protocol
end

module Protocol::HPACK
end

class Protocol::HPACK::CompressionError < ::Protocol::HPACK::Error
end

class Protocol::HPACK::Compressor
  def initialize(buffer, context = T.unsafe(nil), table_size_limit: T.unsafe(nil)); end

  def buffer; end
  def context; end
  def encode(headers, table_size = T.unsafe(nil)); end
  def huffman; end
  def offset; end
  def table_size_limit; end
  def write_byte(byte); end
  def write_bytes(bytes); end
  def write_header(command); end
  def write_integer(value, bits); end
  def write_string(string, huffman = T.unsafe(nil)); end
end

class Protocol::HPACK::Context
  def initialize(table = T.unsafe(nil), huffman: T.unsafe(nil), index: T.unsafe(nil), table_size: T.unsafe(nil)); end

  def add_command(*header); end
  def change_table_size(size); end
  def current_table_size; end
  def decode(command); end
  def dereference(index); end
  def encode(headers); end
  def huffman; end
  def index; end
  def table; end
  def table_size; end
  def table_size=(size); end

  private

  def add_to_table(command); end
  def initialize_copy(other); end
  def size_check(command); end
end

Protocol::HPACK::Context::STATIC_TABLE = T.let(T.unsafe(nil), Array)

class Protocol::HPACK::DecompressionError < ::Protocol::HPACK::Error
end

class Protocol::HPACK::Decompressor
  def initialize(buffer, context = T.unsafe(nil), table_size_limit: T.unsafe(nil)); end

  def buffer; end
  def context; end
  def decode(list = T.unsafe(nil)); end
  def end?; end
  def offset; end
  def peek_byte; end
  def read_byte; end
  def read_bytes(length); end
  def read_header; end
  def read_integer(bits); end
  def read_string; end
  def table_size_limit; end
end

class Protocol::HPACK::Error < ::StandardError
end

Protocol::HPACK::HEADER_REPRESENTATION = T.let(T.unsafe(nil), Hash)

class Protocol::HPACK::Huffman
  def decode(buffer); end
  def encode(str); end
end

Protocol::HPACK::Huffman::BITS_AT_ONCE = T.let(T.unsafe(nil), Integer)

Protocol::HPACK::Huffman::CODES = T.let(T.unsafe(nil), Array)

Protocol::HPACK::Huffman::ENCODE_TABLE = T.let(T.unsafe(nil), Array)

Protocol::HPACK::Huffman::EOS = T.let(T.unsafe(nil), Integer)

Protocol::HPACK::Huffman::MACHINE = T.let(T.unsafe(nil), Array)

Protocol::HPACK::Huffman::MAX_FINAL_STATE = T.let(T.unsafe(nil), Integer)

Protocol::HPACK::LINEAR = T.let(T.unsafe(nil), Hash)

Protocol::HPACK::LINEAR_HUFFMAN = T.let(T.unsafe(nil), Hash)

Protocol::HPACK::MODES = T.let(T.unsafe(nil), Hash)

Protocol::HPACK::NAIVE = T.let(T.unsafe(nil), Hash)

Protocol::HPACK::NAIVE_HUFFMAN = T.let(T.unsafe(nil), Hash)

Protocol::HPACK::SHORTER = T.let(T.unsafe(nil), Hash)

Protocol::HPACK::SHORTER_HUFFMAN = T.let(T.unsafe(nil), Hash)

Protocol::HPACK::STATIC = T.let(T.unsafe(nil), Hash)

Protocol::HPACK::STATIC_HUFFMAN = T.let(T.unsafe(nil), Hash)

Protocol::HPACK::VERSION = T.let(T.unsafe(nil), String)

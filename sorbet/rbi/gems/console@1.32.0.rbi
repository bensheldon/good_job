# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `console` gem.
# Please instead update this file by running `bin/tapioca gem console`.


# source://console//lib/console/version.rb#6
module Console
  extend ::Console::Interface
end

# A simple clock utility for tracking and formatting time.
#
# source://console//lib/console/clock.rb#8
module Console::Clock
  class << self
    # Format a duration in seconds as a human readable string.
    #
    # source://console//lib/console/clock.rb#13
    def formatted_duration(duration); end

    # source://console//lib/console/clock.rb#36
    def now; end
  end
end

# Represents a configuration for the traces library.
#
# source://console//lib/console/config.rb#14
class Console::Config
  # Set the default log level based on `$DEBUG` and `$VERBOSE`.
  # You can also specify CONSOLE_LEVEL=debug or CONSOLE_LEVEL=info in environment.
  # https://mislav.net/2011/06/ruby-verbose-mode/ has more details about how it all fits together.
  #
  # source://console//lib/console/config.rb#42
  def log_level(env = T.unsafe(nil)); end

  # Create a logger with the given output and options.
  #
  # source://console//lib/console/config.rb#75
  def make_logger(io = T.unsafe(nil), env = T.unsafe(nil), **options); end

  # Create an output with the given output and options.
  #
  # source://console//lib/console/config.rb#57
  def make_output(io = T.unsafe(nil), env = T.unsafe(nil), **options); end

  # Create a resolver with the given logger.
  #
  # source://console//lib/console/config.rb#65
  def make_resolver(logger); end

  # Controls verbose output using `$VERBOSE`.
  #
  # @return [Boolean]
  #
  # source://console//lib/console/config.rb#47
  def verbose?(env = T.unsafe(nil)); end

  class << self
    # Load the default configuration.
    #
    # source://console//lib/console/config.rb#32
    def default; end

    # Load the configuration from the given path.
    #
    # source://console//lib/console/config.rb#20
    def load(path); end
  end
end

# Load the default configuration.
#
# source://console//lib/console/config.rb#94
Console::Config::DEFAULT = T.let(T.unsafe(nil), Console::Config)

# source://console//lib/console/config.rb#15
Console::Config::PATH = T.let(T.unsafe(nil), String)

# Structured event logging.
#
# source://console//lib/console/event/generic.rb#7
module Console::Event; end

# Represents a failure of some kind, usually with an attached exception.
#
# ```ruby
# begin
# 	raise "Something went wrong!"
# rescue => exception
# 	Console::Event::Failure.log("Something went wrong!", exception)
# end
# ```
#
# Generally, you should use the {Console.error} method to log failures, as it will automatically create a failure event for you.
#
# source://console//lib/console/event/failure.rb#23
class Console::Event::Failure < ::Console::Event::Generic
  # Create a new failure event for the given exception.
  #
  # @return [Failure] a new instance of Failure
  #
  # source://console//lib/console/event/failure.rb#56
  def initialize(exception, root = T.unsafe(nil)); end

  # Log the failure event.
  #
  # source://console//lib/console/event/failure.rb#76
  def emit(*arguments, **options); end

  # Returns the value of attribute exception.
  #
  # source://console//lib/console/event/failure.rb#50
  def exception; end

  # Convert the failure event to a hash.
  #
  # source://console//lib/console/event/failure.rb#64
  def to_hash; end

  private

  # source://console//lib/console/event/failure.rb#84
  def extract(exception, hash); end

  class << self
    # For the purpose of efficiently formatting backtraces, we need to know the root directory of the project.
    #
    # source://console//lib/console/event/failure.rb#27
    def default_root; end

    # Create a new failure event for the given exception.
    #
    # source://console//lib/console/event/failure.rb#36
    def for(exception); end

    # Log a failure event with the given exception.
    #
    # source://console//lib/console/event/failure.rb#45
    def log(subject, exception, **options); end
  end
end

# A generic event which can be used to represent structured data.
#
# source://console//lib/console/event/generic.rb#9
class Console::Event::Generic
  # Convert the event to a hash suitable for JSON serialization.
  #
  # source://console//lib/console/event/generic.rb#20
  def as_json(*_arg0, **_arg1, &_arg2); end

  # Log the event using the given output interface.
  #
  # source://console//lib/console/event/generic.rb#42
  def emit(*arguments, **options); end

  # Convert the event to a hash suitable for JSON serialization.
  #
  # source://console//lib/console/event/generic.rb#13
  def to_hash; end

  # Serialize the event to JSON.
  #
  # source://console//lib/console/event/generic.rb#27
  def to_json(*_arg0, **_arg1, &_arg2); end

  # Convert the event to a string (JSON).
  #
  # source://console//lib/console/event/generic.rb#34
  def to_s; end
end

# Represents a child process spawn event.
#
# ```ruby
# Console.info(self, **Console::Event::Spawn.for("ls", "-l"))
#
# event = Console::Event::Spawn.for("ls", "-l")
# event.status = Process.wait
# ```
#
# source://console//lib/console/event/spawn.rb#19
class Console::Event::Spawn < ::Console::Event::Generic
  # Create a new spawn event.
  #
  # @return [Spawn] a new instance of Spawn
  #
  # source://console//lib/console/event/spawn.rb#40
  def initialize(environment, arguments, options); end

  # Calculate the duration of the command, if it has completed.
  #
  # source://console//lib/console/event/spawn.rb#71
  def duration; end

  # Log the spawn event.
  #
  # source://console//lib/console/event/spawn.rb#99
  def emit(*arguments, **options); end

  # Returns the value of attribute end_time.
  #
  # source://console//lib/console/event/spawn.rb#55
  def end_time; end

  # Returns the value of attribute start_time.
  #
  # source://console//lib/console/event/spawn.rb#52
  def start_time; end

  # Returns the value of attribute status.
  #
  # source://console//lib/console/event/spawn.rb#58
  def status; end

  # Set the status of the command, and record the end time.
  #
  # source://console//lib/console/event/spawn.rb#63
  def status=(status); end

  # Convert the spawn event to a hash suitable for JSON serialization.
  #
  # source://console//lib/console/event/spawn.rb#80
  def to_hash; end

  class << self
    # Create a new spawn event.
    #
    # source://console//lib/console/event/spawn.rb#25
    def for(*arguments, **options); end
  end
end

# A log filter which can be used to filter log messages based on severity, subject, and other criteria.
#
# source://console//lib/console/filter.rb#13
class Console::Filter
  # Create a new log filter.
  #
  # @return [Filter] a new instance of Filter
  #
  # source://console//lib/console/filter.rb#73
  def initialize(output, verbose: T.unsafe(nil), level: T.unsafe(nil), **options); end

  # Enable all logging.
  #
  # source://console//lib/console/filter.rb#143
  def all!; end

  # Log a message with the given severity.
  #
  # source://console//lib/console/filter.rb#214
  def call(subject, *arguments, **options, &block); end

  # Clear any specific filters for the given class.
  #
  # source://console//lib/console/filter.rb#199
  def clear(subject); end

  # Disable logging for the given class.
  #
  # source://console//lib/console/filter.rb#191
  def disable(subject); end

  # Enable specific log level for the given class.
  #
  # source://console//lib/console/filter.rb#183
  def enable(subject, level = T.unsafe(nil)); end

  # Whether logging is enabled for the given subject and log level.
  #
  # You can enable and disable logging for classes. This function checks if logging for a given subject is enabled.
  #
  # @return [Boolean]
  #
  # source://console//lib/console/filter.rb#168
  def enabled?(subject, level = T.unsafe(nil)); end

  # Filter log messages based on the subject and log level.
  #
  # You must provide the subject's class, not an instance of the class.
  #
  # source://console//lib/console/filter.rb#153
  def filter(subject, level); end

  # Returns the value of attribute level.
  #
  # source://console//lib/console/filter.rb#110
  def level; end

  # Set the log level.
  #
  # source://console//lib/console/filter.rb#121
  def level=(level); end

  # Disable all logging.
  #
  # source://console//lib/console/filter.rb#138
  def off!; end

  # Returns the value of attribute options.
  #
  # source://console//lib/console/filter.rb#116
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://console//lib/console/filter.rb#116
  def options=(_arg0); end

  # Returns the value of attribute output.
  #
  # source://console//lib/console/filter.rb#104
  def output; end

  # Sets the attribute output
  #
  # @param value the value to set the attribute output to.
  #
  # source://console//lib/console/filter.rb#104
  def output=(_arg0); end

  # Returns the value of attribute subjects.
  #
  # source://console//lib/console/filter.rb#113
  def subjects; end

  # Returns the value of attribute verbose.
  #
  # source://console//lib/console/filter.rb#107
  def verbose; end

  # Set verbose output (enable by default with no arguments).
  #
  # source://console//lib/console/filter.rb#132
  def verbose!(value = T.unsafe(nil)); end

  # Create a new log filter with the given options, from an existing log filter.
  #
  # source://console//lib/console/filter.rb#95
  def with(level: T.unsafe(nil), verbose: T.unsafe(nil), **options); end

  class << self
    # Create a new log filter with specific log levels.
    #
    # ```ruby
    # class MyLogger < Console::Filter[debug: 0, okay: 1, bad: 2, terrible: 3]
    # ```
    #
    # source://console//lib/console/filter.rb#34
    def [](**levels); end

    # Define a method.
    #
    # source://console//lib/console/filter.rb#16
    def define_immutable_method(name, &block); end
  end
end

# source://console//lib/console/format/safe.rb#10
module Console::Format
  class << self
    # A safe format for converting objects to strings.
    #
    # source://console//lib/console/format.rb#13
    def default; end
  end
end

# A safe format for converting objects to strings.
#
# Handles issues like circular references and encoding errors.
#
# source://console//lib/console/format/safe.rb#14
class Console::Format::Safe
  # Create a new safe format.
  #
  # @return [Safe] a new instance of Safe
  #
  # source://console//lib/console/format/safe.rb#20
  def initialize(format: T.unsafe(nil), limit: T.unsafe(nil), encoding: T.unsafe(nil)); end

  # Dump the given object to a string.
  #
  # source://console//lib/console/format/safe.rb#30
  def dump(object); end

  private

  # Create a new hash with identity comparison.
  #
  # source://console//lib/console/format/safe.rb#115
  def default_objects; end

  # Filter the backtrace to remove duplicate frames and reduce verbosity.
  #
  # source://console//lib/console/format/safe.rb#42
  def filter_backtrace(error); end

  # Replace the given object with a safe truncated representation.
  #
  # source://console//lib/console/format/safe.rb#103
  def replacement_for(object); end

  # Dump the given object to a string, replacing it with a safe representation if there is an error.
  #
  # This is a slow path so we try to avoid it.
  #
  # source://console//lib/console/format/safe.rb#86
  def safe_dump(object, error); end

  # This will recursively generate a safe version of the object. Nested hashes and arrays will be transformed recursively. Strings will be encoded with the given encoding. Primitive values will be returned as-is. Other values will be converted using `as_json` if available, otherwise `to_s`.
  #
  # source://console//lib/console/format/safe.rb#125
  def safe_dump_recurse(object, limit = T.unsafe(nil), objects = T.unsafe(nil)); end
end

# The public logger interface.
#
# source://console//lib/console/interface.rb#11
module Console::Interface
  extend ::Fiber::Local

  # Emit a log message with arbitrary arguments and options.
  #
  # source://console//lib/console/interface.rb#57
  def call(*_arg0, **_arg1, &_arg2); end

  # Emit a debug log message.
  #
  # source://console//lib/console/interface.rb#32
  def debug(*_arg0, **_arg1, &_arg2); end

  # Emit an error log message.
  #
  # source://console//lib/console/interface.rb#47
  def error(*_arg0, **_arg1, &_arg2); end

  # Emit a fatal log message.
  #
  # source://console//lib/console/interface.rb#52
  def fatal(*_arg0, **_arg1, &_arg2); end

  # Emit an informational log message.
  #
  # source://console//lib/console/interface.rb#37
  def info(*_arg0, **_arg1, &_arg2); end

  # Get the current logger instance.
  #
  # source://console//lib/console/interface.rb#20
  def logger; end

  # Set the current logger instance.
  #
  # The current logger instance is assigned per-fiber.
  #
  # source://console//lib/console/interface.rb#27
  def logger=(instance); end

  # Emit a warning log message.
  #
  # source://console//lib/console/interface.rb#42
  def warn(*_arg0, **_arg1, &_arg2); end

  class << self
    # source://console//lib/console/interface.rb#12
    def fiber_local_attribute_name; end

    # Create a new (thread local) logger instance.
    #
    # source://console//lib/console/interface.rb#15
    def local; end
  end
end

# The standard logger interface with support for log levels and verbosity.
#
# The log levels are: `debug`, `info`, `warn`, `error`, and `fatal`.
#
# source://console//lib/console/logger.rb#20
class Console::Logger < ::Console::Filter
  # Create a new logger.
  #
  # @return [Logger] a new instance of Logger
  #
  # source://console//lib/console/logger.rb#47
  def initialize(output, **options); end

  # Create a progress indicator for the given subject.
  #
  # source://console//lib/console/logger.rb#60
  def progress(subject, total, **options); end

  class << self
    # Set the default log level based on `$DEBUG` and `$VERBOSE`.
    # You can also specify CONSOLE_LEVEL=debug or CONSOLE_LEVEL=info in environment.
    # https://mislav.net/2011/06/ruby-verbose-mode/ has more details about how it all fits together.
    #
    # source://console//lib/console/logger.rb#29
    def default_log_level(env = T.unsafe(nil), verbose: T.unsafe(nil), debug: T.unsafe(nil)); end
  end
end

# source://console//lib/console/logger.rb#41
Console::Logger::DEFAULT_LEVEL = T.let(T.unsafe(nil), Integer)

# Output handling.
#
# source://console//lib/console/output/terminal.rb#16
module Console::Output
  class << self
    # Create a new output based on the environment.
    #
    # The environment variable `CONSOLE_OUTPUT` can be used to specify a list of output classes to wrap around the output. If not specified the {Default} output is used.
    #
    # The output argument is deliberately unders-specified but can be an IO object or an instance of {Output}.
    #
    # source://console//lib/console/output.rb#24
    def new(output = T.unsafe(nil), env = T.unsafe(nil), **options); end
  end
end

# Default output format selection.
#
# source://console//lib/console/output/default.rb#13
module Console::Output::Default
  class << self
    # Detect if we're running in a cron job or mail context where human-readable output is preferred.
    # Cron jobs often have MAILTO set and lack TERM, or have minimal TERM values.
    #
    # @return [Boolean]
    #
    # source://console//lib/console/output/default.rb#36
    def mail?(env = T.unsafe(nil)); end

    # Create a new output format based on the given stream.
    #
    # source://console//lib/console/output/default.rb#20
    def new(stream, env: T.unsafe(nil), **options); end
  end
end

# A wrapper for outputting failure messages, which can include exceptions.
#
# source://console//lib/console/output/failure.rb#12
class Console::Output::Failure < ::Console::Output::Wrapper
  # Create a new failure output wrapper.
  #
  # @return [Failure] a new instance of Failure
  #
  # source://console//lib/console/output/failure.rb#14
  def initialize(output, **options); end

  # The exception must be either the last argument or passed as an option.
  #
  # source://console//lib/console/output/failure.rb#25
  def call(subject = T.unsafe(nil), *arguments, exception: T.unsafe(nil), **options, &block); end
end

# @deprecated This is a legacy constant, please use `Serialized` instead.
#
# source://console//lib/console/output/serialized.rb#97
Console::Output::JSON = Console::Output::Serialized

# A null output that does nothing.
#
# source://console//lib/console/output/null.rb#9
class Console::Output::Null
  # Create a new null output.
  #
  # @return [Null] a new instance of Null
  #
  # source://console//lib/console/output/null.rb#11
  def initialize(*_arg0, **_arg1, &_arg2); end

  # Do nothing.
  #
  # source://console//lib/console/output/null.rb#20
  def call(*_arg0, **_arg1, &_arg2); end

  # The last output is always self.
  #
  # source://console//lib/console/output/null.rb#15
  def last_output; end
end

# Serialize log messages in a structured format.
#
# source://console//lib/console/output/serialized.rb#13
class Console::Output::Serialized
  # Create a new serialized output.
  #
  # @return [Serialized] a new instance of Serialized
  #
  # source://console//lib/console/output/serialized.rb#19
  def initialize(stream, format: T.unsafe(nil), **options); end

  # Output the given log message.
  #
  # source://console//lib/console/output/serialized.rb#50
  def call(subject = T.unsafe(nil), *arguments, severity: T.unsafe(nil), **options, &block); end

  # Serialize the given record.
  #
  # source://console//lib/console/output/serialized.rb#39
  def dump(record); end

  # Returns the value of attribute format.
  #
  # source://console//lib/console/output/serialized.rb#33
  def format; end

  # This a final output that then writes to an IO object.
  #
  # source://console//lib/console/output/serialized.rb#25
  def last_output; end

  # Returns the value of attribute stream.
  #
  # source://console//lib/console/output/serialized.rb#30
  def stream; end
end

# Represents a terminal output, and formats log messages for display.
#
# source://console//lib/console/output/terminal.rb#18
class Console::Output::Terminal
  # Create a new terminal output.
  #
  # @return [Terminal] a new instance of Terminal
  #
  # source://console//lib/console/output/terminal.rb#72
  def initialize(stream, verbose: T.unsafe(nil), start_at: T.unsafe(nil), format: T.unsafe(nil), **options); end

  # Log a message with the given severity.
  #
  # source://console//lib/console/output/terminal.rb#145
  def call(subject = T.unsafe(nil), *arguments, name: T.unsafe(nil), severity: T.unsafe(nil), event: T.unsafe(nil), **options, &block); end

  # This a final output.
  #
  # source://console//lib/console/output/terminal.rb#100
  def last_output; end

  # Register all formatters in the given namespace.
  #
  # source://console//lib/console/output/terminal.rb#124
  def register_formatters(namespace = T.unsafe(nil)); end

  # Returns the value of attribute start.
  #
  # source://console//lib/console/output/terminal.rb#111
  def start; end

  # Returns the value of attribute stream.
  #
  # source://console//lib/console/output/terminal.rb#105
  def stream; end

  # Returns the value of attribute terminal.
  #
  # source://console//lib/console/output/terminal.rb#114
  def terminal; end

  # Returns the value of attribute verbose.
  #
  # source://console//lib/console/output/terminal.rb#108
  def verbose; end

  # Set the verbose output.
  #
  # source://console//lib/console/output/terminal.rb#119
  def verbose!(value = T.unsafe(nil)); end

  # Sets the attribute verbose
  #
  # @param value the value to set the attribute verbose to.
  #
  # source://console//lib/console/output/terminal.rb#108
  def verbose=(_arg0); end

  protected

  # source://console//lib/console/output/terminal.rb#275
  def build_prefix(name); end

  # source://console//lib/console/output/terminal.rb#212
  def default_suffix(object = T.unsafe(nil)); end

  # source://console//lib/console/output/terminal.rb#196
  def format_argument(argument, output); end

  # source://console//lib/console/output/terminal.rb#181
  def format_event(event, buffer, width); end

  # source://console//lib/console/output/terminal.rb#238
  def format_object_subject(severity, prefix, subject, output); end

  # source://console//lib/console/output/terminal.rb#192
  def format_options(options, output); end

  # source://console//lib/console/output/terminal.rb#250
  def format_string_subject(severity, prefix, subject, output); end

  # source://console//lib/console/output/terminal.rb#202
  def format_subject(severity, prefix, subject, buffer); end

  # source://console//lib/console/output/terminal.rb#262
  def format_value(value, output); end

  # source://console//lib/console/output/terminal.rb#271
  def time_offset_prefix; end

  class << self
    # Exports CONSOLE_START_AT which can be used to synchronize the start times of all child processes when they log using delta time.
    #
    # source://console//lib/console/output/terminal.rb#52
    def start_at!(env = T.unsafe(nil)); end
  end
end

# Represents an output buffer that formats lines with a prefix.
#
# source://console//lib/console/output/terminal.rb#20
class Console::Output::Terminal::Buffer < ::StringIO
  # Create a new buffer with the given prefix.
  #
  # @return [Buffer] a new instance of Buffer
  #
  # source://console//lib/console/output/terminal.rb#24
  def initialize(prefix = T.unsafe(nil)); end

  # Write lines using the given prefix.
  # Write a line to the buffer.
  #
  # source://console//lib/console/output/terminal.rb#45
  def <<(*lines, prefix: T.unsafe(nil)); end

  # Returns the value of attribute prefix.
  #
  # source://console//lib/console/output/terminal.rb#31
  def prefix; end

  # Write lines using the given prefix.
  #
  # source://console//lib/console/output/terminal.rb#37
  def puts(*lines, prefix: T.unsafe(nil)); end
end

# The environment variable used to store the start time of the console terminal output.
#
# source://console//lib/console/output/terminal.rb#49
Console::Output::Terminal::CONSOLE_START_AT = T.let(T.unsafe(nil), String)

# The default severity for log messages, if not specified.
#
# source://console//lib/console/output/terminal.rb#132
Console::Output::Terminal::UNKNOWN = T.let(T.unsafe(nil), Symbol)

# Terminal text output.
#
# source://console//lib/console/output/terminal.rb#285
module Console::Output::Text
  class << self
    # Create a new terminal output.
    #
    # source://console//lib/console/output/terminal.rb#291
    def new(output, **options); end
  end
end

# A generic wrapper for output handling.
#
# source://console//lib/console/output/wrapper.rb#9
class Console::Output::Wrapper
  # Create a new wrapper output.
  #
  # @return [Wrapper] a new instance of Wrapper
  #
  # source://console//lib/console/output/wrapper.rb#14
  def initialize(delegate, **options); end

  # Invoke the delegate.
  #
  # source://console//lib/console/output/wrapper.rb#34
  def call(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute delegate.
  #
  # source://console//lib/console/output/wrapper.rb#19
  def delegate; end

  # The last output is the last output of the delegate.
  #
  # source://console//lib/console/output/wrapper.rb#22
  def last_output; end

  # Set the verbose flag for the delegate.
  #
  # source://console//lib/console/output/wrapper.rb#29
  def verbose!(value = T.unsafe(nil)); end
end

# Terminal XTerm output.
#
# source://console//lib/console/output/terminal.rb#297
module Console::Output::XTerm
  class << self
    # Create a new terminal output.
    #
    # You can use this to force XTerm output on a non-TTY output streams that support XTerm escape codes.
    #
    # source://console//lib/console/output/terminal.rb#305
    def new(output, **options); end
  end
end

# A simple progress indicator
#
# source://console//lib/console/progress.rb#11
class Console::Progress
  # Create a new progress indicator.
  #
  # @return [Progress] a new instance of Progress
  #
  # source://console//lib/console/progress.rb#23
  def initialize(subject, total = T.unsafe(nil), minimum_output_duration: T.unsafe(nil), **options); end

  # source://console//lib/console/progress.rb#67
  def average_duration; end

  # Returns the value of attribute current.
  #
  # source://console//lib/console/progress.rb#46
  def current; end

  # source://console//lib/console/progress.rb#52
  def duration; end

  # source://console//lib/console/progress.rb#74
  def estimated_remaining_time; end

  # Increment the progress indicator by the given amount.
  #
  # source://console//lib/console/progress.rb#98
  def increment(amount = T.unsafe(nil)); end

  # Augment the progress indicator with additional information.
  #
  # source://console//lib/console/progress.rb#127
  def mark(*arguments, **options, &block); end

  # Returns the value of attribute minimum_output_duration.
  #
  # source://console//lib/console/progress.rb#40
  def minimum_output_duration; end

  # source://console//lib/console/progress.rb#57
  def ratio; end

  # source://console//lib/console/progress.rb#62
  def remaining; end

  # Resize the progress indicator to the given total.
  #
  # source://console//lib/console/progress.rb#113
  def resize(total); end

  # Returns the value of attribute start_time.
  #
  # source://console//lib/console/progress.rb#43
  def start_time; end

  # Returns the value of attribute subject.
  #
  # source://console//lib/console/progress.rb#37
  def subject; end

  # Generate an appropriate event for the progress indicator.
  #
  # source://console//lib/console/progress.rb#83
  def to_hash; end

  # source://console//lib/console/progress.rb#132
  def to_s; end

  # Returns the value of attribute total.
  #
  # source://console//lib/console/progress.rb#49
  def total; end

  private

  # Compute a time delta since the last output, used for rate limiting the output.
  #
  # source://console//lib/console/progress.rb#145
  def duration_since_last_output; end

  # Whether an output should be generated at this time, taking into account the remaining steps, and the duration since the last output.
  #
  # @return [Boolean]
  #
  # source://console//lib/console/progress.rb#154
  def output?; end

  class << self
    # @deprecated Use {Clock.now} instead.
    #
    # source://console//lib/console/progress.rb#13
    def now; end
  end
end

# Represents a class resolver that can be used to set log levels for different classes as they become available.
#
# source://console//lib/console/resolver.rb#11
class Console::Resolver
  # Create a new class resolver.
  #
  # @return [Resolver] a new instance of Resolver
  #
  # source://console//lib/console/resolver.rb#63
  def initialize; end

  # Bind the given class names to the given block. When the class name is resolved into an actual class, the block will be called with the class as an argument.
  #
  # If the class is already defined, the block will be called immediately.
  #
  # If the class is not defined, the block will be called when the class is defined, using a trace point.
  #
  # source://console//lib/console/resolver.rb#77
  def bind(names, &block); end

  # Invoked by the trace point when a class is defined.
  #
  # This will call the block associated with the class name, if any, and remove it from the list of names to resolve.
  #
  # If the list of names is empty, the trace point will be disabled.
  #
  # source://console//lib/console/resolver.rb#105
  def resolve(trace_point); end

  # @return [Boolean]
  #
  # source://console//lib/console/resolver.rb#94
  def waiting?; end

  class << self
    # You can change the log level for different classes using CONSOLE_$LEVEL env vars.
    #
    # e.g. `CONSOLE_WARN=Acorn,Banana CONSOLE_DEBUG=Cat` will set the log level for the classes Acorn and Banana to `warn` and Cat to `debug`. This overrides the default log level.
    #
    # You can enable all log levels for a given class by using `CONSOLE_ON=MyClass`. Similarly you can disable all logging using `CONSOLE_OFF=MyClass`.
    #
    # source://console//lib/console/resolver.rb#22
    def default_resolver(logger, env = T.unsafe(nil)); end
  end
end

# Styled terminal output.
#
# source://console//lib/console/terminal/text.rb#11
module Console::Terminal
  class << self
    # Create a new terminal output for the given stream.
    #
    # source://console//lib/console/terminal.rb#13
    def for(stream); end
  end
end

# Formatters for various types of events.
#
# source://console//lib/console/terminal/formatter/progress.rb#8
module Console::Terminal::Formatter; end

# Format a failure event, including the exception message and backtrace.
#
# source://console//lib/console/terminal/formatter/failure.rb#10
class Console::Terminal::Formatter::Failure
  # Create a new failure formatter.
  #
  # @param terminal [Terminal::Text] The terminal to use for formatting.
  # @return [Failure] a new instance of Failure
  #
  # source://console//lib/console/terminal/formatter/failure.rb#17
  def initialize(terminal); end

  # Format the given event.
  #
  # source://console//lib/console/terminal/formatter/failure.rb#34
  def format(event, stream, prefix: T.unsafe(nil), verbose: T.unsafe(nil), **options); end
end

# The key used to identify this formatter.
#
# source://console//lib/console/terminal/formatter/failure.rb#12
Console::Terminal::Formatter::Failure::KEY = T.let(T.unsafe(nil), Symbol)

# Format a progress event, including the current progress and total.
#
# source://console//lib/console/terminal/formatter/progress.rb#10
class Console::Terminal::Formatter::Progress
  # Create a new progress formatter.
  #
  # @param terminal [Terminal::Text] The terminal to use for formatting.
  # @return [Progress] a new instance of Progress
  #
  # source://console//lib/console/terminal/formatter/progress.rb#30
  def initialize(terminal); end

  # Format the given event.
  #
  # source://console//lib/console/terminal/formatter/progress.rb#41
  def format(event, stream, verbose: T.unsafe(nil), width: T.unsafe(nil)); end

  private

  # Render a progress bar with the given value and width.
  #
  # source://console//lib/console/terminal/formatter/progress.rb#57
  def bar(value, width); end
end

# The block characters used to render the progress bar.
#
# source://console//lib/console/terminal/formatter/progress.rb#15
Console::Terminal::Formatter::Progress::BLOCK = T.let(T.unsafe(nil), Array)

# The key used to identify this formatter.
#
# source://console//lib/console/terminal/formatter/progress.rb#12
Console::Terminal::Formatter::Progress::KEY = T.let(T.unsafe(nil), Symbol)

# Format a spawn event, including the command and arguments.
#
# source://console//lib/console/terminal/formatter/spawn.rb#10
class Console::Terminal::Formatter::Spawn
  # Create a new spawn formatter.
  #
  # @param terminal [Terminal::Text] The terminal to use for formatting.
  # @return [Spawn] a new instance of Spawn
  #
  # source://console//lib/console/terminal/formatter/spawn.rb#17
  def initialize(terminal); end

  # Format the given event.
  #
  # source://console//lib/console/terminal/formatter/spawn.rb#28
  def format(event, stream, verbose: T.unsafe(nil), width: T.unsafe(nil)); end

  private

  # Generate a string to represent the working directory.
  #
  # source://console//lib/console/terminal/formatter/spawn.rb#45
  def chdir_string(options); end
end

# The key used to identify this formatter.
#
# source://console//lib/console/terminal/formatter/spawn.rb#12
Console::Terminal::Formatter::Spawn::KEY = T.let(T.unsafe(nil), Symbol)

# A simple text-based terminal output.
#
# source://console//lib/console/terminal/text.rb#13
class Console::Terminal::Text
  # Create a new text terminal output.
  #
  # @return [Text] a new instance of Text
  #
  # source://console//lib/console/terminal/text.rb#17
  def initialize(stream); end

  # Get the style associated with the given key.
  #
  # source://console//lib/console/terminal/text.rb#29
  def [](key); end

  # Set the style associated with the given key.
  #
  # source://console//lib/console/terminal/text.rb#37
  def []=(key, value); end

  # @return [Boolean]
  #
  # source://console//lib/console/terminal/text.rb#42
  def colors?; end

  # Print rich text to the output stream.
  #
  # - When the argument is a symbol, look up the style and inject it into the output stream.
  # - When the argument is a proc/lambda, call it with self as the argument.
  # - When the argument is anything else, write it directly to the output.
  #
  # source://console//lib/console/terminal/text.rb#107
  def print(*arguments); end

  # Print rich text to the output stream, followed by the reset sequence and a newline.
  #
  # source://console//lib/console/terminal/text.rb#123
  def print_line(*arguments); end

  # Write the given arguments to the output stream using the given style. The reset sequence is automatically
  # appended at the end of each line.
  #
  # source://console//lib/console/terminal/text.rb#87
  def puts(*arguments, style: T.unsafe(nil)); end

  # Generate a reset sequence.
  #
  # source://console//lib/console/terminal/text.rb#65
  def reset; end

  # source://console//lib/console/terminal/text.rb#47
  def size; end

  # Returns the value of attribute stream.
  #
  # source://console//lib/console/terminal/text.rb#23
  def stream; end

  # Generate a style string for the given foreground, background, and attributes.
  #
  # source://console//lib/console/terminal/text.rb#59
  def style(foreground, background = T.unsafe(nil), *attributes); end

  # source://console//lib/console/terminal/text.rb#52
  def width; end

  # Write the given arguments to the output stream using the given style. The reset sequence is automatically appended.
  #
  # source://console//lib/console/terminal/text.rb#72
  def write(*arguments, style: T.unsafe(nil)); end
end

# XTerm style terminal output.
#
# source://console//lib/console/terminal/xterm.rb#14
class Console::Terminal::XTerm < ::Console::Terminal::Text
  # Whether the terminal supports colors.
  #
  # @return [Boolean]
  #
  # source://console//lib/console/terminal/xterm.rb#42
  def colors?; end

  # Reset the style.
  #
  # source://console//lib/console/terminal/xterm.rb#86
  def reset; end

  # The size of the terminal.
  #
  # source://console//lib/console/terminal/xterm.rb#47
  def size; end

  # Apply the given style to the output.
  #
  # source://console//lib/console/terminal/xterm.rb#65
  def style(foreground, background = T.unsafe(nil), *attributes); end

  # The width of the terminal.
  #
  # source://console//lib/console/terminal/xterm.rb#55
  def width; end
end

# XTerm attribute codes.
#
# source://console//lib/console/terminal/xterm.rb#29
Console::Terminal::XTerm::ATTRIBUTES = T.let(T.unsafe(nil), Hash)

# XTerm color codes.
#
# source://console//lib/console/terminal/xterm.rb#16
Console::Terminal::XTerm::COLORS = T.let(T.unsafe(nil), Hash)

# source://console//lib/console/filter.rb#10
Console::UNKNOWN = T.let(T.unsafe(nil), Symbol)

# source://console//lib/console/version.rb#7
Console::VERSION = T.let(T.unsafe(nil), String)

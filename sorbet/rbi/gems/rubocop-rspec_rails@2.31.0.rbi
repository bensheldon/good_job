# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rubocop-rspec_rails` gem.
# Please instead update this file by running `bin/tapioca gem rubocop-rspec_rails`.


# source://rubocop-rspec_rails//lib/rubocop/rspec_rails/plugin.rb#5
module RuboCop; end

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/avoid_setup_hook.rb#4
module RuboCop::Cop; end

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/avoid_setup_hook.rb#5
module RuboCop::Cop::RSpecRails; end

# Checks that tests use RSpec `before` hook over Rails `setup` method.
#
# @example
#   # bad
#   setup do
#   allow(foo).to receive(:bar)
#   end
#
#   # good
#   before do
#   allow(foo).to receive(:bar)
#   end
#
# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/avoid_setup_hook.rb#19
class RuboCop::Cop::RSpecRails::AvoidSetupHook < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/avoid_setup_hook.rb#31
  def on_block(node); end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/avoid_setup_hook.rb#25
  def setup_call(param0 = T.unsafe(nil)); end
end

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/avoid_setup_hook.rb#22
RuboCop::Cop::RSpecRails::AvoidSetupHook::MSG = T.let(T.unsafe(nil), String)

# Checks that tests use `have_http_status` instead of equality matchers.
#
# @example ResponseMethods: ['response', 'last_response'] (default)
#   # bad
#   expect(response.status).to be(200)
#   expect(last_response.code).to eq("200")
#
#   # good
#   expect(response).to have_http_status(200)
#   expect(last_response).to have_http_status(200)
# @example ResponseMethods: ['foo_response']
#   # bad
#   expect(foo_response.status).to be(200)
#
#   # good
#   expect(foo_response).to have_http_status(200)
#
#   # also good
#   expect(response).to have_http_status(200)
#   expect(last_response).to have_http_status(200)
#
# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/have_http_status.rb#28
class RuboCop::Cop::RSpecRails::HaveHttpStatus < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/have_http_status.rb#39
  def match_status(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/have_http_status.rb#49
  def on_send(node); end

  private

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/have_http_status.rb#71
  def response_methods; end

  # @return [Boolean]
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/have_http_status.rb#67
  def response_methods?(name); end
end

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/have_http_status.rb#31
RuboCop::Cop::RSpecRails::HaveHttpStatus::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/have_http_status.rb#36
RuboCop::Cop::RSpecRails::HaveHttpStatus::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Set)

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/have_http_status.rb#35
RuboCop::Cop::RSpecRails::HaveHttpStatus::RUNNERS = T.let(T.unsafe(nil), Set)

# Enforces use of symbolic or numeric value to describe HTTP status.
#
# This cop inspects only `have_http_status` calls.
# So, this cop does not check if a method starting with `be_*` is used
# when setting for `EnforcedStyle: symbolic` or
# `EnforcedStyle: numeric`.
# This cop is also capable of detecting unknown HTTP status codes.
#
# @example `EnforcedStyle: symbolic` (default)
#   # bad
#   it { is_expected.to have_http_status 200 }
#   it { is_expected.to have_http_status 404 }
#   it { is_expected.to have_http_status "403" }
#
#   # good
#   it { is_expected.to have_http_status :ok }
#   it { is_expected.to have_http_status :not_found }
#   it { is_expected.to have_http_status :forbidden }
#   it { is_expected.to have_http_status :success }
#   it { is_expected.to have_http_status :error }
# @example `EnforcedStyle: numeric`
#   # bad
#   it { is_expected.to have_http_status :ok }
#   it { is_expected.to have_http_status :not_found }
#   it { is_expected.to have_http_status "forbidden" }
#
#   # good
#   it { is_expected.to have_http_status 200 }
#   it { is_expected.to have_http_status 404 }
#   it { is_expected.to have_http_status 403 }
#   it { is_expected.to have_http_status :success }
#   it { is_expected.to have_http_status :error }
# @example `EnforcedStyle: be_status`
#   # bad
#   it { is_expected.to have_http_status :ok }
#   it { is_expected.to have_http_status :not_found }
#   it { is_expected.to have_http_status "forbidden" }
#   it { is_expected.to have_http_status 200 }
#   it { is_expected.to have_http_status 404 }
#   it { is_expected.to have_http_status "403" }
#
#   # good
#   it { is_expected.to be_ok }
#   it { is_expected.to be_not_found }
#   it { is_expected.to have_http_status :success }
#   it { is_expected.to have_http_status :error }
# @example
#   # bad
#   it { is_expected.to have_http_status :oki_doki }
#
#   # good
#   it { is_expected.to have_http_status :ok }
#
# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#67
class RuboCop::Cop::RSpecRails::HttpStatus < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::ConfigurableEnforcedStyle
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#73
  def http_status(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#77
  def on_send(node); end

  private

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#97
  def checker_class; end
end

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#202
class RuboCop::Cop::RSpecRails::HttpStatus::BeStatusStyleChecker < ::RuboCop::Cop::RSpecRails::HttpStatus::StyleCheckerBase
  # @return [Boolean]
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#208
  def autocorrectable?; end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#212
  def offense_range; end

  # @return [Boolean]
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#203
  def offensive?; end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#216
  def prefer; end

  private

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#240
  def normalize_str; end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#236
  def number; end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#222
  def status_code; end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#232
  def symbol; end
end

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#177
class RuboCop::Cop::RSpecRails::HttpStatus::NumericStyleChecker < ::RuboCop::Cop::RSpecRails::HttpStatus::StyleCheckerBase
  # @return [Boolean]
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#182
  def autocorrectable?; end

  # @return [Boolean]
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#178
  def offensive?; end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#186
  def prefer; end

  private

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#196
  def number; end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#192
  def symbol; end
end

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#70
RuboCop::Cop::RSpecRails::HttpStatus::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#113
class RuboCop::Cop::RSpecRails::HttpStatus::StyleCheckerBase
  # @return [StyleCheckerBase] a new instance of StyleCheckerBase
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#121
  def initialize(node); end

  # @return [Boolean]
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#141
  def allowed_symbol?; end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#133
  def current; end

  # @return [Boolean]
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#145
  def custom_http_status_code?; end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#125
  def message; end

  # Returns the value of attribute node.
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#119
  def node; end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#137
  def offense_range; end
end

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#117
RuboCop::Cop::RSpecRails::HttpStatus::StyleCheckerBase::ALLOWED_STATUSES = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#114
RuboCop::Cop::RSpecRails::HttpStatus::StyleCheckerBase::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#116
RuboCop::Cop::RSpecRails::HttpStatus::StyleCheckerBase::MSG_UNKNOWN_STATUS_CODE = T.let(T.unsafe(nil), String)

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#152
class RuboCop::Cop::RSpecRails::HttpStatus::SymbolicStyleChecker < ::RuboCop::Cop::RSpecRails::HttpStatus::StyleCheckerBase
  # @return [Boolean]
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#157
  def autocorrectable?; end

  # @return [Boolean]
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#153
  def offensive?; end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#161
  def prefer; end

  private

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#171
  def number; end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/http_status.rb#167
  def symbol; end
end

# Identifies redundant spec type.
#
# After setting up rspec-rails, you will have enabled
# `config.infer_spec_type_from_file_location!` by default in
# spec/rails_helper.rb. This cop works in conjunction with this config.
# If you disable this config, disable this cop as well.
#
# @example
#   # bad
#   # spec/models/user_spec.rb
#   RSpec.describe User, type: :model do
#   end
#
#   # good
#   # spec/models/user_spec.rb
#   RSpec.describe User do
#   end
#
#   # good
#   # spec/models/user_spec.rb
#   RSpec.describe User, type: :common do
#   end
# @example `Inferences` configuration
#   # .rubocop.yml
#   # RSpecRails/InferredSpecType:
#   #   Inferences:
#   #     services: service
#
#   # bad
#   # spec/services/user_spec.rb
#   RSpec.describe User, type: :service do
#   end
#
#   # good
#   # spec/services/user_spec.rb
#   RSpec.describe User do
#   end
#
#   # good
#   # spec/services/user_spec.rb
#   RSpec.describe User, type: :common do
#   end
#
# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/inferred_spec_type.rb#53
class RuboCop::Cop::RSpecRails::InferredSpecType < ::RuboCop::Cop::RSpec::Base
  extend ::RuboCop::Cop::AutoCorrector

  # @param node [RuboCop::AST::BlockNode]
  # @return [RuboCop::AST::PairNode, nil]
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/inferred_spec_type.rb#78
  def describe_with_type(param0 = T.unsafe(nil)); end

  # @param node [RuboCop::AST::BlockNode]
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/inferred_spec_type.rb#59
  def on_block(node); end

  # @param node [RuboCop::AST::BlockNode]
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/inferred_spec_type.rb#71
  def on_numblock(node); end

  private

  # @param corrector [RuboCop::AST::Corrector]
  # @param node [RuboCop::AST::Node]
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/inferred_spec_type.rb#90
  def autocorrect(corrector, node); end

  # @param node [RuboCop::AST::PairNode]
  # @return [RuboCop::AST::Node]
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/inferred_spec_type.rb#116
  def detect_removable_node(node); end

  # @return [String]
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/inferred_spec_type.rb#125
  def file_path; end

  # @return [Hash]
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/inferred_spec_type.rb#143
  def inferences; end

  # @param node [RuboCop::AST::PairNode]
  # @return [Boolean]
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/inferred_spec_type.rb#131
  def inferred_type?(node); end

  # @return [Symbol, nil]
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/inferred_spec_type.rb#136
  def inferred_type_from_file_path; end

  # @param node [RuboCop::AST::Node]
  # @return [Parser::Source::Range]
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/inferred_spec_type.rb#97
  def remove_range(node); end
end

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/inferred_spec_type.rb#56
RuboCop::Cop::RSpecRails::InferredSpecType::MSG = T.let(T.unsafe(nil), String)

# Check if using Minitest-like matchers.
#
# Check the use of minitest-like matchers
# starting with `assert_` or `refute_`.
#
# @example
#   # bad
#   assert_equal(a, b)
#   assert_equal a, b, "must be equal"
#   assert_not_includes a, b
#   refute_equal(a, b)
#   assert_nil a
#   refute_empty(b)
#   assert_true(a)
#   assert_false(a)
#
#   # good
#   expect(b).to eq(a)
#   expect(b).to(eq(a), "must be equal")
#   expect(a).not_to include(b)
#   expect(b).not_to eq(a)
#   expect(a).to eq(nil)
#   expect(a).not_to be_empty
#   expect(a).to be(true)
#   expect(a).to be(false)
#
# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#32
class RuboCop::Cop::RSpecRails::MinitestAssertions < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#348
  def message(preferred); end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#341
  def on_assertion(node, assertion); end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#329
  def on_send(node); end
end

# TODO: replace with `BasicAssertion.subclasses` in Ruby 3.1+
#
# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#321
RuboCop::Cop::RSpecRails::MinitestAssertions::ASSERTION_MATCHERS = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#36
class RuboCop::Cop::RSpecRails::MinitestAssertions::BasicAssertion
  extend ::RuboCop::AST::NodePattern::Macros

  # @return [BasicAssertion] a new instance of BasicAssertion
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#47
  def initialize(expected, actual, failure_message); end

  # Returns the value of attribute actual.
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#39
  def actual; end

  # @raise [NotImplementedError]
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#66
  def assertion; end

  # Returns the value of attribute expected.
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#39
  def expected; end

  # Returns the value of attribute failure_message.
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#39
  def failure_message; end

  # @return [Boolean]
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#62
  def negated?(node); end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#53
  def replaced(node); end

  class << self
    # @raise [NotImplementedError]
    #
    # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#41
    def minitest_assertion; end
  end
end

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#257
class RuboCop::Cop::RSpecRails::MinitestAssertions::EmptyAssertion < ::RuboCop::Cop::RSpecRails::MinitestAssertions::BasicAssertion
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#273
  def assertion; end

  class << self
    # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#269
    def match(actual, failure_message); end

    # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#265
    def minitest_assertion(param0 = T.unsafe(nil)); end
  end
end

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#258
RuboCop::Cop::RSpecRails::MinitestAssertions::EmptyAssertion::MATCHERS = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#74
class RuboCop::Cop::RSpecRails::MinitestAssertions::EqualAssertion < ::RuboCop::Cop::RSpecRails::MinitestAssertions::BasicAssertion
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#90
  def assertion; end

  class << self
    # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#86
    def match(expected, actual, failure_message); end

    # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#82
    def minitest_assertion(param0 = T.unsafe(nil)); end
  end
end

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#75
RuboCop::Cop::RSpecRails::MinitestAssertions::EqualAssertion::MATCHERS = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#299
class RuboCop::Cop::RSpecRails::MinitestAssertions::FalseAssertion < ::RuboCop::Cop::RSpecRails::MinitestAssertions::BasicAssertion
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#313
  def assertion; end

  class << self
    # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#309
    def match(actual, failure_message); end

    # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#305
    def minitest_assertion(param0 = T.unsafe(nil)); end
  end
end

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#300
RuboCop::Cop::RSpecRails::MinitestAssertions::FalseAssertion::MATCHERS = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#162
class RuboCop::Cop::RSpecRails::MinitestAssertions::InDeltaAssertion < ::RuboCop::Cop::RSpecRails::MinitestAssertions::BasicAssertion
  # @return [InDeltaAssertion] a new instance of InDeltaAssertion
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#178
  def initialize(expected, actual, delta, fail_message); end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#184
  def assertion; end

  class << self
    # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#174
    def match(expected, actual, delta, failure_message); end

    # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#170
    def minitest_assertion(param0 = T.unsafe(nil)); end
  end
end

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#163
RuboCop::Cop::RSpecRails::MinitestAssertions::InDeltaAssertion::MATCHERS = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#140
class RuboCop::Cop::RSpecRails::MinitestAssertions::IncludesAssertion < ::RuboCop::Cop::RSpecRails::MinitestAssertions::BasicAssertion
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#156
  def assertion; end

  class << self
    # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#152
    def match(collection, expected, failure_message); end

    # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#148
    def minitest_assertion(param0 = T.unsafe(nil)); end
  end
end

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#141
RuboCop::Cop::RSpecRails::MinitestAssertions::IncludesAssertion::MATCHERS = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#118
class RuboCop::Cop::RSpecRails::MinitestAssertions::InstanceOfAssertion < ::RuboCop::Cop::RSpecRails::MinitestAssertions::BasicAssertion
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#134
  def assertion; end

  class << self
    # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#130
    def match(expected, actual, failure_message); end

    # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#126
    def minitest_assertion(param0 = T.unsafe(nil)); end
  end
end

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#119
RuboCop::Cop::RSpecRails::MinitestAssertions::InstanceOfAssertion::MATCHERS = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#96
class RuboCop::Cop::RSpecRails::MinitestAssertions::KindOfAssertion < ::RuboCop::Cop::RSpecRails::MinitestAssertions::BasicAssertion
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#112
  def assertion; end

  class << self
    # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#108
    def match(expected, actual, failure_message); end

    # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#104
    def minitest_assertion(param0 = T.unsafe(nil)); end
  end
end

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#97
RuboCop::Cop::RSpecRails::MinitestAssertions::KindOfAssertion::MATCHERS = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#318
RuboCop::Cop::RSpecRails::MinitestAssertions::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#214
class RuboCop::Cop::RSpecRails::MinitestAssertions::MatchAssertion < ::RuboCop::Cop::RSpecRails::MinitestAssertions::BasicAssertion
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#229
  def assertion; end

  class << self
    # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#225
    def match(matcher, actual, failure_message); end

    # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#221
    def minitest_assertion(param0 = T.unsafe(nil)); end
  end
end

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#215
RuboCop::Cop::RSpecRails::MinitestAssertions::MatchAssertion::MATCHERS = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#235
class RuboCop::Cop::RSpecRails::MinitestAssertions::NilAssertion < ::RuboCop::Cop::RSpecRails::MinitestAssertions::BasicAssertion
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#251
  def assertion; end

  class << self
    # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#247
    def match(actual, failure_message); end

    # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#243
    def minitest_assertion(param0 = T.unsafe(nil)); end
  end
end

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#236
RuboCop::Cop::RSpecRails::MinitestAssertions::NilAssertion::MATCHERS = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#190
class RuboCop::Cop::RSpecRails::MinitestAssertions::PredicateAssertion < ::RuboCop::Cop::RSpecRails::MinitestAssertions::BasicAssertion
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#208
  def assertion; end

  class << self
    # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#202
    def match(subject, predicate, failure_message); end

    # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#198
    def minitest_assertion(param0 = T.unsafe(nil)); end
  end
end

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#191
RuboCop::Cop::RSpecRails::MinitestAssertions::PredicateAssertion::MATCHERS = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#327
RuboCop::Cop::RSpecRails::MinitestAssertions::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#279
class RuboCop::Cop::RSpecRails::MinitestAssertions::TrueAssertion < ::RuboCop::Cop::RSpecRails::MinitestAssertions::BasicAssertion
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#293
  def assertion; end

  class << self
    # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#289
    def match(actual, failure_message); end

    # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#285
    def minitest_assertion(param0 = T.unsafe(nil)); end
  end
end

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/minitest_assertions.rb#280
RuboCop::Cop::RSpecRails::MinitestAssertions::TrueAssertion::MATCHERS = T.let(T.unsafe(nil), Array)

# Enforces use of `be_invalid` or `not_to` for negated be_valid.
#
# @example EnforcedStyle: not_to (default)
#   # bad
#   expect(foo).to be_invalid
#
#   # good
#   expect(foo).not_to be_valid
#
#   # good (with method chain)
#   expect(foo).to be_invalid.and be_odd
# @example EnforcedStyle: be_invalid
#   # bad
#   expect(foo).not_to be_valid
#
#   # good
#   expect(foo).to be_invalid
#
#   # good (with method chain)
#   expect(foo).to be_invalid.or be_even
#
# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/negation_be_valid.rb#32
class RuboCop::Cop::RSpecRails::NegationBeValid < ::RuboCop::Cop::Base
  include ::RuboCop::Cop::ConfigurableEnforcedStyle
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/negation_be_valid.rb#45
  def be_invalid?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/negation_be_valid.rb#40
  def not_to?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/negation_be_valid.rb#49
  def on_send(node); end

  private

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/negation_be_valid.rb#78
  def message(_matcher); end

  # @return [Boolean]
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/negation_be_valid.rb#61
  def offense?(node); end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/negation_be_valid.rb#74
  def offense_range(node); end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/negation_be_valid.rb#95
  def replaced_matcher; end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/negation_be_valid.rb#82
  def replaced_runner; end
end

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/negation_be_valid.rb#36
RuboCop::Cop::RSpecRails::NegationBeValid::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/negation_be_valid.rb#37
RuboCop::Cop::RSpecRails::NegationBeValid::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

# Prefer to travel in `before` rather than `around`.
#
# @example
#   # bad
#   around do |example|
#   freeze_time do
#   example.run
#   end
#   end
#
#   # bad
#   around do |example|
#   freeze_time(&example)
#   end
#
#   # good
#   before { freeze_time }
#
# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/travel_around.rb#32
class RuboCop::Cop::RSpecRails::TravelAround < ::RuboCop::Cop::Base
  extend ::RuboCop::Cop::AutoCorrector

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/travel_around.rb#44
  def extract_run_in_travel(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/travel_around.rb#53
  def extract_travel_with_block_pass(param0); end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/travel_around.rb#60
  def match_around_each?(param0 = T.unsafe(nil)); end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/travel_around.rb#67
  def on_block(node); end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/travel_around.rb#75
  def on_numblock(node); end

  private

  # @param node [RuboCop::AST::BlockNode]
  # @return [RuboCop::AST::BlockNode, nil]
  #
  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/travel_around.rb#105
  def extract_surrounding_around_block(node); end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/travel_around.rb#79
  def run_in_travel(node, run_node); end

  # source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/travel_around.rb#90
  def travel_with_block_pass(node, lvar); end
end

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/travel_around.rb#35
RuboCop::Cop::RSpecRails::TravelAround::MSG = T.let(T.unsafe(nil), String)

# source://rubocop-rspec_rails//lib/rubocop/cop/rspec_rails/travel_around.rb#37
RuboCop::Cop::RSpecRails::TravelAround::TRAVEL_METHOD_NAMES = T.let(T.unsafe(nil), Set)

# source://rubocop-rspec_rails//lib/rubocop/rspec_rails/plugin.rb#6
module RuboCop::RSpecRails; end

# A plugin that integrates RuboCop RSpecRails with RuboCop's plugin system.
#
# source://rubocop-rspec_rails//lib/rubocop/rspec_rails/plugin.rb#8
class RuboCop::RSpecRails::Plugin < ::LintRoller::Plugin
  # :nocov:
  #
  # source://rubocop-rspec_rails//lib/rubocop/rspec_rails/plugin.rb#10
  def about; end

  # source://rubocop-rspec_rails//lib/rubocop/rspec_rails/plugin.rb#24
  def rules(_context); end

  # :nocov:
  #
  # @return [Boolean]
  #
  # source://rubocop-rspec_rails//lib/rubocop/rspec_rails/plugin.rb#20
  def supported?(context); end
end

# Version information for the RSpec Rails RuboCop plugin.
#
# source://rubocop-rspec_rails//lib/rubocop/rspec_rails/version.rb#6
module RuboCop::RSpecRails::Version; end

# source://rubocop-rspec_rails//lib/rubocop/rspec_rails/version.rb#7
RuboCop::RSpecRails::Version::STRING = T.let(T.unsafe(nil), String)

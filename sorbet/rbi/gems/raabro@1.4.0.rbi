# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `raabro` gem.
# Please instead update this file by running `bin/tapioca gem raabro`.

module Raabro
  extend ::Raabro::ModuleMethods

  class << self
    def included(target); end

    # Black       0;30     Dark Gray     1;30
    # Blue        0;34     Light Blue    1;34
    # Green       0;32     Light Green   1;32
    # Cyan        0;36     Light Cyan    1;36
    # Red         0;31     Light Red     1;31
    # Purple      0;35     Light Purple  1;35
    # Brown       0;33     Yellow        1;33
    # Light Gray  0;37     White         1;37
    def pp(tree, depth = T.unsafe(nil), opts = T.unsafe(nil)); end
  end
end

class Raabro::Input
  # @return [Input] a new instance of Input
  def initialize(string, offset = T.unsafe(nil), options = T.unsafe(nil)); end

  def at(i); end
  def match(str_or_regex); end

  # Returns the value of attribute offset.
  def offset; end

  # Sets the attribute offset
  #
  # @param value the value to set the attribute offset to.
  def offset=(_arg0); end

  # Returns the value of attribute options.
  def options; end

  # Returns the value of attribute string.
  def string; end

  # Sets the attribute string
  #
  # @param value the value to set the attribute string to.
  def string=(_arg0); end

  def tring(l = T.unsafe(nil)); end
end

module Raabro::ModuleMethods
  def _match(name, input, parter, regex_or_string); end
  def _narrow(parser); end
  def _parse(parser, input); end
  def _quantify(parser); end
  def all(name, input, parser); end
  def alt(name, input, *parsers); end
  def altg(name, input, *parsers); end
  def eseq(name, input, startpa, eltpa, seppa = T.unsafe(nil), endpa = T.unsafe(nil)); end
  def jseq(name, input, startpa, eltpa, seppa = T.unsafe(nil), endpa = T.unsafe(nil)); end

  # Returns the value of attribute last.
  def last; end

  # Sets the attribute last
  #
  # @param value the value to set the attribute last to.
  def last=(_arg0); end

  def make_includable; end
  def method_added(name); end
  def nott(name, input, parser); end
  def parse(input, opts = T.unsafe(nil)); end
  def ren(name, input, parser); end
  def rename(name, input, parser); end
  def rep(name, input, parser, min, max = T.unsafe(nil)); end
  def reparse_for_error(input, opts, t); end
  def rewrite(tree); end
  def rewrite_(tree); end
  def rex(name, input, regex_or_string); end
  def seq(name, input, *parsers); end
  def str(name, input, string); end
end

class Raabro::Tree
  # @return [Tree] a new instance of Tree
  def initialize(name, parter, input); end

  def c0; end
  def c1; end
  def c2; end
  def c3; end
  def c4; end

  # Returns the value of attribute children.
  def children; end

  # Sets the attribute children
  #
  # @param value the value to set the attribute children to.
  def children=(_arg0); end

  def clast; end

  # @return [Boolean]
  def empty?; end

  def even_children; end
  def extract_error; end
  def gather(name = T.unsafe(nil), acc = T.unsafe(nil)); end

  # Returns the value of attribute input.
  def input; end

  # Sets the attribute input
  #
  # @param value the value to set the attribute input to.
  def input=(_arg0); end

  # Returns the value of attribute length.
  def length; end

  # Sets the attribute length
  #
  # @param value the value to set the attribute length to.
  def length=(_arg0); end

  def line_and_column(offset); end
  def lookup(name = T.unsafe(nil)); end

  # Not "lookup all errors" but "lookup all error", in other
  # words lookup the point up until which the parser stopped (not
  # consuming all the input)
  def lookup_all_error; end

  def lookup_error(stack = T.unsafe(nil)); end

  # Returns the value of attribute name.
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  def name=(_arg0); end

  def nonstring(l = T.unsafe(nil)); end
  def odd_children; end

  # Returns the value of attribute offset.
  def offset; end

  # Sets the attribute offset
  #
  # @param value the value to set the attribute offset to.
  def offset=(_arg0); end

  # Returns the value of attribute parter.
  def parter; end

  # Sets the attribute parter
  #
  # @param value the value to set the attribute parter to.
  def parter=(_arg0); end

  def prune!; end

  # ((-1 error,)) 0 nomatch, 1 success
  def result; end

  # ((-1 error,)) 0 nomatch, 1 success
  def result=(_arg0); end

  def strim; end
  def strind; end
  def string; end
  def stringd; end
  def stringpd; end
  def strinp; end
  def strinpd; end
  def subgather(name = T.unsafe(nil), acc = T.unsafe(nil)); end
  def sublookup(name = T.unsafe(nil)); end
  def successful_children; end
  def symbod; end
  def symbol; end
  def symbold; end
  def to_a(opts = T.unsafe(nil)); end
  def to_s(depth = T.unsafe(nil), io = T.unsafe(nil)); end
  def visual(line, column); end
end

Raabro::VERSION = T.let(T.unsafe(nil), String)

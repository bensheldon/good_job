# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `async-pool` gem.
# Please instead update this file by running `bin/tapioca gem async-pool`.

# source://async-pool//lib/async/pool/controller.rb#13
module Async; end

# source://async-pool//lib/async/pool/controller.rb#14
module Async::Pool; end

# source://async-pool//lib/async/pool/controller.rb#15
class Async::Pool::Controller
  # @return [Controller] a new instance of Controller
  #
  # source://async-pool//lib/async/pool/controller.rb#20
  def initialize(constructor, limit: T.unsafe(nil), concurrency: T.unsafe(nil), policy: T.unsafe(nil)); end

  # source://async-pool//lib/async/pool/controller.rb#94
  def acquire; end

  # Whether the pool has any active resources.
  #
  # @return [Boolean]
  #
  # source://async-pool//lib/async/pool/controller.rb#67
  def active?; end

  # Whether there are available resources, i.e. whether {#acquire} can reuse an existing resource.
  #
  # @return [Boolean]
  #
  # source://async-pool//lib/async/pool/controller.rb#81
  def available?; end

  # Whether there are resources which are currently in use.
  #
  # @return [Boolean]
  #
  # source://async-pool//lib/async/pool/controller.rb#72
  def busy?; end

  # source://async-pool//lib/async/pool/controller.rb#120
  def close; end

  # source://async-pool//lib/async/pool/controller.rb#48
  def concurrency; end

  # source://async-pool//lib/async/pool/controller.rb#52
  def concurrency=(value); end

  # Returns the value of attribute constructor.
  #
  # source://async-pool//lib/async/pool/controller.rb#42
  def constructor; end

  # @return [Boolean]
  #
  # source://async-pool//lib/async/pool/controller.rb#90
  def empty?; end

  # Returns the value of attribute limit.
  #
  # source://async-pool//lib/async/pool/controller.rb#45
  def limit; end

  # Sets the attribute limit
  #
  # @param value the value to set the attribute limit to.
  #
  # source://async-pool//lib/async/pool/controller.rb#45
  def limit=(_arg0); end

  # Returns the value of attribute policy.
  #
  # source://async-pool//lib/async/pool/controller.rb#57
  def policy; end

  # Sets the attribute policy
  #
  # @param value the value to set the attribute policy to.
  #
  # source://async-pool//lib/async/pool/controller.rb#57
  def policy=(_arg0); end

  # Retire (and close) all unused resources. If a block is provided, it should implement the desired functionality for unused resources.
  #
  # @param retain [Integer] the minimum number of resources to retain.
  #
  # source://async-pool//lib/async/pool/controller.rb#147
  def prune(retain = T.unsafe(nil)); end

  # Make the resource resources and let waiting tasks know that there is something resources.
  #
  # source://async-pool//lib/async/pool/controller.rb#107
  def release(resource); end

  # Returns the value of attribute resources.
  #
  # source://async-pool//lib/async/pool/controller.rb#60
  def resources; end

  # source://async-pool//lib/async/pool/controller.rb#179
  def retire(resource); end

  # source://async-pool//lib/async/pool/controller.rb#62
  def size; end

  # source://async-pool//lib/async/pool/controller.rb#136
  def to_s; end

  # Wait until a pool resource has been freed.
  #
  # source://async-pool//lib/async/pool/controller.rb#86
  def wait; end

  protected

  # source://async-pool//lib/async/pool/controller.rb#218
  def availability_string; end

  # source://async-pool//lib/async/pool/controller.rb#287
  def available_resource; end

  # source://async-pool//lib/async/pool/controller.rb#268
  def create_resource; end

  # def usage
  # 	@resources.count{|resource, usage| usage > 0}
  # end
  #
  # def free
  # 	@resources.count{|resource, usage| usage == 0}
  # end
  #
  # source://async-pool//lib/async/pool/controller.rb#232
  def reuse(resource); end

  # source://async-pool//lib/async/pool/controller.rb#193
  def start_gardener; end

  # source://async-pool//lib/async/pool/controller.rb#214
  def usage_string; end

  # source://async-pool//lib/async/pool/controller.rb#252
  def wait_for_resource; end

  private

  # source://async-pool//lib/async/pool/controller.rb#302
  def get_resource; end

  class << self
    # source://async-pool//lib/async/pool/controller.rb#16
    def wrap(**options, &block); end
  end
end

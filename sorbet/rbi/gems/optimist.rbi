# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/optimist/all/optimist.rbi
#
# optimist-3.0.1

module Optimist
  def die(arg, msg = nil, error_code = nil); end
  def educate; end
  def options(args = nil, *a, &b); end
  def self.die(arg, msg = nil, error_code = nil); end
  def self.educate; end
  def self.options(args = nil, *a, &b); end
  def self.with_standard_exception_handling(parser); end
  def with_standard_exception_handling(parser); end
end
class Optimist::CommandlineError < StandardError
  def error_code; end
  def initialize(msg, error_code = nil); end
end
class Optimist::HelpNeeded < StandardError
end
class Optimist::VersionNeeded < StandardError
end
class Optimist::Parser
  def banner(s); end
  def cloaker(&b); end
  def collect_argument_parameters(args, start_at); end
  def conflicts(*syms); end
  def depends(*syms); end
  def die(arg, msg = nil, error_code = nil); end
  def each_arg(args); end
  def educate(stream = nil); end
  def educate_on_error; end
  def ignore_invalid_options; end
  def ignore_invalid_options=(arg0); end
  def initialize(*a, &b); end
  def leftovers; end
  def legacy_width; end
  def opt(name, desc = nil, opts = nil, &b); end
  def parse(cmdline = nil); end
  def resolve_default_short_options!; end
  def self.register(lookup, klass); end
  def self.registry_getopttype(type); end
  def specs; end
  def stop_on(*words); end
  def stop_on_unknown; end
  def synopsis(s = nil); end
  def text(s); end
  def usage(s = nil); end
  def version(s = nil); end
  def width; end
  def wrap(str, opts = nil); end
  def wrap_line(str, opts = nil); end
end
class Optimist::Option
  def array_default?; end
  def callback; end
  def default; end
  def default=(arg0); end
  def desc; end
  def description_with_default; end
  def educate; end
  def flag?; end
  def initialize; end
  def long; end
  def long=(arg0); end
  def multi; end
  def multi?; end
  def multi_arg?; end
  def multi_given=(arg0); end
  def name; end
  def name=(arg0); end
  def opts(key); end
  def opts=(o); end
  def parse(_paramlist, _neg_given); end
  def required?; end
  def self.create(name, desc = nil, opts = nil, settings = nil); end
  def self.get_klass_from_default(opts, opttype); end
  def self.get_type_from_disdef(optdef, opttype, disambiguated_default); end
  def self.handle_long_opt(lopt, name); end
  def self.handle_short_opt(sopt); end
  def self.register_alias(*alias_keys); end
  def short; end
  def short=(arg0); end
  def short?; end
  def single_arg?; end
  def type_format; end
end
class Optimist::BooleanOption < Optimist::Option
  def flag?; end
  def initialize; end
  def parse(_paramlist, neg_given); end
end
class Optimist::FloatOption < Optimist::Option
  def parse(paramlist, _neg_given); end
  def type_format; end
end
class Optimist::IntegerOption < Optimist::Option
  def parse(paramlist, _neg_given); end
  def type_format; end
end
class Optimist::IOOption < Optimist::Option
  def parse(paramlist, _neg_given); end
  def type_format; end
end
class Optimist::StringOption < Optimist::Option
  def parse(paramlist, _neg_given); end
  def type_format; end
end
class Optimist::DateOption < Optimist::Option
  def parse(paramlist, _neg_given); end
  def type_format; end
end
class Optimist::IntegerArrayOption < Optimist::IntegerOption
  def multi_arg?; end
  def type_format; end
end
class Optimist::FloatArrayOption < Optimist::FloatOption
  def multi_arg?; end
  def type_format; end
end
class Optimist::StringArrayOption < Optimist::StringOption
  def multi_arg?; end
  def type_format; end
end
class Optimist::DateArrayOption < Optimist::DateOption
  def multi_arg?; end
  def type_format; end
end
class Optimist::IOArrayOption < Optimist::IOOption
  def multi_arg?; end
  def type_format; end
end

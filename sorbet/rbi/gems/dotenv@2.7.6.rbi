# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `dotenv` gem.
# Please instead update this file by running `bin/tapioca gem dotenv`.

# The top level Dotenv module. The entrypoint for the application logic.
module Dotenv
  private

  def ignoring_nonexistent_files; end
  def instrument(name, payload = T.unsafe(nil), &block); end
  def load(*filenames); end

  # same as `load`, but raises Errno::ENOENT if any files don't exist
  def load!(*filenames); end

  # same as `load`, but will override existing values in `ENV`
  def overload(*filenames); end

  # same as `overload`, but raises Errno::ENOENT if any files don't exist
  def overload!(*filenames); end

  # returns a hash of parsed key/value pairs but does not modify ENV
  def parse(*filenames); end

  def require_keys(*keys); end

  # Internal: Helper to expand list of filenames.
  #
  # Returns a hash of all the loaded environment variables.
  def with(*filenames); end

  class << self
    def ignoring_nonexistent_files; end
    def instrument(name, payload = T.unsafe(nil), &block); end

    # Returns the value of attribute instrumenter.
    def instrumenter; end

    # Sets the attribute instrumenter
    #
    # @param value the value to set the attribute instrumenter to.
    def instrumenter=(_arg0); end

    def load(*filenames); end

    # same as `load`, but raises Errno::ENOENT if any files don't exist
    def load!(*filenames); end

    # same as `load`, but will override existing values in `ENV`
    def overload(*filenames); end

    # same as `overload`, but raises Errno::ENOENT if any files don't exist
    def overload!(*filenames); end

    # returns a hash of parsed key/value pairs but does not modify ENV
    def parse(*filenames); end

    # @raise [MissingKeys]
    def require_keys(*keys); end

    # Internal: Helper to expand list of filenames.
    #
    # Returns a hash of all the loaded environment variables.
    def with(*filenames); end
  end
end

# This class inherits from Hash and represents the environment into which
# Dotenv will load key value pairs from a file.
class Dotenv::Environment < ::Hash
  # @return [Environment] a new instance of Environment
  def initialize(filename, is_load = T.unsafe(nil)); end

  def apply; end
  def apply!; end

  # Returns the value of attribute filename.
  def filename; end

  def load(is_load = T.unsafe(nil)); end
  def read; end
end

class Dotenv::Error < ::StandardError; end
class Dotenv::FormatError < ::SyntaxError; end

class Dotenv::MissingKeys < ::Dotenv::Error
  # @return [MissingKeys] a new instance of MissingKeys
  def initialize(keys); end
end

# This class enables parsing of a string for key value pairs to be returned
# and stored in the Environment. It allows for variable substitutions and
# exporting of variables.
class Dotenv::Parser
  # @return [Parser] a new instance of Parser
  def initialize(string, is_load = T.unsafe(nil)); end

  def call; end

  private

  def expand_newlines(value); end
  def parse_line(line); end
  def parse_value(value); end
  def unescape_characters(value); end

  # @return [Boolean]
  def variable_not_set?(line); end

  class << self
    def call(string, is_load = T.unsafe(nil)); end

    # Returns the value of attribute substitutions.
    def substitutions; end
  end
end

Dotenv::Parser::LINE = T.let(T.unsafe(nil), Regexp)
module Dotenv::Substitutions; end

# Substitute shell commands in a value.
#
#   SHA=$(git rev-parse HEAD)
module Dotenv::Substitutions::Command
  class << self
    def call(value, _env, _is_load); end
  end
end

# Substitute variables in a value.
#
#   HOST=example.com
#   URL="https://$HOST"
module Dotenv::Substitutions::Variable
  class << self
    def call(value, env, is_load); end

    private

    def substitute(match, variable, env); end
  end
end

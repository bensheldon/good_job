# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `mdl` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: strict

module Kramdown
  class << self
    def data_dir; end
  end
end

module Kramdown::Parser
end

class Kramdown::Parser::MarkdownLint < ::Kramdown::Parser::Kramdown
  def initialize(source, options); end
end

Kramdown::Parser::MarkdownLint::FENCED_CODEBLOCK_MATCH = T.let(T.unsafe(nil), Regexp)

Kramdown::VERSION = T.let(T.unsafe(nil), String)

module MarkdownLint
  class << self
    def run(argv = T.unsafe(nil)); end
  end
end

class MarkdownLint::CLI
  include(::Mixlib::CLI)
  extend(::Mixlib::CLI::ClassMethods)
  extend(::Mixlib::CLI::InheritMethods)

  def run(argv = T.unsafe(nil)); end

  class << self
    def probe_config_file(path); end
    def toggle_list(parts, to_sym = T.unsafe(nil)); end
  end
end

MarkdownLint::CLI::CONFIG_FILE = T.let(T.unsafe(nil), String)

module MarkdownLint::Config
  extend(::Mixlib::Config)

  class << self
    def config_context_hashes; end
    def config_context_hashes=(_arg0); end
    def config_context_lists; end
    def config_context_lists=(_arg0); end
    def config_contexts; end
    def config_contexts=(_arg0); end
    def config_parent; end
    def config_parent=(_arg0); end
    def configurables; end
    def configurables=(_arg0); end
    def configuration; end
    def configuration=(_arg0); end
    def style(*args, &block); end
    def style=(value); end
  end
end

class MarkdownLint::Doc
  def initialize(text, ignore_front_matter = T.unsafe(nil)); end

  def element_line(element); end
  def element_linenumber(element); end
  def element_linenumbers(elements); end
  def element_lines(elements); end
  def elements; end
  def extract_text(element, prefix = T.unsafe(nil), restore_whitespace = T.unsafe(nil)); end
  def find_type(type, nested = T.unsafe(nil)); end
  def find_type_elements(type, nested = T.unsafe(nil), elements = T.unsafe(nil)); end
  def find_type_elements_except(type, nested_except = T.unsafe(nil), elements = T.unsafe(nil)); end
  def header_style(header); end
  def indent_for(line); end
  def lines; end
  def list_style(item); end
  def matching_lines(regex); end
  def matching_text_element_lines(regex, exclude_nested = T.unsafe(nil)); end
  def offset; end
  def parsed; end

  private

  def add_annotations(elements, level = T.unsafe(nil), parent = T.unsafe(nil)); end

  class << self
    def new_from_file(filename, ignore_front_matter = T.unsafe(nil)); end
  end
end

class MarkdownLint::Rule
  def initialize(id, description, block); end

  def aliases(*aliases); end
  def check(&block); end
  def description; end
  def description=(_arg0); end
  def id; end
  def id=(_arg0); end
  def params(params = T.unsafe(nil)); end
  def tags(*tags); end
end

class MarkdownLint::RuleSet
  def initialize; end

  def load(rules_file); end
  def load_default; end
  def rule(id, description, &block); end
  def rules; end
end

class MarkdownLint::Style
  def initialize(all_rules); end

  def all; end
  def exclude_rule(id); end
  def exclude_tag(tag); end
  def rule(id, params = T.unsafe(nil)); end
  def rules; end
  def tag(tag); end

  class << self
    def load(style_file, rules); end
  end
end

MarkdownLint::VERSION = T.let(T.unsafe(nil), String)

# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/protocol-http1/all/protocol-http1.rbi
#
# protocol-http1-0.14.2

module Protocol
end
module Protocol::HTTP1
end
module Protocol::HTTP1::Reason
end
class Protocol::HTTP1::Error < Protocol::HTTP::Error
end
class Protocol::HTTP1::InvalidRequest < Protocol::HTTP1::Error
end
class Protocol::HTTP1::BadRequest < Protocol::HTTP1::Error
end
class Protocol::HTTP1::BadHeader < Protocol::HTTP1::Error
end
class Protocol::HTTP1::BadResponse < Protocol::HTTP1::Error
end
module Protocol::HTTP1::Body
end
class Protocol::HTTP1::Body::Chunked < Protocol::HTTP::Body::Readable
  def close(error = nil); end
  def empty?; end
  def initialize(stream, headers); end
  def inspect; end
  def read; end
  def read_line; end
  def read_line?; end
  def read_trailer; end
end
class Protocol::HTTP1::Body::Fixed < Protocol::HTTP::Body::Readable
  def close(error = nil); end
  def empty?; end
  def initialize(stream, length); end
  def inspect; end
  def join; end
  def length; end
  def read; end
  def remaining; end
end
class Protocol::HTTP1::Body::Remainder < Protocol::HTTP::Body::Readable
  def call(stream); end
  def close(error = nil); end
  def empty?; end
  def initialize(stream); end
  def inspect; end
  def join; end
  def read; end
end
class Protocol::HTTP1::Connection
  def close; end
  def count; end
  def hijack!; end
  def initialize(stream, persistent = nil); end
  def persistent; end
  def persistent?(version, method, headers); end
  def read_body(headers, remainder = nil); end
  def read_chunked_body(headers); end
  def read_fixed_body(length); end
  def read_head_body(length); end
  def read_headers; end
  def read_line; end
  def read_line?; end
  def read_remainder_body; end
  def read_request; end
  def read_request_body(method, headers); end
  def read_response(method); end
  def read_response_body(method, status, headers); end
  def read_tunnel_body; end
  def read_upgrade_body(protocol); end
  def stream; end
  def upgrade?(headers); end
  def write_body(version, body, head = nil, trailer = nil); end
  def write_body_and_close(body, head); end
  def write_chunked_body(body, head, trailer = nil); end
  def write_connection_header(version); end
  def write_empty_body(body); end
  def write_fixed_length_body(body, length, head); end
  def write_headers(headers); end
  def write_request(authority, method, path, version, headers); end
  def write_response(version, status, headers, reason = nil); end
  def write_tunnel_body(version, body = nil); end
  def write_upgrade_body(protocol, body = nil); end
  def write_upgrade_header(upgrade); end
end

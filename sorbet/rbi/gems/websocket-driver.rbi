# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/websocket-driver/all/websocket-driver.rbi
#
# websocket-driver-0.7.5

module WebSocket::Mask
  def self.mask(arg0, arg1); end
end
module WebSocket
end
class WebSocket::Driver
  def add_extension(extension); end
  def binary(message); end
  def close(reason = nil, code = nil); end
  def fail(type, message); end
  def fail_handshake(error); end
  def initialize(socket, options = nil); end
  def open; end
  def ping(*args); end
  def pong(*args); end
  def protocol; end
  def queue(message); end
  def ready_state; end
  def self.client(socket, options = nil); end
  def self.encode(data, encoding = nil); end
  def self.rack(socket, options = nil); end
  def self.server(socket, options = nil); end
  def self.validate_options(options, valid_keys); end
  def self.websocket?(env); end
  def set_header(name, value); end
  def start; end
  def state; end
  def text(message); end
  include WebSocket::Driver::EventEmitter
end
module WebSocket::Driver::EventEmitter
  def add_listener(event, callable = nil, &block); end
  def emit(event, *args); end
  def initialize; end
  def listener_count(event); end
  def listeners(event); end
  def on(event, callable = nil, &block); end
  def remove_all_listeners(event = nil); end
  def remove_listener(event, callable = nil, &block); end
end
class WebSocket::Driver::ConnectEvent < Struct
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class WebSocket::Driver::OpenEvent < Struct
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class WebSocket::Driver::MessageEvent < Struct
  def data; end
  def data=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class WebSocket::Driver::PingEvent < Struct
  def data; end
  def data=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class WebSocket::Driver::PongEvent < Struct
  def data; end
  def data=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class WebSocket::Driver::CloseEvent < Struct
  def code; end
  def code=(_); end
  def reason; end
  def reason=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
end
class WebSocket::Driver::ProtocolError < StandardError
end
class WebSocket::Driver::URIError < ArgumentError
end
class WebSocket::Driver::ConfigurationError < ArgumentError
end

# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/console/all/console.rbi
#
# console-1.13.1

module Console
  def logger; end
  def logger=(logger); end
  def self.extended(klass); end
  def self.logger; end
  def self.logger=(instance); end
end
class Console::Buffer < StringIO
  def <<(*args, prefix: nil); end
  def initialize(prefix = nil); end
  def puts(*args, prefix: nil); end
end
module Console::Event
end
class Console::Event::Generic
  def as_json; end
  def format(buffer, terminal); end
  def self.register(terminal); end
  def to_h; end
end
class Console::Event::Spawn < Console::Event::Generic
  def arguments; end
  def chdir_string(options); end
  def environment; end
  def format(output, terminal, verbose); end
  def initialize(environment, *arguments, **options); end
  def options; end
  def self.for(*arguments, **options); end
  def self.register(terminal); end
  def to_h; end
end
class Console::Event::Failure < Console::Event::Generic
  def exception; end
  def format(output, terminal, verbose); end
  def format_exception(exception, prefix, output, terminal, verbose); end
  def initialize(exception, root = nil); end
  def root; end
  def self.current_working_directory; end
  def self.for(exception); end
  def self.register(terminal); end
  def to_h; end
end
module Console::Clock
  def self.formatted_duration(duration); end
  def self.now; end
end
class Console::Event::Metric < Console::Event::Generic
  def format(output, terminal, verbose); end
  def initialize(name, value, **tags); end
  def name; end
  def self.[](**parameters); end
  def tags; end
  def to_h; end
  def value; end
  def value_string; end
end
class Console::Event::Progress < Console::Event::Generic
  def bar(value = nil, width = nil); end
  def current; end
  def format(output, terminal, verbose); end
  def initialize(current, total); end
  def self.register(terminal); end
  def to_h; end
  def total; end
  def value; end
end
module Console::Terminal
  def self.for(io); end
  def self.start_at!(environment = nil); end
end
class Console::Terminal::Text
  def [](key); end
  def []=(key, value); end
  def colors?; end
  def initialize(output); end
  def print(*arguments); end
  def print_line(*arguments); end
  def puts(*arguments, style: nil); end
  def reset; end
  def style(foreground, background = nil, *attributes); end
  def write(*arguments, style: nil); end
end
class Console::Terminal::XTerm < Console::Terminal::Text
  def colors?; end
  def reset; end
  def size; end
  def style(foreground, background = nil, *attributes); end
end
class Console::Terminal::Logger
  def build_prefix(name); end
  def call(subject = nil, *arguments, name: nil, severity: nil, **options, &block); end
  def default_suffix(object = nil); end
  def format_argument(argument, output); end
  def format_object_subject(severity, prefix, subject, output); end
  def format_options(options, output); end
  def format_string_subject(severity, prefix, subject, output); end
  def format_subject(severity, prefix, subject, buffer); end
  def format_value(value, output); end
  def initialize(io = nil, verbose: nil, start_at: nil, format: nil, **options); end
  def io; end
  def register_defaults(terminal); end
  def start; end
  def terminal; end
  def time_offset_prefix; end
  def verbose!(value = nil); end
  def verbose; end
  def verbose=(arg0); end
end
module Console::Output
  def self.new(output = nil, env = nil, **options); end
end
module Console::Output::XTerm
  def self.new(output, **options); end
end
class Console::Filter
  def all!; end
  def call(*arguments, **options, &block); end
  def disable(subject); end
  def enable(subject, level = nil); end
  def enabled?(subject, level = nil); end
  def initialize(output, verbose: nil, level: nil, enabled: nil, **options); end
  def level; end
  def level=(level); end
  def off!; end
  def options; end
  def options=(arg0); end
  def output; end
  def output=(arg0); end
  def self.[](**levels); end
  def subjects; end
  def verbose!(value = nil); end
  def verbose; end
  def with(level: nil, verbose: nil, **options); end
end
module Console::Serialized
end
class Console::Serialized::Logger
  def call(subject = nil, *arguments, severity: nil, **options, &block); end
  def dump(record); end
  def format; end
  def initialize(io = nil, format: nil, verbose: nil, **options); end
  def io; end
  def start; end
  def verbose!(value = nil); end
end
module Console::Output::JSON
  def self.new(output, **options); end
end
module Console::Output::Default
  def self.new(output, **options); end
end
module Console::Output::Text
  def self.new(output, **options); end
end
class Console::Event::Enter < Console::Event::Generic
  def format(output, terminal, verbose); end
  def initialize(name); end
end
class Console::Event::Exit < Console::Event::Metric
  def value_string; end
end
class Console::Measure
  def duration(name, &block); end
  def initialize(output, subject, **tags); end
  def tags; end
end
class Console::Progress
  def average_duration; end
  def current; end
  def duration; end
  def duration_since_last_output; end
  def estimated_remaining_time; end
  def increment(amount = nil); end
  def initialize(output, subject, total = nil, minimum_output_duration: nil); end
  def mark(*arguments); end
  def output?; end
  def progress; end
  def remaining; end
  def resize(total); end
  def self.now; end
  def subject; end
  def to_s; end
  def total; end
end
class Console::Resolver
  def bind(names, &block); end
  def initialize; end
  def resolve(trace_point); end
  def self.default_resolver(logger, env = nil); end
  def waiting?; end
end
class Anonymous_Console_Filter_23 < Console::Filter
  def debug!; end
  def debug(subject = nil, *arguments, **options, &block); end
  def debug?; end
  def error!; end
  def error(subject = nil, *arguments, **options, &block); end
  def error?; end
  def fatal!; end
  def fatal(subject = nil, *arguments, **options, &block); end
  def fatal?; end
  def info!; end
  def info(subject = nil, *arguments, **options, &block); end
  def info?; end
  def warn!; end
  def warn(subject = nil, *arguments, **options, &block); end
  def warn?; end
end
class Console::Logger < Anonymous_Console_Filter_23
  def failure(subject, exception, *arguments, &block); end
  def initialize(output, **options); end
  def measure(subject, name = nil, **tags, &block); end
  def progress(subject, total, **options); end
  def self.default_log_level(env = nil); end
  def self.default_logger(output = nil, env = nil, **options); end
  def self.local; end
  def self.verbose?(env = nil); end
  extend Fiber::Local
end

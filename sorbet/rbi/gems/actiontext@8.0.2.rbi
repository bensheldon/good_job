# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `actiontext` gem.
# Please instead update this file by running `bin/tapioca gem actiontext`.


# :markup: markdown
# :include: ../README.md
#
# source://actiontext//lib/action_text/gem_version.rb#5
module ActionText
  extend ::ActiveSupport::Autoload

  class << self
    # source://actiontext//lib/action_text/deprecator.rb#6
    def deprecator; end

    # Returns the currently loaded version of Action Text as a `Gem::Version`.
    #
    # source://actiontext//lib/action_text/gem_version.rb#7
    def gem_version; end

    # source://actiontext//lib/action_text.rb#47
    def html_document_class; end

    # source://actiontext//lib/action_text.rb#53
    def html_document_fragment_class; end

    # source://actiontext//lib/action_text/engine.rb#14
    def railtie_helpers_paths; end

    # source://actiontext//lib/action_text/engine.rb#14
    def railtie_namespace; end

    # source://actiontext//lib/action_text/engine.rb#14
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # source://actiontext//lib/action_text/engine.rb#14
    def table_name_prefix; end

    # source://actiontext//lib/action_text/engine.rb#14
    def use_relative_model_naming?; end

    # Returns the currently loaded version of Action Text as a `Gem::Version`.
    #
    # source://actiontext//lib/action_text/version.rb#9
    def version; end
  end
end

# # Action Text Attachable
#
# Include this module to make a record attachable to an ActionText::Content.
#
#     class Person < ApplicationRecord
#       include ActionText::Attachable
#     end
#
#     person = Person.create! name: "Javan"
#     html = %Q(<action-text-attachment sgid="#{person.attachable_sgid}"></action-text-attachment>)
#     content = ActionText::Content.new(html)
#     content.attachables # => [person]
#
# source://actiontext//lib/action_text/attachable.rb#18
module ActionText::Attachable
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionText::Attachable::ClassMethods

  # source://actiontext//lib/action_text/attachable.rb#83
  def attachable_content_type; end

  # source://actiontext//lib/action_text/attachable.rb#87
  def attachable_filename; end

  # source://actiontext//lib/action_text/attachable.rb#91
  def attachable_filesize; end

  # source://actiontext//lib/action_text/attachable.rb#95
  def attachable_metadata; end

  # Returns the Signed Global ID for the attachable. The purpose of the ID is set
  # to 'attachable' so it can't be reused for other purposes.
  #
  # source://actiontext//lib/action_text/attachable.rb#79
  def attachable_sgid; end

  # @return [Boolean]
  #
  # source://actiontext//lib/action_text/attachable.rb#99
  def previewable_attachable?; end

  # Returns the path to the partial that is used for rendering the attachable.
  # Defaults to `to_partial_path`.
  #
  # Override to render a different partial:
  #
  #     class User < ApplicationRecord
  #       def to_attachable_partial_path
  #         "users/attachable"
  #       end
  #     end
  #
  # source://actiontext//lib/action_text/attachable.rb#127
  def to_attachable_partial_path; end

  # source://actiontext//lib/action_text/attachable.rb#131
  def to_rich_text_attributes(attributes = T.unsafe(nil)); end

  # Returns the path to the partial that is used for rendering the attachable in
  # Trix. Defaults to `to_partial_path`.
  #
  # Override to render a different partial:
  #
  #     class User < ApplicationRecord
  #       def to_trix_content_attachment_partial_path
  #         "users/trix_content_attachment"
  #       end
  #     end
  #
  # source://actiontext//lib/action_text/attachable.rb#113
  def to_trix_content_attachment_partial_path; end

  private

  # source://actiontext//lib/action_text/attachable.rb#144
  def attribute_names_for_serialization; end

  # source://actiontext//lib/action_text/attachable.rb#148
  def read_attribute_for_serialization(key); end

  class << self
    # source://actiontext//lib/action_text/attachable.rb#43
    def from_attachable_sgid(sgid, options = T.unsafe(nil)); end

    # Extracts the `ActionText::Attachable` from the attachment HTML node:
    #
    #     person = Person.create! name: "Javan"
    #     html = %Q(<action-text-attachment sgid="#{person.attachable_sgid}"></action-text-attachment>)
    #     fragment = ActionText::Fragment.wrap(html)
    #     attachment_node = fragment.find_all(ActionText::Attachment.tag_name).first
    #     ActionText::Attachable.from_node(attachment_node) # => person
    #
    # source://actiontext//lib/action_text/attachable.rb#31
    def from_node(node); end

    private

    # source://actiontext//lib/action_text/attachable.rb#50
    def attachable_from_sgid(sgid); end
  end
end

# source://actiontext//lib/action_text/attachable.rb#57
module ActionText::Attachable::ClassMethods
  # source://actiontext//lib/action_text/attachable.rb#58
  def from_attachable_sgid(sgid); end

  # source://actiontext//lib/action_text/attachable.rb#72
  def to_missing_attachable_partial_path; end
end

# source://actiontext//lib/action_text/attachable.rb#21
ActionText::Attachable::LOCATOR_NAME = T.let(T.unsafe(nil), String)

# source://actiontext//lib/action_text.rb#30
module ActionText::Attachables
  extend ::ActiveSupport::Autoload
end

# source://actiontext//lib/action_text/attachables/content_attachment.rb#7
class ActionText::Attachables::ContentAttachment
  include ::ActiveModel::Validations
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Conversion
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::API
  include ::ActiveModel::Access
  include ::ActiveModel::Model
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods

  # source://actiontext//lib/action_text/attachables/content_attachment.rb#8
  def __callbacks; end

  # source://actiontext//lib/action_text/attachables/content_attachment.rb#8
  def _run_validate_callbacks(&block); end

  # source://actiontext//lib/action_text/attachables/content_attachment.rb#8
  def _validate_callbacks; end

  # source://actiontext//lib/action_text/attachables/content_attachment.rb#8
  def _validators; end

  # source://actiontext//lib/action_text/attachables/content_attachment.rb#8
  def _validators?; end

  # source://actiontext//lib/action_text/attachables/content_attachment.rb#20
  def attachable_plain_text_representation(caption); end

  # Returns the value of attribute content.
  #
  # source://actiontext//lib/action_text/attachables/content_attachment.rb#15
  def content; end

  # Sets the attribute content
  #
  # @param value the value to set the attribute content to.
  #
  # source://actiontext//lib/action_text/attachables/content_attachment.rb#15
  def content=(_arg0); end

  # Returns the value of attribute content_type.
  #
  # source://actiontext//lib/action_text/attachables/content_attachment.rb#15
  def content_type; end

  # Sets the attribute content_type
  #
  # @param value the value to set the attribute content_type to.
  #
  # source://actiontext//lib/action_text/attachables/content_attachment.rb#15
  def content_type=(_arg0); end

  # source://actiontext//lib/action_text/attachables/content_attachment.rb#8
  def model_name(&_arg0); end

  # source://actiontext//lib/action_text/attachables/content_attachment.rb#8
  def param_delimiter=(_arg0); end

  # source://actiontext//lib/action_text/attachables/content_attachment.rb#24
  def to_html; end

  # source://actiontext//lib/action_text/attachables/content_attachment.rb#32
  def to_partial_path; end

  # source://actiontext//lib/action_text/attachables/content_attachment.rb#28
  def to_s; end

  private

  # source://actiontext//lib/action_text/attachables/content_attachment.rb#37
  def content_instance; end

  class << self
    # source://actiontext//lib/action_text/attachables/content_attachment.rb#8
    def __callbacks; end

    # source://actiontext//lib/action_text/attachables/content_attachment.rb#8
    def __callbacks=(value); end

    # source://actiontext//lib/action_text/attachables/content_attachment.rb#8
    def _validate_callbacks; end

    # source://actiontext//lib/action_text/attachables/content_attachment.rb#8
    def _validate_callbacks=(value); end

    # source://actiontext//lib/action_text/attachables/content_attachment.rb#8
    def _validators; end

    # source://actiontext//lib/action_text/attachables/content_attachment.rb#8
    def _validators=(value); end

    # source://actiontext//lib/action_text/attachables/content_attachment.rb#8
    def _validators?; end

    # source://actiontext//lib/action_text/attachables/content_attachment.rb#10
    def from_node(node); end

    # source://actiontext//lib/action_text/attachables/content_attachment.rb#8
    def param_delimiter; end

    # source://actiontext//lib/action_text/attachables/content_attachment.rb#8
    def param_delimiter=(value); end

    # source://actiontext//lib/action_text/attachables/content_attachment.rb#8
    def param_delimiter?; end

    private

    # source://actiontext//lib/action_text/attachables/content_attachment.rb#8
    def __class_attr___callbacks; end

    # source://actiontext//lib/action_text/attachables/content_attachment.rb#8
    def __class_attr___callbacks=(new_value); end

    # source://actiontext//lib/action_text/attachables/content_attachment.rb#8
    def __class_attr__validators; end

    # source://actiontext//lib/action_text/attachables/content_attachment.rb#8
    def __class_attr__validators=(new_value); end

    # source://actiontext//lib/action_text/attachables/content_attachment.rb#8
    def __class_attr_param_delimiter; end

    # source://actiontext//lib/action_text/attachables/content_attachment.rb#8
    def __class_attr_param_delimiter=(new_value); end
  end
end

# source://actiontext//lib/action_text/attachables/missing_attachable.rb#7
class ActionText::Attachables::MissingAttachable
  extend ::ActiveModel::Naming

  # @return [MissingAttachable] a new instance of MissingAttachable
  #
  # source://actiontext//lib/action_text/attachables/missing_attachable.rb#12
  def initialize(sgid); end

  # source://actiontext//lib/action_text/attachables/missing_attachable.rb#24
  def model; end

  # source://actiontext//lib/action_text/attachables/missing_attachable.rb#8
  def model_name(&_arg0); end

  # source://actiontext//lib/action_text/attachables/missing_attachable.rb#16
  def to_partial_path; end
end

# source://actiontext//lib/action_text/attachables/missing_attachable.rb#10
ActionText::Attachables::MissingAttachable::DEFAULT_PARTIAL_PATH = T.let(T.unsafe(nil), String)

# source://actiontext//lib/action_text/attachables/remote_image.rb#7
class ActionText::Attachables::RemoteImage
  extend ::ActiveModel::Naming

  # @return [RemoteImage] a new instance of RemoteImage
  #
  # source://actiontext//lib/action_text/attachables/remote_image.rb#32
  def initialize(attributes = T.unsafe(nil)); end

  # source://actiontext//lib/action_text/attachables/remote_image.rb#39
  def attachable_plain_text_representation(caption); end

  # Returns the value of attribute content_type.
  #
  # source://actiontext//lib/action_text/attachables/remote_image.rb#30
  def content_type; end

  # Returns the value of attribute height.
  #
  # source://actiontext//lib/action_text/attachables/remote_image.rb#30
  def height; end

  # source://actiontext//lib/action_text/attachables/remote_image.rb#8
  def model_name(&_arg0); end

  # source://actiontext//lib/action_text/attachables/remote_image.rb#43
  def to_partial_path; end

  # Returns the value of attribute url.
  #
  # source://actiontext//lib/action_text/attachables/remote_image.rb#30
  def url; end

  # Returns the value of attribute width.
  #
  # source://actiontext//lib/action_text/attachables/remote_image.rb#30
  def width; end

  class << self
    # source://actiontext//lib/action_text/attachables/remote_image.rb#11
    def from_node(node); end

    private

    # source://actiontext//lib/action_text/attachables/remote_image.rb#22
    def attributes_from_node(node); end

    # @return [Boolean]
    #
    # source://actiontext//lib/action_text/attachables/remote_image.rb#18
    def content_type_is_image?(content_type); end
  end
end

# # Action Text Attachment
#
# Attachments serialize attachables to HTML or plain text.
#
#     class Person < ApplicationRecord
#       include ActionText::Attachable
#     end
#
#     attachable = Person.create! name: "Javan"
#     attachment = ActionText::Attachment.from_attachable(attachable)
#     attachment.to_html # => "<action-text-attachment sgid=\"BAh7CEk..."
#
# source://actiontext//lib/action_text/attachment.rb#19
class ActionText::Attachment
  include ::ActionText::Attachments::Caching
  include ::ActionText::Attachments::Minification
  include ::ActionText::Attachments::TrixConversion
  extend ::ActionText::Attachments::Minification::ClassMethods
  extend ::ActionText::Attachments::TrixConversion::ClassMethods

  # @return [Attachment] a new instance of Attachment
  #
  # source://actiontext//lib/action_text/attachment.rb#68
  def initialize(node, attachable); end

  # Returns the value of attribute attachable.
  #
  # source://actiontext//lib/action_text/attachment.rb#63
  def attachable; end

  # source://actiontext//lib/action_text/attachment.rb#73
  def caption; end

  # source://actiontext//lib/action_text/attachment.rb#77
  def full_attributes; end

  # source://actiontext//lib/action_text/attachment.rb#131
  def inspect; end

  # source://actiontext//lib/action_text/attachment.rb#66
  def method_missing(method, *_arg1, **_arg2, &_arg3); end

  # Returns the value of attribute node.
  #
  # source://actiontext//lib/action_text/attachment.rb#63
  def node; end

  # source://actiontext//lib/action_text/attachment.rb#22
  def tag_name; end

  # source://actiontext//lib/action_text/attachment.rb#22
  def tag_name=(val); end

  # Converts the attachment to HTML.
  #
  #     attachable = Person.create! name: "Javan"
  #     attachment = ActionText::Attachment.from_attachable(attachable)
  #     attachment.to_html # => "<action-text-attachment sgid=\"BAh7CEk...
  #
  # source://actiontext//lib/action_text/attachment.rb#123
  def to_html; end

  # source://actiontext//lib/action_text/attachment.rb#65
  def to_param(*_arg0, **_arg1, &_arg2); end

  # Converts the attachment to plain text.
  #
  #     attachable = ActiveStorage::Blob.find_by filename: "racecar.jpg"
  #     attachment = ActionText::Attachment.from_attachable(attachable)
  #     attachment.to_plain_text # => "[racecar.jpg]"
  #
  # Use the `caption` when set:
  #
  #     attachment = ActionText::Attachment.from_attachable(attachable, caption: "Vroom vroom")
  #     attachment.to_plain_text # => "[Vroom vroom]"
  #
  # The presentation can be overridden by implementing the
  # `attachable_plain_text_representation` method:
  #
  #     class Person < ApplicationRecord
  #       include ActionText::Attachable
  #
  #       def attachable_plain_text_representation
  #         "[#{name}]"
  #       end
  #     end
  #
  #     attachable = Person.create! name: "Javan"
  #     attachment = ActionText::Attachment.from_attachable(attachable)
  #     attachment.to_plain_text # => "[Javan]"
  #
  # source://actiontext//lib/action_text/attachment.rb#110
  def to_plain_text; end

  # source://actiontext//lib/action_text/attachment.rb#127
  def to_s; end

  # source://actiontext//lib/action_text/attachment.rb#81
  def with_full_attributes; end

  private

  # source://actiontext//lib/action_text/attachment.rb#140
  def attachable_attributes; end

  # source://actiontext//lib/action_text/attachment.rb#136
  def node_attributes; end

  # source://actiontext//lib/action_text/attachment.rb#66
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end

  # source://actiontext//lib/action_text/attachment.rb#144
  def sgid_attributes; end

  class << self
    # source://actiontext//lib/action_text/attachment.rb#27
    def fragment_by_canonicalizing_attachments(content); end

    # source://actiontext//lib/action_text/attachment.rb#39
    def from_attachable(attachable, attributes = T.unsafe(nil)); end

    # source://actiontext//lib/action_text/attachment.rb#35
    def from_attachables(attachables); end

    # source://actiontext//lib/action_text/attachment.rb#45
    def from_attributes(attributes, attachable = T.unsafe(nil)); end

    # source://actiontext//lib/action_text/attachment.rb#31
    def from_node(node, attachable = T.unsafe(nil)); end

    # source://actiontext//lib/action_text/attachment.rb#22
    def tag_name; end

    # source://actiontext//lib/action_text/attachment.rb#22
    def tag_name=(val); end

    private

    # source://actiontext//lib/action_text/attachment.rb#52
    def node_from_attributes(attributes); end

    # source://actiontext//lib/action_text/attachment.rb#58
    def process_attributes(attributes); end
  end
end

# source://actiontext//lib/action_text/attachment.rb#24
ActionText::Attachment::ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://actiontext//lib/action_text/attachment_gallery.rb#6
class ActionText::AttachmentGallery
  include ::ActiveModel::Validations
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ActiveModel::Conversion
  include ::ActiveModel::ForbiddenAttributesProtection
  include ::ActiveModel::AttributeAssignment
  include ::ActiveModel::API
  include ::ActiveModel::Access
  include ::ActiveModel::Model
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::Conversion::ClassMethods

  # @return [AttachmentGallery] a new instance of AttachmentGallery
  #
  # source://actiontext//lib/action_text/attachment_gallery.rb#54
  def initialize(node); end

  # source://actiontext//lib/action_text/attachment_gallery.rb#7
  def __callbacks; end

  # source://actiontext//lib/action_text/attachment_gallery.rb#7
  def _run_validate_callbacks(&block); end

  # source://actiontext//lib/action_text/attachment_gallery.rb#7
  def _validate_callbacks; end

  # source://actiontext//lib/action_text/attachment_gallery.rb#7
  def _validators; end

  # source://actiontext//lib/action_text/attachment_gallery.rb#7
  def _validators?; end

  # source://actiontext//lib/action_text/attachment_gallery.rb#58
  def attachments; end

  # source://actiontext//lib/action_text/attachment_gallery.rb#68
  def inspect; end

  # source://actiontext//lib/action_text/attachment_gallery.rb#7
  def model_name(&_arg0); end

  # Returns the value of attribute node.
  #
  # source://actiontext//lib/action_text/attachment_gallery.rb#52
  def node; end

  # source://actiontext//lib/action_text/attachment_gallery.rb#7
  def param_delimiter=(_arg0); end

  # source://actiontext//lib/action_text/attachment_gallery.rb#64
  def size; end

  class << self
    # source://actiontext//lib/action_text/attachment_gallery.rb#7
    def __callbacks; end

    # source://actiontext//lib/action_text/attachment_gallery.rb#7
    def __callbacks=(value); end

    # source://actiontext//lib/action_text/attachment_gallery.rb#7
    def _validate_callbacks; end

    # source://actiontext//lib/action_text/attachment_gallery.rb#7
    def _validate_callbacks=(value); end

    # source://actiontext//lib/action_text/attachment_gallery.rb#7
    def _validators; end

    # source://actiontext//lib/action_text/attachment_gallery.rb#7
    def _validators=(value); end

    # source://actiontext//lib/action_text/attachment_gallery.rb#7
    def _validators?; end

    # source://actiontext//lib/action_text/attachment_gallery.rb#43
    def attachment_selector; end

    # source://actiontext//lib/action_text/attachment_gallery.rb#27
    def find_attachment_gallery_nodes(content); end

    # source://actiontext//lib/action_text/attachment_gallery.rb#13
    def fragment_by_canonicalizing_attachment_galleries(content); end

    # source://actiontext//lib/action_text/attachment_gallery.rb#19
    def fragment_by_replacing_attachment_gallery_nodes(content); end

    # source://actiontext//lib/action_text/attachment_gallery.rb#39
    def from_node(node); end

    # source://actiontext//lib/action_text/attachment_gallery.rb#7
    def param_delimiter; end

    # source://actiontext//lib/action_text/attachment_gallery.rb#7
    def param_delimiter=(value); end

    # source://actiontext//lib/action_text/attachment_gallery.rb#7
    def param_delimiter?; end

    # source://actiontext//lib/action_text/attachment_gallery.rb#47
    def selector; end

    private

    # source://actiontext//lib/action_text/attachment_gallery.rb#7
    def __class_attr___callbacks; end

    # source://actiontext//lib/action_text/attachment_gallery.rb#7
    def __class_attr___callbacks=(new_value); end

    # source://actiontext//lib/action_text/attachment_gallery.rb#7
    def __class_attr__validators; end

    # source://actiontext//lib/action_text/attachment_gallery.rb#7
    def __class_attr__validators=(new_value); end

    # source://actiontext//lib/action_text/attachment_gallery.rb#7
    def __class_attr_param_delimiter; end

    # source://actiontext//lib/action_text/attachment_gallery.rb#7
    def __class_attr_param_delimiter=(new_value); end
  end
end

# source://actiontext//lib/action_text/attachment_gallery.rb#9
ActionText::AttachmentGallery::TAG_NAME = T.let(T.unsafe(nil), String)

# source://actiontext//lib/action_text.rb#38
module ActionText::Attachments
  extend ::ActiveSupport::Autoload
end

# source://actiontext//lib/action_text/attachments/caching.rb#7
module ActionText::Attachments::Caching
  # source://actiontext//lib/action_text/attachments/caching.rb#8
  def cache_key(*args); end

  private

  # source://actiontext//lib/action_text/attachments/caching.rb#13
  def cache_digest; end
end

# source://actiontext//lib/action_text/attachments/minification.rb#7
module ActionText::Attachments::Minification
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionText::Attachments::Minification::ClassMethods
end

# source://actiontext//lib/action_text/attachments/minification.rb#10
module ActionText::Attachments::Minification::ClassMethods
  # source://actiontext//lib/action_text/attachments/minification.rb#11
  def fragment_by_minifying_attachments(content); end
end

# source://actiontext//lib/action_text/attachments/trix_conversion.rb#9
module ActionText::Attachments::TrixConversion
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionText::Attachments::TrixConversion::ClassMethods

  # source://actiontext//lib/action_text/attachments/trix_conversion.rb#24
  def to_trix_attachment(content = T.unsafe(nil)); end

  private

  # source://actiontext//lib/action_text/attachments/trix_conversion.rb#31
  def trix_attachment_content; end
end

# source://actiontext//lib/action_text/attachments/trix_conversion.rb#12
module ActionText::Attachments::TrixConversion::ClassMethods
  # source://actiontext//lib/action_text/attachments/trix_conversion.rb#13
  def fragment_by_converting_trix_attachments(content); end

  # source://actiontext//lib/action_text/attachments/trix_conversion.rb#19
  def from_trix_attachment(trix_attachment); end
end

# source://actiontext//lib/action_text/attribute.rb#6
module ActionText::Attribute
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionText::Attribute::ClassMethods
end

# source://actiontext//lib/action_text/attribute.rb#9
module ActionText::Attribute::ClassMethods
  # source://actiontext//lib/action_text/attribute.rb#53
  def has_rich_text(name, encrypted: T.unsafe(nil), strict_loading: T.unsafe(nil), store_if_blank: T.unsafe(nil)); end

  # source://actiontext//lib/action_text/attribute.rb#100
  def rich_text_association_names; end

  # source://actiontext//lib/action_text/attribute.rb#95
  def with_all_rich_text; end
end

# # Action Text Content
#
# The `ActionText::Content` class wraps an HTML fragment to add support for
# parsing, rendering and serialization. It can be used to extract links and
# attachments, convert the fragment to plain text, or serialize the fragment to
# the database.
#
# The ActionText::RichText record serializes the `body` attribute as
# `ActionText::Content`.
#
#     class Message < ActiveRecord::Base
#       has_rich_text :content
#     end
#
#     message = Message.create!(content: "<h1>Funny times!</h1>")
#     body = message.content.body # => #<ActionText::Content "<div class=\"trix-conte...">
#     body.to_s # => "<h1>Funny times!</h1>"
#     body.to_plain_text # => "Funny times!"
#
# source://actiontext//lib/action_text/content.rb#24
class ActionText::Content
  include ::ActionText::ContentHelper
  include ::ActionText::Serialization
  include ::ActionText::Rendering
  extend ::ActionText::Serialization::ClassMethods
  extend ::ActionText::Rendering::ClassMethods

  # @return [Content] a new instance of Content
  #
  # source://actiontext//lib/action_text/content.rb#40
  def initialize(content = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://actiontext//lib/action_text/content.rb#169
  def ==(other); end

  # source://actiontext//lib/action_text/content.rb#93
  def append_attachables(attachables); end

  # source://actiontext//lib/action_text/content.rb#161
  def as_json(*_arg0); end

  # Extracts +ActionText::Attachable+s from the HTML fragment:
  #
  #     attachable = ActiveStorage::Blob.first
  #     html = %Q(<action-text-attachment sgid="#{attachable.attachable_sgid}" caption="Captioned"></action-text-attachment>)
  #     content = ActionText::Content.new(html)
  #     content.attachables # => [attachable]
  #
  # source://actiontext//lib/action_text/content.rb#87
  def attachables; end

  # source://actiontext//lib/action_text/content.rb#71
  def attachment_galleries; end

  # Extracts +ActionText::Attachment+s from the HTML fragment:
  #
  #     attachable = ActiveStorage::Blob.first
  #     html = %Q(<action-text-attachment sgid="#{attachable.attachable_sgid}" caption="Captioned"></action-text-attachment>)
  #     content = ActionText::Content.new(html)
  #     content.attachments # => [#<ActionText::Attachment attachable=#<ActiveStorage::Blob...
  #
  # source://actiontext//lib/action_text/content.rb#65
  def attachments; end

  # source://actiontext//lib/action_text/content.rb#30
  def blank?(*_arg0, **_arg1, &_arg2); end

  # source://actiontext//lib/action_text/content.rb#29
  def deconstruct(*_arg0, **_arg1, &_arg2); end

  # source://actiontext//lib/action_text/content.rb#30
  def empty?(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute fragment.
  #
  # source://actiontext//lib/action_text/content.rb#27
  def fragment; end

  # source://actiontext//lib/action_text/content.rb#77
  def gallery_attachments; end

  # source://actiontext//lib/action_text/content.rb#30
  def html_safe(*_arg0, **_arg1, &_arg2); end

  # source://actiontext//lib/action_text/content.rb#165
  def inspect; end

  # Extracts links from the HTML fragment:
  #
  #     html = '<a href="http://example.com/">Example</a>'
  #     content = ActionText::Content.new(html)
  #     content.links # => ["http://example.com/"]
  #
  # source://actiontext//lib/action_text/content.rb#55
  def links; end

  # source://actiontext//lib/action_text/content.rb#30
  def present?(*_arg0, **_arg1, &_arg2); end

  # source://actiontext//lib/action_text/content.rb#25
  def render(*_arg0, **_arg1, &_arg2); end

  # source://actiontext//lib/action_text/content.rb#109
  def render_attachment_galleries(&block); end

  # source://actiontext//lib/action_text/content.rb#98
  def render_attachments(**options, &block); end

  # source://actiontext//lib/action_text/content.rb#138
  def to_html; end

  # source://actiontext//lib/action_text/content.rb#146
  def to_partial_path; end

  # Returns a plain-text version of the markup contained by the content, with tags
  # removed but HTML entities encoded.
  #
  #     content = ActionText::Content.new("<h1>Funny times!</h1>")
  #     content.to_plain_text # => "Funny times!"
  #
  #     content = ActionText::Content.new("<div onclick='action()'>safe<script>unsafe</script></div>")
  #     content.to_plain_text # => "safeunsafe"
  #
  # NOTE: that the returned string is not HTML safe and should not be rendered in
  # browsers.
  #
  #     content = ActionText::Content.new("&lt;script&gt;alert()&lt;/script&gt;")
  #     content.to_plain_text # => "<script>alert()</script>"
  #
  # source://actiontext//lib/action_text/content.rb#130
  def to_plain_text; end

  # source://actiontext//lib/action_text/content.rb#142
  def to_rendered_html_with_layout; end

  # Safely transforms Content into an HTML String.
  #
  #     content = ActionText::Content.new(content: "<h1>Funny times!</h1>")
  #     content.to_s # => "<h1>Funny times!</h1>"
  #
  #     content = ActionText::Content.new("<div onclick='action()'>safe<script>unsafe</script></div>")
  #     content.to_s # => "<div>safeunsafe</div>"
  #
  # source://actiontext//lib/action_text/content.rb#157
  def to_s; end

  # source://actiontext//lib/action_text/content.rb#134
  def to_trix_html; end

  private

  # source://actiontext//lib/action_text/content.rb#186
  def attachment_for_node(node, with_full_attributes: T.unsafe(nil)); end

  # source://actiontext//lib/action_text/content.rb#191
  def attachment_gallery_for_node(node); end

  # source://actiontext//lib/action_text/content.rb#182
  def attachment_gallery_nodes; end

  # source://actiontext//lib/action_text/content.rb#178
  def attachment_nodes; end

  class << self
    # source://actiontext//lib/action_text/content.rb#33
    def fragment_by_canonicalizing_content(content); end

    # source://actiontext//lib/action_text/content.rb#25
    def renderer; end

    # source://actiontext//lib/action_text/content.rb#25
    def renderer=(obj); end
  end
end

module ActionText::ContentHelper
  def allowed_attributes; end
  def allowed_attributes=(val); end
  def allowed_tags; end
  def allowed_tags=(val); end
  def render_action_text_attachment(attachment, locals: T.unsafe(nil)); end
  def render_action_text_attachments(content); end
  def render_action_text_content(content); end
  def sanitize_action_text_content(content); end
  def sanitize_content_attachment(content_attachment); end
  def sanitizer; end
  def sanitizer=(val); end
  def sanitizer_allowed_attributes; end
  def sanitizer_allowed_tags; end
  def scrubber; end
  def scrubber=(val); end

  class << self
    def allowed_attributes; end
    def allowed_attributes=(val); end
    def allowed_tags; end
    def allowed_tags=(val); end
    def sanitizer; end
    def sanitizer=(val); end
    def scrubber; end
    def scrubber=(val); end
  end
end

class ActionText::EncryptedRichText < ::ActionText::RichText
  include ::ActionText::EncryptedRichText::GeneratedAttributeMethods
  include ::ActionText::EncryptedRichText::GeneratedAssociationMethods

  class << self
    private

    def __class_attr__validators; end
    def __class_attr__validators=(new_value); end
    def __class_attr_defined_enums; end
    def __class_attr_defined_enums=(new_value); end
    def __class_attr_encrypted_attributes; end
    def __class_attr_encrypted_attributes=(new_value); end
  end
end

module ActionText::EncryptedRichText::GeneratedAssociationMethods; end
module ActionText::EncryptedRichText::GeneratedAttributeMethods; end

# source://actiontext//lib/action_text/encryption.rb#6
module ActionText::Encryption
  # source://actiontext//lib/action_text/encryption.rb#14
  def decrypt; end

  # source://actiontext//lib/action_text/encryption.rb#7
  def encrypt; end

  private

  # source://actiontext//lib/action_text/encryption.rb#26
  def decrypt_rich_texts; end

  # source://actiontext//lib/action_text/encryption.rb#22
  def encrypt_rich_texts; end

  # source://actiontext//lib/action_text/encryption.rb#34
  def encryptable_rich_texts; end

  # @return [Boolean]
  #
  # source://actiontext//lib/action_text/encryption.rb#30
  def has_encrypted_rich_texts?; end
end

# source://actiontext//lib/action_text/engine.rb#13
class ActionText::Engine < ::Rails::Engine; end

# # Action Text FixtureSet
#
# Fixtures are a way of organizing data that you want to test against; in short,
# sample data.
#
# To learn more about fixtures, read the ActiveRecord::FixtureSet documentation.
#
# ### YAML
#
# Like other Active Record-backed models, ActionText::RichText records inherit
# from ActiveRecord::Base instances and can therefore be populated by fixtures.
#
# Consider an `Article` class:
#
#     class Article < ApplicationRecord
#       has_rich_text :content
#     end
#
# To declare fixture data for the related `content`, first declare fixture data
# for `Article` instances in `test/fixtures/articles.yml`:
#
#     first:
#       title: An Article
#
# Then declare the ActionText::RichText fixture data in
# `test/fixtures/action_text/rich_texts.yml`, making sure to declare each
# entry's `record:` key as a polymorphic relationship:
#
#     first:
#       record: first (Article)
#       name: content
#       body: <div>Hello, world.</div>
#
# When processed, Active Record will insert database records for each fixture
# entry and will ensure the Action Text relationship is intact.
#
# source://actiontext//lib/action_text/fixture_set.rb#41
class ActionText::FixtureSet
  class << self
    # Fixtures support Action Text attachments as part of their `body` HTML.
    #
    # ### Examples
    #
    # For example, consider a second `Article` fixture declared in
    # `test/fixtures/articles.yml`:
    #
    #     second:
    #       title: Another Article
    #
    # You can attach a mention of `articles(:first)` to `second`'s `content` by
    # embedding a call to `ActionText::FixtureSet.attachment` in the `body:` value
    # in `test/fixtures/action_text/rich_texts.yml`:
    #
    #     second:
    #       record: second (Article)
    #       name: content
    #       body: <div>Hello, <%= ActionText::FixtureSet.attachment("articles", :first) %></div>
    #
    # source://actiontext//lib/action_text/fixture_set.rb#61
    def attachment(fixture_set_name, label, column_type: T.unsafe(nil)); end
  end
end

# source://actiontext//lib/action_text/fragment.rb#6
class ActionText::Fragment
  # @return [Fragment] a new instance of Fragment
  #
  # source://actiontext//lib/action_text/fragment.rb#28
  def initialize(source); end

  # source://actiontext//lib/action_text/fragment.rb#26
  def deconstruct(*_arg0, **_arg1, &_arg2); end

  # source://actiontext//lib/action_text/fragment.rb#32
  def find_all(selector); end

  # source://actiontext//lib/action_text/fragment.rb#41
  def replace(selector); end

  # Returns the value of attribute source.
  #
  # source://actiontext//lib/action_text/fragment.rb#24
  def source; end

  # source://actiontext//lib/action_text/fragment.rb#54
  def to_html; end

  # source://actiontext//lib/action_text/fragment.rb#50
  def to_plain_text; end

  # source://actiontext//lib/action_text/fragment.rb#58
  def to_s; end

  # @yield [source = self.source.dup]
  #
  # source://actiontext//lib/action_text/fragment.rb#36
  def update; end

  class << self
    # source://actiontext//lib/action_text/fragment.rb#19
    def from_html(html); end

    # source://actiontext//lib/action_text/fragment.rb#8
    def wrap(fragment_or_html); end
  end
end

# source://actiontext//lib/action_text/html_conversion.rb#6
module ActionText::HtmlConversion
  extend ::ActionText::HtmlConversion

  # source://actiontext//lib/action_text/html_conversion.rb#17
  def create_element(tag_name, attributes = T.unsafe(nil)); end

  # source://actiontext//lib/action_text/html_conversion.rb#13
  def fragment_for_html(html); end

  # source://actiontext//lib/action_text/html_conversion.rb#9
  def node_to_html(node); end

  private

  # source://actiontext//lib/action_text/html_conversion.rb#22
  def document; end
end

# source://actiontext//lib/action_text/plain_text_conversion.rb#6
module ActionText::PlainTextConversion
  extend ::ActionText::PlainTextConversion

  # source://actiontext//lib/action_text/plain_text_conversion.rb#9
  def node_to_plain_text(node); end

  private

  # source://actiontext//lib/action_text/plain_text_conversion.rb#111
  def break_if_nested_list(node, text); end

  # source://actiontext//lib/action_text/plain_text_conversion.rb#88
  def bullet_for_li_node(node, index); end

  # source://actiontext//lib/action_text/plain_text_conversion.rb#100
  def indentation_for_li_node(node); end

  # source://actiontext//lib/action_text/plain_text_conversion.rb#107
  def list_node_depth_for_node(node); end

  # source://actiontext//lib/action_text/plain_text_conversion.rb#96
  def list_node_name_for_li_node(node); end

  # source://actiontext//lib/action_text/plain_text_conversion.rb#34
  def plain_text_for_block(node, index = T.unsafe(nil)); end

  # source://actiontext//lib/action_text/plain_text_conversion.rb#66
  def plain_text_for_blockquote_node(node, index); end

  # source://actiontext//lib/action_text/plain_text_conversion.rb#50
  def plain_text_for_br_node(node, index); end

  # source://actiontext//lib/action_text/plain_text_conversion.rb#58
  def plain_text_for_div_node(node, index); end

  # source://actiontext//lib/action_text/plain_text_conversion.rb#62
  def plain_text_for_figcaption_node(node, index); end

  # source://actiontext//lib/action_text/plain_text_conversion.rb#39
  def plain_text_for_h1_node(node, index = T.unsafe(nil)); end

  # source://actiontext//lib/action_text/plain_text_conversion.rb#76
  def plain_text_for_li_node(node, index); end

  # source://actiontext//lib/action_text/plain_text_conversion.rb#42
  def plain_text_for_list(node, index); end

  # source://actiontext//lib/action_text/plain_text_conversion.rb#14
  def plain_text_for_node(node, index = T.unsafe(nil)); end

  # source://actiontext//lib/action_text/plain_text_conversion.rb#22
  def plain_text_for_node_children(node); end

  # source://actiontext//lib/action_text/plain_text_conversion.rb#47
  def plain_text_for_ol_node(node, index); end

  # source://actiontext//lib/action_text/plain_text_conversion.rb#39
  def plain_text_for_p_node(node, index = T.unsafe(nil)); end

  # source://actiontext//lib/action_text/plain_text_conversion.rb#54
  def plain_text_for_text_node(node, index); end

  # source://actiontext//lib/action_text/plain_text_conversion.rb#47
  def plain_text_for_ul_node(node, index); end

  # source://actiontext//lib/action_text/plain_text_conversion.rb#30
  def plain_text_method_for_node(node); end

  # source://actiontext//lib/action_text/plain_text_conversion.rb#84
  def remove_trailing_newlines(text); end
end

class ActionText::Record < ::ActiveRecord::Base
  include ::ActionText::Record::GeneratedAttributeMethods
  include ::ActionText::Record::GeneratedAssociationMethods

  class << self
    private

    def __class_attr__validators; end
    def __class_attr__validators=(new_value); end
    def __class_attr_defined_enums; end
    def __class_attr_defined_enums=(new_value); end
  end
end

module ActionText::Record::GeneratedAssociationMethods; end
module ActionText::Record::GeneratedAttributeMethods; end

# source://actiontext//lib/action_text/rendering.rb#9
module ActionText::Rendering
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionText::Rendering::ClassMethods
end

# source://actiontext//lib/action_text/rendering.rb#17
module ActionText::Rendering::ClassMethods
  # source://actiontext//lib/action_text/rendering.rb#18
  def action_controller_renderer; end

  # source://actiontext//lib/action_text/rendering.rb#30
  def render(*args, &block); end

  # source://actiontext//lib/action_text/rendering.rb#22
  def with_renderer(renderer); end
end

class ActionText::RichText < ::ActionText::Record
  include ::ActionText::RichText::GeneratedAttributeMethods
  include ::ActionText::RichText::GeneratedAssociationMethods

  def autosave_associated_records_for_embeds_attachments(*args); end
  def autosave_associated_records_for_embeds_blobs(*args); end
  def autosave_associated_records_for_record(*args); end
  def blank?(*_arg0, **_arg1, &_arg2); end
  def empty?(*_arg0, **_arg1, &_arg2); end
  def nil?(*_arg0, **_arg1, &_arg2); end
  def present?(*_arg0, **_arg1, &_arg2); end
  def to_plain_text; end
  def to_s(*_arg0, **_arg1, &_arg2); end
  def to_trix_html; end
  def validate_associated_records_for_embeds_attachments(*args); end
  def validate_associated_records_for_embeds_blobs(*args); end

  class << self
    def with_attached_embeds(*args, **_arg1); end

    private

    def __class_attr___callbacks; end
    def __class_attr___callbacks=(new_value); end
    def __class_attr__reflections; end
    def __class_attr__reflections=(new_value); end
    def __class_attr__validators; end
    def __class_attr__validators=(new_value); end
    def __class_attr_attachment_reflections; end
    def __class_attr_attachment_reflections=(new_value); end
    def __class_attr_defined_enums; end
    def __class_attr_defined_enums=(new_value); end
  end
end

module ActionText::RichText::GeneratedAssociationMethods
  def embeds; end
  def embeds=(attachables); end
  def embeds_attachment_ids; end
  def embeds_attachment_ids=(ids); end
  def embeds_attachments; end
  def embeds_attachments=(value); end
  def embeds_blob_ids; end
  def embeds_blob_ids=(ids); end
  def embeds_blobs; end
  def embeds_blobs=(value); end
  def record; end
  def record=(value); end
  def record_changed?; end
  def record_previously_changed?; end
  def reload_record; end
  def reset_record; end
end

module ActionText::RichText::GeneratedAttributeMethods; end

# source://actiontext//lib/action_text/serialization.rb#6
module ActionText::Serialization
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActionText::Serialization::ClassMethods

  # source://actiontext//lib/action_text/serialization.rb#34
  def _dump(*_arg0); end
end

# source://actiontext//lib/action_text/serialization.rb#9
module ActionText::Serialization::ClassMethods
  # source://actiontext//lib/action_text/serialization.rb#31
  def _load(content); end

  # source://actiontext//lib/action_text/serialization.rb#14
  def dump(content); end

  # source://actiontext//lib/action_text/serialization.rb#10
  def load(content); end
end

# source://actiontext//lib/action_text/system_test_helper.rb#6
module ActionText::SystemTestHelper
  # Locates a Trix editor and fills it in with the given HTML.
  #
  # The editor can be found by:
  # *   its `id`
  # *   its `placeholder`
  # *   the text from its `label` element
  # *   its `aria-label`
  # *   the `name` of its input
  #
  #
  # Examples:
  #
  #     # <trix-editor id="message_content" ...></trix-editor>
  #     fill_in_rich_textarea "message_content", with: "Hello <em>world!</em>"
  #
  #     # <trix-editor placeholder="Your message here" ...></trix-editor>
  #     fill_in_rich_textarea "Your message here", with: "Hello <em>world!</em>"
  #
  #     # <label for="message_content">Message content</label>
  #     # <trix-editor id="message_content" ...></trix-editor>
  #     fill_in_rich_textarea "Message content", with: "Hello <em>world!</em>"
  #
  #     # <trix-editor aria-label="Message content" ...></trix-editor>
  #     fill_in_rich_textarea "Message content", with: "Hello <em>world!</em>"
  #
  #     # <input id="trix_input_1" name="message[content]" type="hidden">
  #     # <trix-editor input="trix_input_1"></trix-editor>
  #     fill_in_rich_textarea "message[content]", with: "Hello <em>world!</em>"
  #
  # source://actiontext//lib/action_text/system_test_helper.rb#38
  def fill_in_rich_text_area(locator = T.unsafe(nil), with:); end

  # Locates a Trix editor and fills it in with the given HTML.
  #
  # The editor can be found by:
  # *   its `id`
  # *   its `placeholder`
  # *   the text from its `label` element
  # *   its `aria-label`
  # *   the `name` of its input
  #
  #
  # Examples:
  #
  #     # <trix-editor id="message_content" ...></trix-editor>
  #     fill_in_rich_textarea "message_content", with: "Hello <em>world!</em>"
  #
  #     # <trix-editor placeholder="Your message here" ...></trix-editor>
  #     fill_in_rich_textarea "Your message here", with: "Hello <em>world!</em>"
  #
  #     # <label for="message_content">Message content</label>
  #     # <trix-editor id="message_content" ...></trix-editor>
  #     fill_in_rich_textarea "Message content", with: "Hello <em>world!</em>"
  #
  #     # <trix-editor aria-label="Message content" ...></trix-editor>
  #     fill_in_rich_textarea "Message content", with: "Hello <em>world!</em>"
  #
  #     # <input id="trix_input_1" name="message[content]" type="hidden">
  #     # <trix-editor input="trix_input_1"></trix-editor>
  #     fill_in_rich_textarea "message[content]", with: "Hello <em>world!</em>"
  #
  # source://actiontext//lib/action_text/system_test_helper.rb#35
  def fill_in_rich_textarea(locator = T.unsafe(nil), with:); end
end

module ActionText::TagHelper
  def rich_text_area_tag(name, value = T.unsafe(nil), options = T.unsafe(nil)); end
  def rich_textarea_tag(name, value = T.unsafe(nil), options = T.unsafe(nil)); end

  class << self
    def id; end
    def id=(val); end
  end
end

# source://actiontext//lib/action_text/trix_attachment.rb#6
class ActionText::TrixAttachment
  # @return [TrixAttachment] a new instance of TrixAttachment
  #
  # source://actiontext//lib/action_text/trix_attachment.rb#53
  def initialize(node); end

  # source://actiontext//lib/action_text/trix_attachment.rb#57
  def attributes; end

  # Returns the value of attribute node.
  #
  # source://actiontext//lib/action_text/trix_attachment.rb#51
  def node; end

  # source://actiontext//lib/action_text/trix_attachment.rb#61
  def to_html; end

  # source://actiontext//lib/action_text/trix_attachment.rb#65
  def to_s; end

  private

  # source://actiontext//lib/action_text/trix_attachment.rb#70
  def attachment_attributes; end

  # source://actiontext//lib/action_text/trix_attachment.rb#74
  def composed_attributes; end

  # source://actiontext//lib/action_text/trix_attachment.rb#82
  def read_json_attribute(name); end

  # source://actiontext//lib/action_text/trix_attachment.rb#78
  def read_json_object_attribute(name); end

  class << self
    # source://actiontext//lib/action_text/trix_attachment.rb#21
    def from_attributes(attributes); end

    private

    # source://actiontext//lib/action_text/trix_attachment.rb#35
    def process_attributes(attributes); end

    # source://actiontext//lib/action_text/trix_attachment.rb#39
    def transform_attribute_keys(attributes); end

    # source://actiontext//lib/action_text/trix_attachment.rb#43
    def typecast_attribute_values(attributes); end
  end
end

# source://actiontext//lib/action_text/trix_attachment.rb#11
ActionText::TrixAttachment::ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://actiontext//lib/action_text/trix_attachment.rb#12
ActionText::TrixAttachment::ATTRIBUTE_TYPES = T.let(T.unsafe(nil), Hash)

# source://actiontext//lib/action_text/trix_attachment.rb#10
ActionText::TrixAttachment::COMPOSED_ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://actiontext//lib/action_text/trix_attachment.rb#8
ActionText::TrixAttachment::SELECTOR = T.let(T.unsafe(nil), String)

# source://actiontext//lib/action_text/trix_attachment.rb#7
ActionText::TrixAttachment::TAG_NAME = T.let(T.unsafe(nil), String)

# source://actiontext//lib/action_text/gem_version.rb#11
module ActionText::VERSION; end

# source://actiontext//lib/action_text/gem_version.rb#12
ActionText::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://actiontext//lib/action_text/gem_version.rb#13
ActionText::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://actiontext//lib/action_text/gem_version.rb#15
ActionText::VERSION::PRE = T.let(T.unsafe(nil), T.untyped)

# source://actiontext//lib/action_text/gem_version.rb#17
ActionText::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://actiontext//lib/action_text/gem_version.rb#14
ActionText::VERSION::TINY = T.let(T.unsafe(nil), Integer)

module ActionView::Helpers
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::TextHelper
  include ::ActionView::Helpers::UrlHelper
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::TextHelper
  include ::ActionView::Helpers::FormTagHelper
  include ::ActionView::Helpers::FormHelper
  include ::ActionView::Helpers::TranslationHelper

  mixes_in_class_methods ::ActionView::Helpers::UrlHelper::ClassMethods
  mixes_in_class_methods ::ActionView::Helpers::SanitizeHelper::ClassMethods
end

class ActionView::Helpers::FormBuilder
  def rich_text_area(method, options = T.unsafe(nil)); end
  def rich_textarea(method, options = T.unsafe(nil)); end
end

module ActionView::Helpers::FormHelper
  include ::ActionView::Helpers::UrlHelper
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::TextHelper
  include ::ActionView::Helpers::FormTagHelper

  mixes_in_class_methods ::ActionView::Helpers::UrlHelper::ClassMethods
  mixes_in_class_methods ::ActionView::Helpers::SanitizeHelper::ClassMethods

  def rich_text_area(object_name, method, options = T.unsafe(nil)); end
  def rich_textarea(object_name, method, options = T.unsafe(nil)); end
end

module ActionView::Helpers::Tags; end

class ActionView::Helpers::Tags::ActionText < ::ActionView::Helpers::Tags::Base
  include ::ActionView::Helpers::Tags::Placeholderable

  def dom_id(*_arg0, **_arg1, &_arg2); end
  def render; end
end

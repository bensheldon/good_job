# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/database_cleaner-active_record/all/database_cleaner-active_record.rbi
#
# database_cleaner-active_record-2.0.1

module DatabaseCleaner
end
module DatabaseCleaner::ActiveRecord
  def self.config_file_location; end
  def self.config_file_location=(path); end
end
class DatabaseCleaner::ActiveRecord::Base < DatabaseCleaner::Strategy
  def active_record_config_hash_for(db); end
  def connection_class; end
  def connection_hash; end
  def connection_hash=(arg0); end
  def database_for(model); end
  def db=(*arg0); end
  def establish_connection; end
  def load_config; end
  def lookup_from_connection_pool; end
  def self.exclusion_condition(column_name); end
  def self.migration_table_name; end
  def valid_config(connection_file, db); end
end
class DatabaseCleaner::ActiveRecord::Transaction < DatabaseCleaner::ActiveRecord::Base
  def clean; end
  def start; end
end
class DatabaseCleaner::ActiveRecord::Truncation < DatabaseCleaner::ActiveRecord::Base
  def cache_tables?; end
  def clean; end
  def connection; end
  def initialize(opts = nil); end
  def migration_storage_names; end
  def pre_count?; end
  def tables_to_truncate(connection); end
end
class DatabaseCleaner::ActiveRecord::ConnectionWrapper < SimpleDelegator
  def initialize(connection); end
end
module DatabaseCleaner::ActiveRecord::ConnectionWrapper::AbstractAdapter
  def database_cleaner_table_cache; end
  def database_cleaner_view_cache; end
  def database_tables; end
  def truncate_table(table_name); end
  def truncate_tables(tables); end
end
module DatabaseCleaner::ActiveRecord::ConnectionWrapper::AbstractMysqlAdapter
  def auto_increment_value(table); end
  def has_been_used?(table); end
  def has_rows?(table); end
  def pre_count_tables(tables); end
  def pre_count_truncate_tables(tables); end
  def row_count(table); end
end
module DatabaseCleaner::ActiveRecord::ConnectionWrapper::SQLiteAdapter
  def fetch_sequences; end
  def has_been_used?(table, sequences); end
  def pre_count_tables(tables); end
  def pre_count_truncate_tables(tables); end
  def row_count(table); end
  def truncate_table(table_name); end
  def truncate_tables(tables); end
  def uses_sequence?; end
end
module DatabaseCleaner::ActiveRecord::ConnectionWrapper::PostgreSQLAdapter
  def database_cleaner_table_cache; end
  def database_tables; end
  def has_been_used?(table); end
  def has_rows?(table); end
  def has_sequence?(table); end
  def pre_count_tables(tables); end
  def pre_count_truncate_tables(tables); end
  def tables_with_schema; end
  def truncate_tables(table_names); end
end
class DatabaseCleaner::ActiveRecord::Deletion < DatabaseCleaner::ActiveRecord::Truncation
  def build_table_stats_query(connection); end
  def clean; end
  def delete_table(connection, table_name); end
  def delete_tables(connection, table_names); end
  def information_schema_exists?(connection); end
  def table_stats_query(connection); end
  def tables_to_truncate(connection); end
  def tables_with_new_rows(connection); end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `gem-release` gem.
# Please instead update this file by running `bin/tapioca gem gem-release`.

# source://gem-release//lib/gem/release.rb#2
module Gem::Release; end

# source://gem-release//lib/gem/release.rb#3
class Gem::Release::Abort < ::StandardError; end

# source://gem-release//lib/gem/release/cmds/base.rb#8
module Gem::Release::Cmds
  class << self
    # source://gem-release//lib/gem/release/cmds.rb#12
    def [](cmd); end
  end
end

# source://gem-release//lib/gem/release/cmds/base.rb#9
class Gem::Release::Cmds::Base < ::Struct
  include ::Gem::Release::Registry
  include ::Gem::Release::Registry::InstanceMethods
  include ::Gem::Release::Helper::String
  include ::Gem::Release::Helper::Hash
  include ::Gem::Release::Helper
  extend ::Gem::Release::Registry::ClassMethods
  extend ::Gem::Release::Helper::String

  # @return [Base] a new instance of Base
  #
  # source://gem-release//lib/gem/release/cmds/base.rb#80
  def initialize(context, args, opts); end

  # source://gem-release//lib/gem/release/cmds/base.rb#111
  def config; end

  # source://gem-release//lib/gem/release/cmds/base.rb#115
  def defaults; end

  # Returns the value of attribute gem.
  #
  # source://gem-release//lib/gem/release/cmds/base.rb#78
  def gem; end

  # source://gem-release//lib/gem/release/cmds/base.rb#85
  def in_dirs; end

  # source://gem-release//lib/gem/release/cmds/base.rb#92
  def in_gem_dirs; end

  # Returns the value of attribute opts
  #
  # @return [Object] the current value of opts
  #
  # source://gem-release//lib/gem/release/cmds/base.rb#107
  def opts; end

  # @return [Boolean]
  #
  # source://gem-release//lib/gem/release/cmds/base.rb#99
  def pretend?; end

  # @return [Boolean]
  #
  # source://gem-release//lib/gem/release/cmds/base.rb#103
  def quiet?; end

  class << self
    # source://gem-release//lib/gem/release/cmds/base.rb#19
    def arg(name, summary); end

    # source://gem-release//lib/gem/release/cmds/base.rb#23
    def args; end

    # source://gem-release//lib/gem/release/cmds/base.rb#41
    def default(opt); end

    # source://gem-release//lib/gem/release/cmds/base.rb#35
    def descr(opt); end

    # source://gem-release//lib/gem/release/cmds/base.rb#55
    def description(description = T.unsafe(nil)); end

    # @private
    #
    # source://gem-release//lib/gem/release/cmds/base.rb#15
    def inherited(cmd); end

    # source://gem-release//lib/gem/release/cmds/base.rb#27
    def opt(*args, &block); end

    # source://gem-release//lib/gem/release/cmds/base.rb#31
    def opts; end

    # source://gem-release//lib/gem/release/cmds/base.rb#51
    def summary(summary = T.unsafe(nil)); end

    # source://gem-release//lib/gem/release/cmds/base.rb#45
    def usage(usage = T.unsafe(nil)); end
  end
end

# source://gem-release//lib/gem/release/cmds/base.rb#60
Gem::Release::Cmds::Base::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://gem-release//lib/gem/release/cmds/bootstrap.rb#8
class Gem::Release::Cmds::Bootstrap < ::Gem::Release::Cmds::Base
  # source://gem-release//lib/gem/release/cmds/bootstrap.rb#154
  def run; end

  private

  # source://gem-release//lib/gem/release/cmds/bootstrap.rb#207
  def create_repo; end

  # source://gem-release//lib/gem/release/cmds/bootstrap.rb#212
  def data; end

  # source://gem-release//lib/gem/release/cmds/bootstrap.rb#184
  def executable; end

  # source://gem-release//lib/gem/release/cmds/bootstrap.rb#177
  def files; end

  # source://gem-release//lib/gem/release/cmds/bootstrap.rb#201
  def init_git; end

  # source://gem-release//lib/gem/release/cmds/bootstrap.rb#188
  def license; end

  # source://gem-release//lib/gem/release/cmds/bootstrap.rb#224
  def normalize(opts); end

  # source://gem-release//lib/gem/release/cmds/bootstrap.rb#220
  def opts; end

  # source://gem-release//lib/gem/release/cmds/bootstrap.rb#216
  def remote; end

  # source://gem-release//lib/gem/release/cmds/bootstrap.rb#172
  def scaffold; end

  # source://gem-release//lib/gem/release/cmds/bootstrap.rb#194
  def write(file); end
end

# source://gem-release//lib/gem/release/cmds/bootstrap.rb#146
Gem::Release::Cmds::Bootstrap::CMDS = T.let(T.unsafe(nil), Hash)

# source://gem-release//lib/gem/release/cmds/bootstrap.rb#60
Gem::Release::Cmds::Bootstrap::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://gem-release//lib/gem/release/cmds/bootstrap.rb#71
Gem::Release::Cmds::Bootstrap::DESCR = T.let(T.unsafe(nil), Hash)

# source://gem-release//lib/gem/release/cmds/bootstrap.rb#164
Gem::Release::Cmds::Bootstrap::FILES = T.let(T.unsafe(nil), Array)

# source://gem-release//lib/gem/release/cmds/bootstrap.rb#134
Gem::Release::Cmds::Bootstrap::MSGS = T.let(T.unsafe(nil), Hash)

# source://gem-release//lib/gem/release/cmds/bump.rb#7
class Gem::Release::Cmds::Bump < ::Gem::Release::Cmds::Base
  # source://gem-release//lib/gem/release/cmds/bump.rb#138
  def run; end

  private

  # source://gem-release//lib/gem/release/cmds/bump.rb#189
  def branch; end

  # source://gem-release//lib/gem/release/cmds/bump.rb#165
  def bump; end

  # source://gem-release//lib/gem/release/cmds/bump.rb#161
  def checkout; end

  # source://gem-release//lib/gem/release/cmds/bump.rb#172
  def commit; end

  # source://gem-release//lib/gem/release/cmds/bump.rb#198
  def message; end

  # source://gem-release//lib/gem/release/cmds/bump.rb#177
  def push; end

  # @return [Boolean]
  #
  # source://gem-release//lib/gem/release/cmds/bump.rb#212
  def push?; end

  # source://gem-release//lib/gem/release/cmds/bump.rb#185
  def release(new_version); end

  # source://gem-release//lib/gem/release/cmds/bump.rb#216
  def remote; end

  # source://gem-release//lib/gem/release/cmds/bump.rb#208
  def reset; end

  # source://gem-release//lib/gem/release/cmds/bump.rb#181
  def tag(new_version); end

  # source://gem-release//lib/gem/release/cmds/bump.rb#155
  def validate; end

  # source://gem-release//lib/gem/release/cmds/bump.rb#204
  def version; end
end

# source://gem-release//lib/gem/release/cmds/bump.rb#131
Gem::Release::Cmds::Bump::CMDS = T.let(T.unsafe(nil), Hash)

# source://gem-release//lib/gem/release/cmds/bump.rb#59
Gem::Release::Cmds::Bump::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://gem-release//lib/gem/release/cmds/bump.rb#44
Gem::Release::Cmds::Bump::DESCR = T.let(T.unsafe(nil), Hash)

# source://gem-release//lib/gem/release/cmds/bump.rb#119
Gem::Release::Cmds::Bump::MSGS = T.let(T.unsafe(nil), Hash)

# source://gem-release//lib/gem/release/cmds/gemspec.rb#8
class Gem::Release::Cmds::Gemspec < ::Gem::Release::Cmds::Base
  # source://gem-release//lib/gem/release/cmds/gemspec.rb#60
  def run; end

  private

  # source://gem-release//lib/gem/release/cmds/gemspec.rb#84
  def data; end

  # source://gem-release//lib/gem/release/cmds/gemspec.rb#76
  def file; end

  # source://gem-release//lib/gem/release/cmds/gemspec.rb#69
  def generate; end

  # source://gem-release//lib/gem/release/cmds/gemspec.rb#80
  def templates; end
end

# source://gem-release//lib/gem/release/cmds/gemspec.rb#27
Gem::Release::Cmds::Gemspec::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://gem-release//lib/gem/release/cmds/gemspec.rb#31
Gem::Release::Cmds::Gemspec::DESCR = T.let(T.unsafe(nil), Hash)

# source://gem-release//lib/gem/release/cmds/gemspec.rb#54
Gem::Release::Cmds::Gemspec::MSGS = T.let(T.unsafe(nil), Hash)

# source://gem-release//lib/gem/release/cmds/github.rb#7
class Gem::Release::Cmds::Github < ::Gem::Release::Cmds::Base
  # source://gem-release//lib/gem/release/cmds/github.rb#23
  def run; end

  private

  # source://gem-release//lib/gem/release/cmds/github.rb#47
  def data; end

  # source://gem-release//lib/gem/release/cmds/github.rb#73
  def descr; end

  # source://gem-release//lib/gem/release/cmds/github.rb#42
  def release; end

  # source://gem-release//lib/gem/release/cmds/github.rb#61
  def repo; end

  # source://gem-release//lib/gem/release/cmds/github.rb#65
  def repo_from(url); end

  # source://gem-release//lib/gem/release/cmds/github.rb#57
  def tag_name; end

  # @return [Boolean]
  #
  # source://gem-release//lib/gem/release/cmds/github.rb#38
  def tagged?; end

  # source://gem-release//lib/gem/release/cmds/github.rb#69
  def token; end

  # source://gem-release//lib/gem/release/cmds/github.rb#33
  def validate; end
end

# source://gem-release//lib/gem/release/cmds/github.rb#16
Gem::Release::Cmds::Github::MSGS = T.let(T.unsafe(nil), Hash)

# source://gem-release//lib/gem/release/cmds/release.rb#8
class Gem::Release::Cmds::Release < ::Gem::Release::Cmds::Base
  # source://gem-release//lib/gem/release/cmds/release.rb#100
  def run; end

  private

  # source://gem-release//lib/gem/release/cmds/release.rb#124
  def build; end

  # source://gem-release//lib/gem/release/cmds/release.rb#146
  def cleanup; end

  # source://gem-release//lib/gem/release/cmds/release.rb#136
  def github; end

  # source://gem-release//lib/gem/release/cmds/release.rb#128
  def push; end

  # source://gem-release//lib/gem/release/cmds/release.rb#140
  def push_args; end

  # source://gem-release//lib/gem/release/cmds/release.rb#115
  def release; end

  # source://gem-release//lib/gem/release/cmds/release.rb#132
  def tag; end

  # source://gem-release//lib/gem/release/cmds/release.rb#150
  def target_version; end

  # source://gem-release//lib/gem/release/cmds/release.rb#111
  def validate; end
end

# source://gem-release//lib/gem/release/cmds/release.rb#96
Gem::Release::Cmds::Release::CMDS = T.let(T.unsafe(nil), Hash)

# source://gem-release//lib/gem/release/cmds/release.rb#25
Gem::Release::Cmds::Release::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://gem-release//lib/gem/release/cmds/release.rb#31
Gem::Release::Cmds::Release::DESCR = T.let(T.unsafe(nil), Hash)

# endregion github
#
# source://gem-release//lib/gem/release/cmds/release.rb#88
Gem::Release::Cmds::Release::MSGS = T.let(T.unsafe(nil), Hash)

# source://gem-release//lib/gem/release/cmds/runner.rb#6
class Gem::Release::Cmds::Runner < ::Struct
  # source://gem-release//lib/gem/release/cmds/runner.rb#7
  def run; end

  private

  # Returns the value of attribute args
  #
  # @return [Object] the current value of args
  #
  # source://gem-release//lib/gem/release/cmds/runner.rb#26
  def args; end

  # source://gem-release//lib/gem/release/cmds/runner.rb#34
  def config; end

  # source://gem-release//lib/gem/release/cmds/runner.rb#22
  def const; end

  # Returns the value of attribute context
  #
  # @return [Object] the current value of context
  #
  # source://gem-release//lib/gem/release/cmds/runner.rb#38
  def context; end

  # source://gem-release//lib/gem/release/cmds/runner.rb#42
  def except(hash, *keys); end

  # Returns the value of attribute opts
  #
  # @return [Object] the current value of opts
  #
  # source://gem-release//lib/gem/release/cmds/runner.rb#30
  def opts; end

  # source://gem-release//lib/gem/release/cmds/runner.rb#18
  def run_cmd; end

  # source://gem-release//lib/gem/release/cmds/runner.rb#14
  def success; end
end

# source://gem-release//lib/gem/release/cmds/tag.rb#6
class Gem::Release::Cmds::Tag < ::Gem::Release::Cmds::Base
  # source://gem-release//lib/gem/release/cmds/tag.rb#64
  def run; end

  private

  # @return [Boolean]
  #
  # source://gem-release//lib/gem/release/cmds/tag.rb#85
  def exists?; end

  # source://gem-release//lib/gem/release/cmds/tag.rb#93
  def push; end

  # @return [Boolean]
  #
  # source://gem-release//lib/gem/release/cmds/tag.rb#101
  def push?; end

  # source://gem-release//lib/gem/release/cmds/tag.rb#105
  def remote; end

  # source://gem-release//lib/gem/release/cmds/tag.rb#89
  def tag; end

  # source://gem-release//lib/gem/release/cmds/tag.rb#79
  def tag_and_push; end

  # source://gem-release//lib/gem/release/cmds/tag.rb#97
  def tag_name; end

  # source://gem-release//lib/gem/release/cmds/tag.rb#109
  def target_version; end

  # source://gem-release//lib/gem/release/cmds/tag.rb#74
  def validate; end
end

# source://gem-release//lib/gem/release/cmds/tag.rb#59
Gem::Release::Cmds::Tag::CMDS = T.let(T.unsafe(nil), Hash)

# source://gem-release//lib/gem/release/cmds/tag.rb#26
Gem::Release::Cmds::Tag::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://gem-release//lib/gem/release/cmds/tag.rb#32
Gem::Release::Cmds::Tag::DESCR = T.let(T.unsafe(nil), Hash)

# source://gem-release//lib/gem/release/cmds/tag.rb#50
Gem::Release::Cmds::Tag::MSGS = T.let(T.unsafe(nil), Hash)

# source://gem-release//lib/gem/release/config/env.rb#5
class Gem::Release::Config
  include ::Gem::Release::Helper::Hash

  # @return [Config] a new instance of Config
  #
  # source://gem-release//lib/gem/release/config.rb#14
  def initialize; end

  # source://gem-release//lib/gem/release/config.rb#18
  def [](key); end

  # source://gem-release//lib/gem/release/config.rb#26
  def common; end

  # source://gem-release//lib/gem/release/config.rb#22
  def for(key); end

  # Returns the value of attribute opts.
  #
  # source://gem-release//lib/gem/release/config.rb#10
  def opts; end

  private

  # source://gem-release//lib/gem/release/config.rb#32
  def load; end

  # source://gem-release//lib/gem/release/config.rb#37
  def sources; end
end

# source://gem-release//lib/gem/release/config/env.rb#6
class Gem::Release::Config::Env
  include ::Gem::Release::Helper::Hash

  # source://gem-release//lib/gem/release/config/env.rb#13
  def load; end

  private

  # source://gem-release//lib/gem/release/config/env.rb#34
  def cast(value); end

  # source://gem-release//lib/gem/release/config/env.rb#25
  def keys_for(key); end

  # source://gem-release//lib/gem/release/config/env.rb#29
  def to_hash(keys, value); end

  # source://gem-release//lib/gem/release/config/env.rb#21
  def vars; end
end

# source://gem-release//lib/gem/release/config/env.rb#11
Gem::Release::Config::Env::FALSE = T.let(T.unsafe(nil), Regexp)

# source://gem-release//lib/gem/release/config/env.rb#9
Gem::Release::Config::Env::PREFIX = T.let(T.unsafe(nil), String)

# source://gem-release//lib/gem/release/config/env.rb#10
Gem::Release::Config::Env::TRUE = T.let(T.unsafe(nil), Regexp)

# source://gem-release//lib/gem/release/config/files.rb#7
class Gem::Release::Config::Files
  include ::Gem::Release::Helper::Hash

  # source://gem-release//lib/gem/release/config/files.rb#17
  def load; end

  private

  # source://gem-release//lib/gem/release/config/files.rb#24
  def path; end

  # source://gem-release//lib/gem/release/config/files.rb#28
  def paths; end
end

# source://gem-release//lib/gem/release/config/files.rb#10
Gem::Release::Config::Files::PATHS = T.let(T.unsafe(nil), Array)

# source://gem-release//lib/gem/release/config.rb#12
Gem::Release::Config::SOURCES = T.let(T.unsafe(nil), Array)

# source://gem-release//lib/gem/release/context/github.rb#7
class Gem::Release::Context
  # @return [Context] a new instance of Context
  #
  # source://gem-release//lib/gem/release/context.rb#11
  def initialize(*args); end

  # source://gem-release//lib/gem/release/context.rb#38
  def abort(str); end

  # Returns the value of attribute config.
  #
  # source://gem-release//lib/gem/release/context.rb#9
  def config; end

  # Sets the attribute config
  #
  # @param value the value to set the attribute config to.
  #
  # source://gem-release//lib/gem/release/context.rb#9
  def config=(_arg0); end

  # Returns the value of attribute gem.
  #
  # source://gem-release//lib/gem/release/context.rb#9
  def gem; end

  # Sets the attribute gem
  #
  # @param value the value to set the attribute gem to.
  #
  # source://gem-release//lib/gem/release/context.rb#9
  def gem=(_arg0); end

  # source://gem-release//lib/gem/release/context.rb#24
  def gem_cmd(cmd, *args); end

  # Returns the value of attribute git.
  #
  # source://gem-release//lib/gem/release/context.rb#9
  def git; end

  # Sets the attribute git
  #
  # @param value the value to set the attribute git to.
  #
  # source://gem-release//lib/gem/release/context.rb#9
  def git=(_arg0); end

  # source://gem-release//lib/gem/release/context.rb#30
  def in_dirs(args, opts, &block); end

  # source://gem-release//lib/gem/release/context.rb#34
  def in_gem_dirs(args, opts, &block); end

  # source://gem-release//lib/gem/release/context.rb#20
  def run(cmd); end

  # Returns the value of attribute ui.
  #
  # source://gem-release//lib/gem/release/context.rb#9
  def ui; end

  # Sets the attribute ui
  #
  # @param value the value to set the attribute ui to.
  #
  # source://gem-release//lib/gem/release/context.rb#9
  def ui=(_arg0); end
end

# source://gem-release//lib/gem/release/context/gem.rb#6
class Gem::Release::Context::Gem
  # @return [Gem] a new instance of Gem
  #
  # source://gem-release//lib/gem/release/context/gem.rb#9
  def initialize(name); end

  # source://gem-release//lib/gem/release/context/gem.rb#18
  def filename; end

  # Returns the value of attribute name.
  #
  # source://gem-release//lib/gem/release/context/gem.rb#7
  def name; end

  # Returns the value of attribute spec.
  #
  # source://gem-release//lib/gem/release/context/gem.rb#7
  def spec; end

  # source://gem-release//lib/gem/release/context/gem.rb#22
  def spec_filename; end

  # source://gem-release//lib/gem/release/context/gem.rb#14
  def version; end
end

# source://gem-release//lib/gem/release/context/gemspec.rb#4
class Gem::Release::Context::Gemspec < ::Struct
  # @return [Gemspec] a new instance of Gemspec
  #
  # source://gem-release//lib/gem/release/context/gemspec.rb#7
  def initialize(*_arg0); end

  # @return [Boolean]
  #
  # source://gem-release//lib/gem/release/context/gemspec.rb#12
  def exists?; end

  # Returns the value of attribute filename.
  #
  # source://gem-release//lib/gem/release/context/gemspec.rb#5
  def filename; end

  # source://gem-release//lib/gem/release/context/gemspec.rb#24
  def gem_filename; end

  # source://gem-release//lib/gem/release/context/gemspec.rb#16
  def gem_name; end

  # source://gem-release//lib/gem/release/context/gemspec.rb#32
  def homepage; end

  # source://gem-release//lib/gem/release/context/gemspec.rb#28
  def metadata; end

  # source://gem-release//lib/gem/release/context/gemspec.rb#20
  def version; end

  private

  # source://gem-release//lib/gem/release/context/gemspec.rb#43
  def filenames; end

  # source://gem-release//lib/gem/release/context/gemspec.rb#38
  def gemspec; end
end

# source://gem-release//lib/gem/release/context/git.rb#4
class Gem::Release::Context::Git
  # @return [Boolean]
  #
  # source://gem-release//lib/gem/release/context/git.rb#5
  def clean?; end

  # source://gem-release//lib/gem/release/context/git.rb#9
  def remotes; end

  # source://gem-release//lib/gem/release/context/git.rb#13
  def tags; end

  # source://gem-release//lib/gem/release/context/git.rb#22
  def user_email; end

  # source://gem-release//lib/gem/release/context/git.rb#27
  def user_login; end

  # source://gem-release//lib/gem/release/context/git.rb#17
  def user_name; end
end

# source://gem-release//lib/gem/release/context/github.rb#8
class Gem::Release::Context::Github
  include ::Gem::Release::Helper::Http

  # @return [Github] a new instance of Github
  #
  # source://gem-release//lib/gem/release/context/github.rb#19
  def initialize(repo, data); end

  # Returns the value of attribute data.
  #
  # source://gem-release//lib/gem/release/context/github.rb#17
  def data; end

  # @raise [Abort]
  #
  # source://gem-release//lib/gem/release/context/github.rb#24
  def release; end

  # Returns the value of attribute repo.
  #
  # source://gem-release//lib/gem/release/context/github.rb#17
  def repo; end

  private

  # source://gem-release//lib/gem/release/context/github.rb#39
  def body; end

  # source://gem-release//lib/gem/release/context/github.rb#48
  def headers; end

  # @return [Boolean]
  #
  # source://gem-release//lib/gem/release/context/github.rb#56
  def pre?(version); end

  # source://gem-release//lib/gem/release/context/github.rb#35
  def url; end
end

# source://gem-release//lib/gem/release/context/github.rb#13
Gem::Release::Context::Github::MSGS = T.let(T.unsafe(nil), Hash)

# source://gem-release//lib/gem/release/context/github.rb#11
Gem::Release::Context::Github::URL = T.let(T.unsafe(nil), String)

# source://gem-release//lib/gem/release/context/paths.rb#6
class Gem::Release::Context::Paths < ::Struct; end

# source://gem-release//lib/gem/release/context/paths.rb#7
class Gem::Release::Context::Paths::Base < ::Struct
  # source://gem-release//lib/gem/release/context/paths.rb#12
  def current; end

  # source://gem-release//lib/gem/release/context/paths.rb#16
  def cwd; end

  # source://gem-release//lib/gem/release/context/paths.rb#8
  def in_dir(dir, &block); end
end

# source://gem-release//lib/gem/release/context/paths.rb#44
class Gem::Release::Context::Paths::ByGemspecs < ::Gem::Release::Context::Paths::Base
  # source://gem-release//lib/gem/release/context/paths.rb#45
  def in_dirs(&block); end

  private

  # source://gem-release//lib/gem/release/context/paths.rb#60
  def by_gemspecs; end

  # source://gem-release//lib/gem/release/context/paths.rb#65
  def by_names; end

  # source://gem-release//lib/gem/release/context/paths.rb#53
  def dirs; end

  # source://gem-release//lib/gem/release/context/paths.rb#70
  def gemspec; end

  # source://gem-release//lib/gem/release/context/paths.rb#79
  def gemspecs(recurse = T.unsafe(nil)); end

  # source://gem-release//lib/gem/release/context/paths.rb#75
  def name_for(path); end
end

# source://gem-release//lib/gem/release/context/paths.rb#21
class Gem::Release::Context::Paths::ByNames < ::Gem::Release::Context::Paths::Base
  # source://gem-release//lib/gem/release/context/paths.rb#22
  def in_dirs(&block); end

  private

  # source://gem-release//lib/gem/release/context/paths.rb#39
  def dir; end

  # source://gem-release//lib/gem/release/context/paths.rb#31
  def dirs; end

  # source://gem-release//lib/gem/release/context/paths.rb#35
  def dirs_by_names; end
end

# source://gem-release//lib/gem/release/context/ui.rb#4
module Gem::Release::Context::Ui
  class << self
    # source://gem-release//lib/gem/release/context/ui.rb#6
    def new(opts); end
  end
end

# source://gem-release//lib/gem/release/context/ui.rb#14
class Gem::Release::Context::Ui::Base < ::Struct
  # source://gem-release//lib/gem/release/context/ui.rb#21
  def puts(*str); end

  # source://gem-release//lib/gem/release/context/ui.rb#17
  def stdout; end

  # Sets the attribute stdout
  #
  # @param value the value to set the attribute stdout to.
  #
  # source://gem-release//lib/gem/release/context/ui.rb#15
  def stdout=(_arg0); end
end

# source://gem-release//lib/gem/release/context/ui.rb#56
module Gem::Release::Context::Ui::Colors
  # source://gem-release//lib/gem/release/context/ui.rb#66
  def colored(color, str); end
end

# source://gem-release//lib/gem/release/context/ui.rb#57
Gem::Release::Context::Ui::Colors::COLORS = T.let(T.unsafe(nil), Hash)

# source://gem-release//lib/gem/release/context/ui.rb#26
class Gem::Release::Context::Ui::Pipe < ::Gem::Release::Context::Ui::Base
  # source://gem-release//lib/gem/release/context/ui.rb#28
  def announce(msg, args = T.unsafe(nil), _ = T.unsafe(nil)); end

  # source://gem-release//lib/gem/release/context/ui.rb#34
  def cmd(*_arg0); end

  # source://gem-release//lib/gem/release/context/ui.rb#28
  def error(msg, args = T.unsafe(nil), _ = T.unsafe(nil)); end

  # source://gem-release//lib/gem/release/context/ui.rb#28
  def info(msg, args = T.unsafe(nil), _ = T.unsafe(nil)); end

  # source://gem-release//lib/gem/release/context/ui.rb#28
  def notice(msg, args = T.unsafe(nil), _ = T.unsafe(nil)); end

  # source://gem-release//lib/gem/release/context/ui.rb#34
  def success(*_arg0); end

  # source://gem-release//lib/gem/release/context/ui.rb#28
  def warn(msg, args = T.unsafe(nil), _ = T.unsafe(nil)); end

  private

  # source://gem-release//lib/gem/release/context/ui.rb#39
  def format_msg(msg, args); end

  # source://gem-release//lib/gem/release/context/ui.rb#45
  def quote_spaced(str); end
end

# source://gem-release//lib/gem/release/context/ui.rb#50
class Gem::Release::Context::Ui::Quiet < ::Gem::Release::Context::Ui::Base
  # source://gem-release//lib/gem/release/context/ui.rb#52
  def announce(*_arg0); end

  # source://gem-release//lib/gem/release/context/ui.rb#52
  def cmd(*_arg0); end

  # source://gem-release//lib/gem/release/context/ui.rb#52
  def error(*_arg0); end

  # source://gem-release//lib/gem/release/context/ui.rb#52
  def info(*_arg0); end

  # source://gem-release//lib/gem/release/context/ui.rb#52
  def notice(*_arg0); end

  # source://gem-release//lib/gem/release/context/ui.rb#52
  def success(*_arg0); end

  # source://gem-release//lib/gem/release/context/ui.rb#52
  def warn(*_arg0); end
end

# source://gem-release//lib/gem/release/context/ui.rb#71
class Gem::Release::Context::Ui::Tty < ::Gem::Release::Context::Ui::Base
  include ::Gem::Release::Context::Ui::Colors

  # source://gem-release//lib/gem/release/context/ui.rb#74
  def announce(msg, args = T.unsafe(nil), msgs = T.unsafe(nil)); end

  # source://gem-release//lib/gem/release/context/ui.rb#104
  def cmd(msg); end

  # source://gem-release//lib/gem/release/context/ui.rb#94
  def error(msg, args = T.unsafe(nil), msgs = T.unsafe(nil)); end

  # source://gem-release//lib/gem/release/context/ui.rb#79
  def info(msg, args = T.unsafe(nil), msgs = T.unsafe(nil)); end

  # source://gem-release//lib/gem/release/context/ui.rb#84
  def notice(msg, args = T.unsafe(nil), msgs = T.unsafe(nil)); end

  # source://gem-release//lib/gem/release/context/ui.rb#99
  def success(msg); end

  # source://gem-release//lib/gem/release/context/ui.rb#89
  def warn(msg, args = T.unsafe(nil), msgs = T.unsafe(nil)); end

  private

  # source://gem-release//lib/gem/release/context/ui.rb#110
  def colored(color, str); end

  # source://gem-release//lib/gem/release/context/ui.rb#114
  def format_msg(msg, args, msgs); end

  # source://gem-release//lib/gem/release/context/ui.rb#119
  def with_spacing(str, space); end
end

# source://gem-release//lib/gem/release/data.rb#7
class Gem::Release::Data < ::Struct
  include ::Gem::Release::Helper::String

  # source://gem-release//lib/gem/release/data.rb#10
  def data; end

  private

  # source://gem-release//lib/gem/release/data.rb#68
  def bin_files; end

  # source://gem-release//lib/gem/release/data.rb#64
  def files; end

  # source://gem-release//lib/gem/release/data.rb#32
  def gem_name; end

  # source://gem-release//lib/gem/release/data.rb#36
  def gem_path; end

  # source://gem-release//lib/gem/release/data.rb#52
  def homepage; end

  # source://gem-release//lib/gem/release/data.rb#60
  def license; end

  # source://gem-release//lib/gem/release/data.rb#56
  def licenses; end

  # source://gem-release//lib/gem/release/data.rb#28
  def module_names; end

  # source://gem-release//lib/gem/release/data.rb#72
  def strategy; end

  # source://gem-release//lib/gem/release/data.rb#48
  def user_email; end

  # source://gem-release//lib/gem/release/data.rb#40
  def user_login; end

  # source://gem-release//lib/gem/release/data.rb#44
  def user_name; end
end

# source://gem-release//lib/gem/release/files/templates.rb#3
module Gem::Release::Files; end

# source://gem-release//lib/gem/release/files/template/context.rb#4
class Gem::Release::Files::Template
  # @return [Template] a new instance of Template
  #
  # source://gem-release//lib/gem/release/files/template.rb#21
  def initialize(source, target, data, opts); end

  # Returns the value of attribute data.
  #
  # source://gem-release//lib/gem/release/files/template.rb#19
  def data; end

  # Sets the attribute data
  #
  # @param value the value to set the attribute data to.
  #
  # source://gem-release//lib/gem/release/files/template.rb#19
  def data=(_arg0); end

  # @return [Boolean]
  #
  # source://gem-release//lib/gem/release/files/template.rb#43
  def exists?; end

  # source://gem-release//lib/gem/release/files/template.rb#30
  def filename; end

  # Returns the value of attribute opts.
  #
  # source://gem-release//lib/gem/release/files/template.rb#19
  def opts; end

  # Sets the attribute opts
  #
  # @param value the value to set the attribute opts to.
  #
  # source://gem-release//lib/gem/release/files/template.rb#19
  def opts=(_arg0); end

  # Returns the value of attribute source.
  #
  # source://gem-release//lib/gem/release/files/template.rb#19
  def source; end

  # Sets the attribute source
  #
  # @param value the value to set the attribute source to.
  #
  # source://gem-release//lib/gem/release/files/template.rb#19
  def source=(_arg0); end

  # Returns the value of attribute target.
  #
  # source://gem-release//lib/gem/release/files/template.rb#19
  def target; end

  # Sets the attribute target
  #
  # @param value the value to set the attribute target to.
  #
  # source://gem-release//lib/gem/release/files/template.rb#19
  def target=(_arg0); end

  # source://gem-release//lib/gem/release/files/template.rb#34
  def write; end

  private

  # source://gem-release//lib/gem/release/files/template.rb#57
  def binding; end

  # source://gem-release//lib/gem/release/files/template.rb#61
  def context; end

  # source://gem-release//lib/gem/release/files/template.rb#49
  def render; end

  # source://gem-release//lib/gem/release/files/template.rb#53
  def template; end
end

# source://gem-release//lib/gem/release/files/template/context.rb#5
class Gem::Release::Files::Template::Context < ::OpenStruct
  # source://gem-release//lib/gem/release/files/template/context.rb#23
  def define(type, &block); end
end

# source://gem-release//lib/gem/release/files/template/context.rb#6
class Gem::Release::Files::Template::Context::Const < ::Struct
  # source://gem-release//lib/gem/release/files/template/context.rb#14
  def build(names, &block); end

  # source://gem-release//lib/gem/release/files/template/context.rb#7
  def define(&block); end

  # source://gem-release//lib/gem/release/files/template/context.rb#18
  def indent(str, level); end
end

# source://gem-release//lib/gem/release/files/template.rb#10
Gem::Release::Files::Template::FILES = T.let(T.unsafe(nil), Hash)

# source://gem-release//lib/gem/release/files/template.rb#28
Gem::Release::Files::Template::PATH = T.let(T.unsafe(nil), String)

# source://gem-release//lib/gem/release/files/templates.rb#4
class Gem::Release::Files::Templates < ::Struct
  # source://gem-release//lib/gem/release/files/templates.rb#41
  def [](filename); end

  # source://gem-release//lib/gem/release/files/templates.rb#45
  def all; end

  # source://gem-release//lib/gem/release/files/templates.rb#50
  def builtin; end

  # source://gem-release//lib/gem/release/files/templates.rb#54
  def custom; end

  # source://gem-release//lib/gem/release/files/templates.rb#58
  def executable; end

  # source://gem-release//lib/gem/release/files/templates.rb#62
  def license; end

  # source://gem-release//lib/gem/release/files/templates.rb#66
  def templates_for(sources, files = T.unsafe(nil), opts = T.unsafe(nil)); end

  class << self
    # source://gem-release//lib/gem/release/files/templates.rb#29
    def executable(target); end

    # source://gem-release//lib/gem/release/files/templates.rb#35
    def license(name, data); end
  end
end

# source://gem-release//lib/gem/release/files/templates.rb#5
Gem::Release::Files::Templates::BUILTIN = T.let(T.unsafe(nil), Array)

# source://gem-release//lib/gem/release/files/templates.rb#11
Gem::Release::Files::Templates::CUSTOM = T.let(T.unsafe(nil), Array)

# source://gem-release//lib/gem/release/files/templates.rb#17
Gem::Release::Files::Templates::EXECUTABLE = T.let(T.unsafe(nil), Array)

# source://gem-release//lib/gem/release/files/templates/group.rb#5
class Gem::Release::Files::Templates::Group
  # @return [Group] a new instance of Group
  #
  # source://gem-release//lib/gem/release/files/templates/group.rb#8
  def initialize(groups, data, sources, files); end

  # source://gem-release//lib/gem/release/files/templates/group.rb#15
  def all; end

  # Returns the value of attribute data.
  #
  # source://gem-release//lib/gem/release/files/templates/group.rb#6
  def data; end

  # Returns the value of attribute files.
  #
  # source://gem-release//lib/gem/release/files/templates/group.rb#6
  def files; end

  # Returns the value of attribute groups.
  #
  # source://gem-release//lib/gem/release/files/templates/group.rb#6
  def groups; end

  # Returns the value of attribute sources.
  #
  # source://gem-release//lib/gem/release/files/templates/group.rb#6
  def sources; end

  private

  # source://gem-release//lib/gem/release/files/templates/group.rb#34
  def paths; end

  # source://gem-release//lib/gem/release/files/templates/group.rb#41
  def paths_for(group); end

  # source://gem-release//lib/gem/release/files/templates/group.rb#24
  def pattern; end

  # source://gem-release//lib/gem/release/files/templates/group.rb#30
  def relative(file); end
end

# source://gem-release//lib/gem/release/files/templates.rb#23
Gem::Release::Files::Templates::LICENSE = T.let(T.unsafe(nil), Array)

# source://gem-release//lib/gem/release/files/version.rb#6
class Gem::Release::Files::Version < ::Struct
  # source://gem-release//lib/gem/release/files/version.rb#17
  def bump; end

  # @return [Boolean]
  #
  # source://gem-release//lib/gem/release/files/version.rb#13
  def exists?; end

  # source://gem-release//lib/gem/release/files/version.rb#25
  def from; end

  # source://gem-release//lib/gem/release/files/version.rb#21
  def path; end

  # source://gem-release//lib/gem/release/files/version.rb#29
  def to; end

  # source://gem-release//lib/gem/release/files/version.rb#33
  def to_h; end

  private

  # source://gem-release//lib/gem/release/files/version.rb#54
  def bumped; end

  # source://gem-release//lib/gem/release/files/version.rb#58
  def content; end

  # Returns the value of attribute name
  #
  # @return [Object] the current value of name
  #
  # source://gem-release//lib/gem/release/files/version.rb#70
  def name; end

  # @raise [Abort]
  #
  # source://gem-release//lib/gem/release/files/version.rb#46
  def not_found; end

  # source://gem-release//lib/gem/release/files/version.rb#50
  def number; end

  # source://gem-release//lib/gem/release/files/version.rb#66
  def path_to(path); end

  # source://gem-release//lib/gem/release/files/version.rb#39
  def paths; end

  # source://gem-release//lib/gem/release/files/version.rb#62
  def to_num(*args); end
end

# source://gem-release//lib/gem/release/files/version.rb#9
Gem::Release::Files::Version::PRE_RELEASE = T.let(T.unsafe(nil), Regexp)

# source://gem-release//lib/gem/release/files/version.rb#8
Gem::Release::Files::Version::RELEASE = T.let(T.unsafe(nil), Regexp)

# source://gem-release//lib/gem/release/files/version.rb#11
Gem::Release::Files::Version::STAGES = T.let(T.unsafe(nil), Array)

# source://gem-release//lib/gem/release/files/version.rb#7
Gem::Release::Files::Version::VERSION = T.let(T.unsafe(nil), Regexp)

# source://gem-release//lib/gem/release/helper.rb#5
module Gem::Release::Helper
  extend ::Forwardable

  # source://gem-release//lib/gem/release/helper.rb#36
  def abort(msg, *args); end

  # source://gem-release//lib/gem/release/helper.rb#31
  def announce(msg, *args); end

  # source://gem-release//lib/gem/release/helper.rb#13
  def cmd(cmd, *args); end

  # source://gem-release//lib/gem/release/helper.rb#31
  def error(msg, *args); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def gem(*args, **_arg1, &block); end

  # source://gem-release//lib/gem/release/helper.rb#24
  def gem_cmd(cmd, *args); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def git(*args, **_arg1, &block); end

  # source://gem-release//lib/gem/release/helper.rb#31
  def info(msg, *args); end

  # source://gem-release//lib/gem/release/helper.rb#31
  def notice(msg, *args); end

  # source://gem-release//lib/gem/release/helper.rb#9
  def run(cmd); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def ui(*args, **_arg1, &block); end

  # source://gem-release//lib/gem/release/helper.rb#31
  def warn(msg, *args); end
end

# source://gem-release//lib/gem/release/helper/hash.rb#4
module Gem::Release::Helper::Hash
  # source://gem-release//lib/gem/release/helper/hash.rb#13
  def deep_merge(hash, other); end

  # source://gem-release//lib/gem/release/helper/hash.rb#29
  def except(hash, *keys); end

  # source://gem-release//lib/gem/release/helper/hash.rb#25
  def only(hash, *keys); end

  # source://gem-release//lib/gem/release/helper/hash.rb#17
  def symbolize_keys(hash); end
end

# source://gem-release//lib/gem/release/helper/hash.rb#5
Gem::Release::Helper::Hash::MERGER = T.let(T.unsafe(nil), Proc)

# source://gem-release//lib/gem/release/helper/http.rb#7
module Gem::Release::Helper::Http
  # source://gem-release//lib/gem/release/helper/http.rb#33
  def post(url, body = T.unsafe(nil), headers = T.unsafe(nil)); end
end

# source://gem-release//lib/gem/release/helper/http.rb#8
class Gem::Release::Helper::Http::Client < ::Struct
  # source://gem-release//lib/gem/release/helper/http.rb#9
  def request; end

  private

  # source://gem-release//lib/gem/release/helper/http.rb#22
  def client; end

  # source://gem-release//lib/gem/release/helper/http.rb#28
  def const; end

  # source://gem-release//lib/gem/release/helper/http.rb#18
  def uri; end
end

# source://gem-release//lib/gem/release/helper/string.rb#26
module Gem::Release::Helper::String
  # source://gem-release//lib/gem/release/helper/string.rb#27
  def camelize(str); end

  # source://gem-release//lib/gem/release/helper/string.rb#31
  def underscore(str); end

  # source://gem-release//lib/gem/release/helper/string.rb#37
  def wrap(str, width); end
end

# source://gem-release//lib/gem/release/helper/string.rb#4
class Gem::Release::Helper::Wrapper < ::Struct
  # source://gem-release//lib/gem/release/helper/string.rb#7
  def apply; end

  private

  # source://gem-release//lib/gem/release/helper/string.rb#19
  def wrap_lines(str); end

  # source://gem-release//lib/gem/release/helper/string.rb#14
  def wrap_paragraph(str); end
end

# source://gem-release//lib/gem/release/helper/string.rb#5
Gem::Release::Helper::Wrapper::MARKDOWN = T.let(T.unsafe(nil), Regexp)

# source://gem-release//lib/gem/release/support/registry.rb#3
module Gem::Release::Registry
  include ::Gem::Release::Registry::InstanceMethods

  mixes_in_class_methods ::Gem::Release::Registry::ClassMethods

  class << self
    # @private
    #
    # source://gem-release//lib/gem/release/support/registry.rb#5
    def included(const); end
  end
end

# source://gem-release//lib/gem/release/support/registry.rb#29
module Gem::Release::Registry::ClassMethods
  # source://gem-release//lib/gem/release/support/registry.rb#32
  def [](key); end

  # source://gem-release//lib/gem/release/support/registry.rb#36
  def register(key); end

  # source://gem-release//lib/gem/release/support/registry.rb#41
  def registry; end

  # Returns the value of attribute registry_key.
  #
  # source://gem-release//lib/gem/release/support/registry.rb#30
  def registry_key; end

  # source://gem-release//lib/gem/release/support/registry.rb#45
  def underscore(string); end
end

# source://gem-release//lib/gem/release/support/registry.rb#52
module Gem::Release::Registry::InstanceMethods
  # source://gem-release//lib/gem/release/support/registry.rb#53
  def registry_key; end
end

# source://gem-release//lib/gem/release/support/registry.rb#11
class Gem::Release::Registry::Registry
  # source://gem-release//lib/gem/release/support/registry.rb#16
  def [](key); end

  # source://gem-release//lib/gem/release/support/registry.rb#12
  def []=(key, object); end

  # source://gem-release//lib/gem/release/support/registry.rb#20
  def cmds; end

  # source://gem-release//lib/gem/release/support/registry.rb#24
  def registry; end
end

# source://gem-release//lib/gem/release.rb#5
Gem::Release::STRATEGIES = T.let(T.unsafe(nil), Hash)

# source://gem-release//lib/gem/release/version.rb#5
Gem::Release::VERSION = T.let(T.unsafe(nil), String)

# source://gem-release//lib/gem/release/version/number.rb#3
module Gem::Release::Version; end

# source://gem-release//lib/gem/release/version/number.rb#4
class Gem::Release::Version::Number < ::Struct
  # source://gem-release//lib/gem/release/version/number.rb#10
  def bump; end

  # @return [Boolean]
  #
  # source://gem-release//lib/gem/release/version/number.rb#18
  def pre?; end

  private

  # @return [Boolean]
  #
  # source://gem-release//lib/gem/release/version/number.rb#72
  def fresh_pre_release?; end

  # @return [Boolean]
  #
  # source://gem-release//lib/gem/release/version/number.rb#80
  def from_pre_release?; end

  # @return [Boolean]
  #
  # source://gem-release//lib/gem/release/version/number.rb#76
  def from_release?; end

  # source://gem-release//lib/gem/release/version/number.rb#88
  def from_stage; end

  # source://gem-release//lib/gem/release/version/number.rb#28
  def major; end

  # source://gem-release//lib/gem/release/version/number.rb#109
  def matches; end

  # source://gem-release//lib/gem/release/version/number.rb#34
  def minor; end

  # source://gem-release//lib/gem/release/version/number.rb#59
  def num; end

  # @raise [Abort]
  #
  # source://gem-release//lib/gem/release/version/number.rb#113
  def parse; end

  # source://gem-release//lib/gem/release/version/number.rb#102
  def parts; end

  # source://gem-release//lib/gem/release/version/number.rb#41
  def patch; end

  # @return [Boolean]
  #
  # source://gem-release//lib/gem/release/version/number.rb#84
  def same_stage?; end

  # @return [Boolean]
  #
  # source://gem-release//lib/gem/release/version/number.rb#24
  def specific?; end

  # source://gem-release//lib/gem/release/version/number.rb#48
  def stage; end

  # source://gem-release//lib/gem/release/version/number.rb#52
  def stage_delim; end

  # Returns the value of attribute target
  #
  # @return [Object] the current value of target
  #
  # source://gem-release//lib/gem/release/version/number.rb#92
  def target; end

  # @return [Boolean]
  #
  # source://gem-release//lib/gem/release/version/number.rb#64
  def to?(*targets); end

  # @return [Boolean]
  #
  # source://gem-release//lib/gem/release/version/number.rb#68
  def to_release?; end

  # @raise [Abort]
  #
  # source://gem-release//lib/gem/release/version/number.rb#96
  def validate_stage; end
end

# source://gem-release//lib/gem/release/version/number.rb#5
Gem::Release::Version::Number::NUMBER = T.let(T.unsafe(nil), Regexp)

# source://gem-release//lib/gem/release/version/number.rb#6
Gem::Release::Version::Number::PRE_RELEASE = T.let(T.unsafe(nil), Regexp)

# source://gem-release//lib/gem/release/version/number.rb#8
Gem::Release::Version::Number::STAGES = T.let(T.unsafe(nil), Array)

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `skylight` gem.
# Please instead update this file by running `bin/tapioca gem skylight`.

# A HighLine object is a "high-level line oriented" shell over an input and an
# output stream.  HighLine simplifies common console interaction, effectively
# replacing puts() and gets().  User code can simply specify the question to ask
# and any details about user interaction, then leave the rest of the work to
# HighLine.  When HighLine.ask() returns, you'll have the answer you requested,
# even if HighLine had to ask many times, validate results, perform range
# checking, convert types, etc.
#
# source://skylight//lib/skylight/vendor/cli/highline/system_extensions.rb#10
class HighLine
  include ::HighLine::SystemExtensions

  # Create an instance of HighLine, connected to the streams _input_
  # and _output_.
  #
  # @return [HighLine] a new instance of HighLine
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#176
  def initialize(input = T.unsafe(nil), output = T.unsafe(nil), wrap_at = T.unsafe(nil), page_at = T.unsafe(nil), indent_size = T.unsafe(nil), indent_level = T.unsafe(nil)); end

  # A shortcut to HighLine.ask() a question that only accepts "yes" or "no"
  # answers ("y" and "n" are allowed) and returns +true+ or +false+
  # (+true+ for "yes").  If provided a +true+ value, _character_ will cause
  # HighLine to fetch a single character response. A block can be provided
  # to further configure the question as in HighLine.ask()
  #
  # Raises EOFError if input is exhausted.
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#222
  def agree(yes_or_no_question, character = T.unsafe(nil)); end

  # This method is the primary interface for user input.  Just provide a
  # _question_ to ask the user, the _answer_type_ you want returned, and
  # optionally a code block setting up details of how you want the question
  # handled.  See HighLine.say() for details on the format of _question_, and
  # HighLine::Question for more information about _answer_type_ and what's
  # valid in the code block.
  #
  # If <tt>@question</tt> is set before ask() is called, parameters are
  # ignored and that object (must be a HighLine::Question) is used to drive
  # the process instead.
  #
  # Raises EOFError if input is exhausted.
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#247
  def ask(question, answer_type = T.unsafe(nil), &details); end

  # This method is HighLine's menu handler.  For simple usage, you can just
  # pass all the menu items you wish to display.  At that point, choose() will
  # build and display a menu, walk the user through selection, and return
  # their choice among the provided items.  You might use this in a case
  # statement for quick and dirty menus.
  #
  # However, choose() is capable of much more.  If provided, a block will be
  # passed a HighLine::Menu object to configure.  Using this method, you can
  # customize all the details of menu handling from index display, to building
  # a complete shell-like menuing system.  See HighLine::Menu for all the
  # methods it responds to.
  #
  # Raises EOFError if input is exhausted.
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#328
  def choose(*items, &details); end

  # Works as an instance method, same as the class method
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#393
  def color(*args); end

  # Works as an instance method, same as the class method
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#388
  def color_code(*colors); end

  # Executes block or outputs statement with indentation
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#660
  def indent(increase = T.unsafe(nil), statement = T.unsafe(nil), multiline = T.unsafe(nil)); end

  # The indentation level
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#211
  def indent_level; end

  # The indentation level
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#211
  def indent_level=(_arg0); end

  # The indentation size
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#209
  def indent_size; end

  # The indentation size
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#209
  def indent_size=(_arg0); end

  # Outputs indentation with current settings
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#653
  def indentation; end

  # This method is a utility for quickly and easily laying out lists.  It can
  # be accessed within ERb replacements of any text that will be sent to the
  # user.
  #
  # The only required parameter is _items_, which should be the Array of items
  # to list.  A specified _mode_ controls how that list is formed and _option_
  # has different effects, depending on the _mode_.  Recognized modes are:
  #
  # <tt>:columns_across</tt>::         _items_ will be placed in columns,
  #                                    flowing from left to right.  If given,
  #                                    _option_ is the number of columns to be
  #                                    used.  When absent, columns will be
  #                                    determined based on _wrap_at_ or a
  #                                    default of 80 characters.
  # <tt>:columns_down</tt>::           Identical to <tt>:columns_across</tt>,
  #                                    save flow goes down.
  # <tt>:uneven_columns_across</tt>::  Like <tt>:columns_across</tt> but each
  #                                    column is sized independently.
  # <tt>:uneven_columns_down</tt>::    Like <tt>:columns_down</tt> but each
  #                                    column is sized independently.
  # <tt>:inline</tt>::                 All _items_ are placed on a single line.
  #                                    The last two _items_ are separated by
  #                                    _option_ or a default of " or ".  All
  #                                    other _items_ are separated by ", ".
  # <tt>:rows</tt>::                   The default mode.  Each of the _items_ is
  #                                    placed on its own line.  The _option_
  #                                    parameter is ignored in this mode.
  #
  # Each member of the _items_ Array is passed through ERb and thus can contain
  # their own expansions.  Color escape expansions do not contribute to the
  # final field width.
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#440
  def list(items, mode = T.unsafe(nil), option = T.unsafe(nil)); end

  # Indentation over multiple lines
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#207
  def multi_indent; end

  # Indentation over multiple lines
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#207
  def multi_indent=(_arg0); end

  # Outputs newline
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#682
  def newline; end

  # Returns the number of columns for the console, or a default it they cannot
  # be determined.
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#690
  def output_cols; end

  # Returns the number of rows for the console, or a default if they cannot be
  # determined.
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#701
  def output_rows; end

  # The current row setting for paging output.
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#205
  def page_at; end

  # Set to an integer value to cause HighLine to page output lines over the
  # indicated line limit.  When +nil+, the default, no paging occurs.  If
  # set to <tt>:auto</tt>, HighLine will attempt to determine the rows available
  # for the <tt>@output</tt> or use a sensible default.
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#646
  def page_at=(setting); end

  # The basic output method for HighLine objects.  If the provided _statement_
  # ends with a space or tab character, a newline will not be appended (output
  # will be flush()ed).  All other cases are passed straight to Kernel.puts().
  #
  # The _statement_ parameter is processed as an ERb template, supporting
  # embedded Ruby code.  The template is evaluated with a binding inside
  # the HighLine instance, providing easy access to the ANSI color constants
  # and the HighLine.color() method.
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#616
  def say(statement); end

  # Works as an instance method, same as the class method
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#403
  def uncolor(string); end

  # The current column setting for wrapping output.
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#203
  def wrap_at; end

  # Set to an integer value to cause HighLine to wrap output lines at the
  # indicated character limit.  When +nil+, the default, no wrapping occurs.  If
  # set to <tt>:auto</tt>, HighLine will attempt to determine the columns
  # available for the <tt>@output</tt> or use a sensible default.
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#636
  def wrap_at=(setting); end

  private

  # Returns the length of the passed +string_with_escapes+, minus and color
  # sequence escapes.
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#1029
  def actual_length(string_with_escapes); end

  # Ask user if they wish to continue paging output. Allows them to type "q" to
  # cancel the paging process.
  #
  # @return [Boolean]
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#992
  def continue_paging?; end

  # A helper method for sending the output stream and error and repeat
  # of the question.
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#733
  def explain_error(error); end

  # source://skylight//lib/skylight/vendor/cli/highline.rb#710
  def format_statement(statement); end

  # Collects an Array/Hash full of answers as described in
  # HighLine::Question.gather().
  #
  # Raises EOFError if input is exhausted.
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#748
  def gather; end

  # Read a line of input from the input stream and process whitespace as
  # requested by the Question object.
  #
  # If Question's _readline_ property is set, that library will be used to
  # fetch input.  *WARNING*:  This ignores the currently set input stream.
  #
  # Raises EOFError if input is exhausted.
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#822
  def get_line; end

  # Return a line or character of input, as requested for this question.
  # Character input will be returned as a single character String,
  # not an Integer.
  #
  # This question's _first_answer_ will be returned instead of input, if set.
  #
  # Raises EOFError if input is exhausted.
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#880
  def get_response; end

  # Page print a series of at most _page_at_ lines for _output_.  After each
  # page is printed, HighLine will pause until the user presses enter/return
  # then display the next page of data.
  #
  # Note that the final page of _output_ is *not* printed, but returned
  # instead.  This is to support any special handling for the final sequence.
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#977
  def page_print(output); end

  # A helper method used by HighLine::Question.verify_match
  # for finding whether a list of answers match or differ
  # from each other.
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#809
  def unique_answers(list = T.unsafe(nil)); end

  # Wrap a sequence of _lines_ at _wrap_at_ characters per line.  Existing
  # newlines will not be affected by this process, but additional newlines
  # may be added.
  #
  # source://skylight//lib/skylight/vendor/cli/highline.rb#1004
  def wrap(text); end

  class << self
    # source://skylight//lib/skylight/vendor/cli/highline/string_extensions.rb#27
    def String(s); end

    # source://skylight//lib/skylight/vendor/cli/highline/style.rb#10
    def Style(*args); end

    # This method provides easy access to ANSI color sequences, without the user
    # needing to remember to CLEAR at the end of each sequence.  Just pass the
    # _string_ to color, followed by a list of _colors_ you would like it to be
    # affected by.  The _colors_ can be HighLine class constants, or symbols
    # (:blue for BLUE, for example).  A CLEAR will automatically be embedded to
    # the end of the returned String.
    #
    # This method returns the original _string_ unchanged if HighLine::use_color?
    # is +false+.
    #
    # source://skylight//lib/skylight/vendor/cli/highline.rb#377
    def color(string, *colors); end

    # In case you just want the color code, without the embedding and the CLEAR
    #
    # source://skylight//lib/skylight/vendor/cli/highline.rb#383
    def color_code(*colors); end

    # Returns the current color scheme.
    #
    # source://skylight//lib/skylight/vendor/cli/highline.rb#80
    def color_scheme; end

    # Pass ColorScheme to _setting_ to set a HighLine color scheme.
    #
    # source://skylight//lib/skylight/vendor/cli/highline.rb#75
    def color_scheme=(setting); end

    # source://skylight//lib/skylight/vendor/cli/highline/string_extensions.rb#108
    def colorize_strings; end

    # For RGB colors:
    #
    # source://skylight//lib/skylight/vendor/cli/highline.rb#148
    def const_missing(name); end

    # For checking if the current version of HighLine supports RGB colors
    # Usage: HighLine.supports_rgb_color? rescue false   # rescue for compatibility with older versions
    # Note: color usage also depends on HighLine.use_color being set
    #
    # @return [Boolean]
    #
    # source://skylight//lib/skylight/vendor/cli/highline.rb#54
    def supports_rgb_color?; end

    # Pass +false+ to _setting_ to turn off HighLine's EOF tracking.
    #
    # source://skylight//lib/skylight/vendor/cli/highline.rb#62
    def track_eof=(setting); end

    # Returns true if HighLine is currently tracking EOF for input.
    #
    # @return [Boolean]
    #
    # source://skylight//lib/skylight/vendor/cli/highline.rb#67
    def track_eof?; end

    # Remove color codes from a string
    #
    # source://skylight//lib/skylight/vendor/cli/highline.rb#398
    def uncolor(string); end

    # Pass +false+ to _setting_ to turn off HighLine's color escapes.
    #
    # source://skylight//lib/skylight/vendor/cli/highline.rb#42
    def use_color=(setting); end

    # Returns true if HighLine is currently using color escapes.
    #
    # @return [Boolean]
    #
    # source://skylight//lib/skylight/vendor/cli/highline.rb#47
    def use_color?; end

    # Returns +true+ if HighLine is currently using a color scheme.
    #
    # @return [Boolean]
    #
    # source://skylight//lib/skylight/vendor/cli/highline.rb#85
    def using_color_scheme?; end
  end
end

# source://skylight//lib/skylight/vendor/cli/highline.rb#126
HighLine::BASIC_COLORS = T.let(T.unsafe(nil), Array)

# source://skylight//lib/skylight/vendor/cli/highline.rb#137
HighLine::BLACK = T.let(T.unsafe(nil), String)

# These RGB colors are approximate; see http://en.wikipedia.org/wiki/ANSI_escape_code
#
# source://skylight//lib/skylight/vendor/cli/highline.rb#111
HighLine::BLACK_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#144
HighLine::BLINK = T.let(T.unsafe(nil), String)

# Blink; support uncommon
#
# source://skylight//lib/skylight/vendor/cli/highline.rb#104
HighLine::BLINK_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#137
HighLine::BLUE = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#114
HighLine::BLUE_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#144
HighLine::BOLD = T.let(T.unsafe(nil), String)

# Bold; Note: bold + a color works as you'd expect,
#
# source://skylight//lib/skylight/vendor/cli/highline.rb#98
HighLine::BOLD_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#137
HighLine::BRIGHT_BLACK = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#132
HighLine::BRIGHT_BLACK_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#137
HighLine::BRIGHT_BLUE = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#132
HighLine::BRIGHT_BLUE_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#137
HighLine::BRIGHT_CYAN = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#132
HighLine::BRIGHT_CYAN_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#137
HighLine::BRIGHT_GRAY = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#132
HighLine::BRIGHT_GRAY_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#137
HighLine::BRIGHT_GREEN = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#132
HighLine::BRIGHT_GREEN_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#137
HighLine::BRIGHT_MAGENTA = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#132
HighLine::BRIGHT_MAGENTA_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#137
HighLine::BRIGHT_NONE = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#132
HighLine::BRIGHT_NONE_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#137
HighLine::BRIGHT_RED = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#132
HighLine::BRIGHT_RED_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#137
HighLine::BRIGHT_WHITE = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#132
HighLine::BRIGHT_WHITE_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#137
HighLine::BRIGHT_YELLOW = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#132
HighLine::BRIGHT_YELLOW_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#144
HighLine::CLEAR = T.let(T.unsafe(nil), String)

# Clear color settings
#
# source://skylight//lib/skylight/vendor/cli/highline.rb#96
HighLine::CLEAR_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#134
HighLine::COLORS = T.let(T.unsafe(nil), Array)

# source://skylight//lib/skylight/vendor/cli/highline.rb#144
HighLine::CONCEALED = T.let(T.unsafe(nil), String)

# Concealed; support uncommon
#
# source://skylight//lib/skylight/vendor/cli/highline.rb#106
HighLine::CONCEALED_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#137
HighLine::CYAN = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#117
HighLine::CYAN_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# ColorScheme objects encapsulate a named set of colors to be used in the
# HighLine.colors() method call.  For example, by applying a ColorScheme that
# has a <tt>:warning</tt> color then the following could be used:
#
#   colors("This is a warning", :warning)
#
# A ColorScheme contains named sets of HighLine color constants.
#
# Example: Instantiating a color scheme, applying it to HighLine,
# and using it:
#
#   ft = HighLine::ColorScheme.new do |cs|
#          cs[:headline]        = [ :bold, :yellow, :on_black ]
#          cs[:horizontal_line] = [ :bold, :white ]
#          cs[:even_row]        = [ :green ]
#          cs[:odd_row]         = [ :magenta ]
#        end
#
#   HighLine.color_scheme = ft
#   say("<%= color('Headline', :headline) %>")
#   say("<%= color('-'*20, :horizontal_line) %>")
#   i = true
#   ("A".."D").each do |row|
#      if i then
#        say("<%= color('#{row}', :even_row ) %>")
#      else
#        say("<%= color('#{row}', :odd_row) %>")
#      end
#      i = !i
#   end
#
# source://skylight//lib/skylight/vendor/cli/highline/color_scheme.rb#42
class HighLine::ColorScheme
  # Create an instance of HighLine::ColorScheme. The customization can
  # happen as a passed in Hash or via the yielded block.  Keys are
  # converted to <tt>:symbols</tt> and values are converted to HighLine
  # constants.
  #
  # @return [ColorScheme] a new instance of ColorScheme
  # @yield [_self]
  # @yieldparam _self [HighLine::ColorScheme] the object that the method was called on
  #
  # source://skylight//lib/skylight/vendor/cli/highline/color_scheme.rb#49
  def initialize(h = T.unsafe(nil)); end

  # Allow the scheme to be accessed like a Hash.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/color_scheme.rb#68
  def [](color_tag); end

  # Allow the scheme to be set like a Hash.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/color_scheme.rb#84
  def []=(color_tag, constants); end

  # Retrieve the original form of the scheme
  #
  # source://skylight//lib/skylight/vendor/cli/highline/color_scheme.rb#73
  def definition(color_tag); end

  # Does this color scheme include the given tag name?
  #
  # @return [Boolean]
  #
  # source://skylight//lib/skylight/vendor/cli/highline/color_scheme.rb#63
  def include?(color_tag); end

  # Retrieve the keys in the scheme
  #
  # source://skylight//lib/skylight/vendor/cli/highline/color_scheme.rb#79
  def keys; end

  # Load multiple colors from key/value pairs.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/color_scheme.rb#56
  def load_from_hash(h); end

  # Retrieve the color scheme hash (in original definition format)
  #
  # source://skylight//lib/skylight/vendor/cli/highline/color_scheme.rb#90
  def to_hash; end

  private

  # Return a normalized representation of a color setting.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/color_scheme.rb#103
  def to_constant(v); end

  # Return a normalized representation of a color name.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/color_scheme.rb#98
  def to_symbol(t); end
end

# source://skylight//lib/skylight/vendor/cli/highline.rb#144
HighLine::DARK = T.let(T.unsafe(nil), String)

# for example bold black. Bold without a color displays
# the system-defined bold color (e.g. red on Mac iTerm)
#
# source://skylight//lib/skylight/vendor/cli/highline.rb#101
HighLine::DARK_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# Erase the character under the cursor.
#
# source://skylight//lib/skylight/vendor/cli/highline.rb#95
HighLine::ERASE_CHAR_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# Embed in a String to clear all previous ANSI sequences.  This *MUST* be
# done before the program exits!
#
# source://skylight//lib/skylight/vendor/cli/highline.rb#94
HighLine::ERASE_LINE_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#137
HighLine::GRAY = T.let(T.unsafe(nil), String)

# Alias for WHITE, since WHITE is actually a light gray on Macs
#
# source://skylight//lib/skylight/vendor/cli/highline.rb#121
HighLine::GRAY_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#137
HighLine::GREEN = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#113
HighLine::GREEN_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#137
HighLine::MAGENTA = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#116
HighLine::MAGENTA_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# Menu objects encapsulate all the details of a call to HighLine.choose().
# Using the accessors and Menu.choice() and Menu.choices(), the block passed
# to HighLine.choose() can detail all aspects of menu display and control.
#
# source://skylight//lib/skylight/vendor/cli/highline/menu.rb#16
class HighLine::Menu < ::HighLine::Question
  # Create an instance of HighLine::Menu.  All customization is done
  # through the passed block, which should call accessors and choice() and
  # choices() as needed to define the Menu.  Note that Menus are also
  # Questions, so all that functionality is available to the block as
  # well.
  #
  # @return [Menu] a new instance of Menu
  # @yield [_self]
  # @yieldparam _self [HighLine::Menu] the object that the method was called on
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#24
  def initialize; end

  # Adds _name_ to the list of available menu items.  Menu items will be
  # displayed in the order they are added.
  #
  # An optional _action_ can be associated with this name and if provided,
  # it will be called if the item is selected.  The result of the method
  # will be returned, unless _nil_on_handled_ is set (when you would get
  # +nil+ instead).  In _shell_ mode, a provided block will be passed the
  # command chosen and any details that followed the command.  Otherwise,
  # just the command is passed.  The <tt>@highline</tt> variable is set to
  # the current HighLine context before the action code is called and can
  # thus be used for adding output and the like.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#136
  def choice(name, help = T.unsafe(nil), &action); end

  # A shortcut for multiple calls to the sister method choice().  <b>Be
  # warned:</b>  An _action_ set here will apply to *all* provided
  # _names_.  This is considered to be a feature, so you can easily
  # hand-off interface processing to a different chunk of code.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#149
  def choices(*names, &action); end

  # This attribute is passed directly on as the mode to HighLine.list() by
  # all the preset layouts.  See that method for appropriate settings.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#84
  def flow; end

  # This attribute is passed directly on as the mode to HighLine.list() by
  # all the preset layouts.  See that method for appropriate settings.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#84
  def flow=(_arg0); end

  # Used by all the preset layouts to display title and/or introductory
  # information, when set.  Defaults to +nil+.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#95
  def header; end

  # Used by all the preset layouts to display title and/or introductory
  # information, when set.  Defaults to +nil+.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#95
  def header=(_arg0); end

  # Used to set help for arbitrary topics.  Use the topic <tt>"help"</tt>
  # to override the default message.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#214
  def help(topic, help); end

  # Identical to choice(), but the item will not be listed for the user.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#154
  def hidden(name, help = T.unsafe(nil), &action); end

  # An _index_ to append to each menu item in display.  See
  # Menu.index=() for details.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#60
  def index; end

  # Sets the indexing style for this Menu object.  Indexes are appended to
  # menu items, when displayed in list form.  The available settings are:
  #
  # <tt>:number</tt>::   Menu items will be indexed numerically, starting
  #                      with 1.  This is the default method of indexing.
  # <tt>:letter</tt>::   Items will be indexed alphabetically, starting
  #                      with a.
  # <tt>:none</tt>::     No index will be appended to menu items.
  # <i>any String</i>::  Will be used as the literal _index_.
  #
  # Setting the _index_ to <tt>:none</tt> or a literal String also adjusts
  # _index_suffix_ to a single space and _select_by_ to <tt>:name</tt>.
  # Because of this, you should make a habit of setting the _index_ first.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#175
  def index=(style); end

  # The String placed between an _index_ and a menu item.  Defaults to
  # ". ".  Switches to " ", when _index_ is set to a String (like "-").
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#65
  def index_suffix; end

  # The String placed between an _index_ and a menu item.  Defaults to
  # ". ".  Switches to " ", when _index_ is set to a String (like "-").
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#65
  def index_suffix=(_arg0); end

  # Initializes the help system by adding a <tt>:help</tt> choice, some
  # action code, and the default help listing.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#189
  def init_help; end

  # An ERb _layout_ to use when displaying this Menu object.  See
  # Menu.layout=() for details.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#105
  def layout; end

  # Setting a _layout_ with this method also adjusts some other attributes
  # of the Menu object, to ideal defaults for the chosen _layout_.  To
  # account for that, you probably want to set a _layout_ first in your
  # configuration block, if needed.
  #
  # Accepted settings for _layout_ are:
  #
  # <tt>:list</tt>::         The default _layout_.  The _header_ if set
  #                          will appear at the top on its own line with
  #                          a trailing colon.  Then the list of menu
  #                          items will follow.  Finally, the _prompt_
  #                          will be used as the ask()-like question.
  # <tt>:one_line</tt>::     A shorter _layout_ that fits on one line.
  #                          The _header_ comes first followed by a
  #                          colon and spaces, then the _prompt_ with menu
  #                          items between trailing parenthesis.
  # <tt>:menu_only</tt>::    Just the menu items, followed up by a likely
  #                          short _prompt_.
  # <i>any ERb String</i>::  Will be taken as the literal _layout_.  This
  #                          String can access <tt>@header</tt>,
  #                          <tt>@menu</tt> and <tt>@prompt</tt>, but is
  #                          otherwise evaluated in the typical HighLine
  #                          context, to provide access to utilities like
  #                          HighLine.list() primarily.
  #
  # If set to either <tt>:one_line</tt>, or <tt>:menu_only</tt>, _index_
  # will default to <tt>:none</tt> and _flow_ will default to
  # <tt>:inline</tt>.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#248
  def layout=(new_layout); end

  # This setting is passed on as the third parameter to HighLine.list()
  # by all the preset layouts.  See that method for details of its
  # effects.  Defaults to +nil+.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#90
  def list_option; end

  # This setting is passed on as the third parameter to HighLine.list()
  # by all the preset layouts.  See that method for details of its
  # effects.  Defaults to +nil+.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#90
  def list_option=(_arg0); end

  # When +true+, any selected item handled by provided action code will
  # return +nil+, instead of the results to the action code.  This may
  # prove handy when dealing with mixed menus where only the names of
  # items without any code (and +nil+, of course) will be returned.
  # Defaults to +false+.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#121
  def nil_on_handled; end

  # When +true+, any selected item handled by provided action code will
  # return +nil+, instead of the results to the action code.  This may
  # prove handy when dealing with mixed menus where only the names of
  # items without any code (and +nil+, of course) will be returned.
  # Defaults to +false+.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#121
  def nil_on_handled=(_arg0); end

  # This method returns all possible options for auto-completion, based
  # on the settings of _index_ and _select_by_.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#263
  def options; end

  # Used by all the preset layouts to ask the actual question to fetch a
  # menu selection from the user.  Defaults to "?  ".
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#100
  def prompt; end

  # Used by all the preset layouts to ask the actual question to fetch a
  # menu selection from the user.  Defaults to "?  ".
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#100
  def prompt=(_arg0); end

  # This method processes the auto-completed user selection, based on the
  # rules for this Menu object.  If an action was provided for the
  # selection, it will be executed as described in Menu.choice().
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#293
  def select(highline_context, selection, details = T.unsafe(nil)); end

  # The _select_by_ attribute controls how the user is allowed to pick a
  # menu item.  The available choices are:
  #
  # <tt>:index</tt>::          The user is allowed to type the numerical
  #                            or alphabetical index for their selection.
  # <tt>:index_or_name</tt>::  Allows both methods from the
  #                            <tt>:index</tt> option and the
  #                            <tt>:name</tt> option.
  # <tt>:name</tt>::           Menu items are selected by typing a portion
  #                            of the item name that will be
  #                            auto-completed.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#79
  def select_by; end

  # The _select_by_ attribute controls how the user is allowed to pick a
  # menu item.  The available choices are:
  #
  # <tt>:index</tt>::          The user is allowed to type the numerical
  #                            or alphabetical index for their selection.
  # <tt>:index_or_name</tt>::  Allows both methods from the
  #                            <tt>:index</tt> option and the
  #                            <tt>:name</tt> option.
  # <tt>:name</tt>::           Menu items are selected by typing a portion
  #                            of the item name that will be
  #                            auto-completed.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#79
  def select_by=(_arg0); end

  # When set to +true+, responses are allowed to be an entire line of
  # input, including details beyond the command itself.  Only the first
  # "word" of input will be matched against the menu choices, but both the
  # command selected and the rest of the line will be passed to provided
  # action blocks.  Defaults to +false+.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#113
  def shell; end

  # When set to +true+, responses are allowed to be an entire line of
  # input, including details beyond the command itself.  Only the first
  # "word" of input will be matched against the menu choices, but both the
  # command selected and the rest of the line will be passed to provided
  # action blocks.  Defaults to +false+.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#113
  def shell=(_arg0); end

  # Allows Menu objects to pass as Arrays, for use with HighLine.list().
  # This method returns all menu items to be displayed, complete with
  # indexes.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#330
  def to_ary; end

  # Allows Menu to behave as a String, just like Question.  Returns the
  # _layout_ to be rendered, which is used by HighLine.say().
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#348
  def to_str; end

  # This method will update the intelligent responses to account for
  # Menu specific differences.  Calls the superclass' (Question's)
  # build_responses method, overriding its default arguments to specify
  # 'options' will be used to populate choice lists, and that
  # the newly built hash will predominate over the preexisting hash
  # for any keys that are the same.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/menu.rb#377
  def update_responses; end
end

# source://skylight//lib/skylight/vendor/cli/highline.rb#137
HighLine::NONE = T.let(T.unsafe(nil), String)

# On Mac OSX Terminal, this is black foreground, or bright white background.
# Also used as base for RGB colors, if available
#
# source://skylight//lib/skylight/vendor/cli/highline.rb#124
HighLine::NONE_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#139
HighLine::ON_BLACK = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#138
HighLine::ON_BLACK_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#139
HighLine::ON_BLUE = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#138
HighLine::ON_BLUE_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#139
HighLine::ON_BRIGHT_BLACK = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#138
HighLine::ON_BRIGHT_BLACK_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#139
HighLine::ON_BRIGHT_BLUE = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#138
HighLine::ON_BRIGHT_BLUE_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#139
HighLine::ON_BRIGHT_CYAN = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#138
HighLine::ON_BRIGHT_CYAN_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#139
HighLine::ON_BRIGHT_GRAY = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#138
HighLine::ON_BRIGHT_GRAY_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#139
HighLine::ON_BRIGHT_GREEN = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#138
HighLine::ON_BRIGHT_GREEN_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#139
HighLine::ON_BRIGHT_MAGENTA = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#138
HighLine::ON_BRIGHT_MAGENTA_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#139
HighLine::ON_BRIGHT_NONE = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#138
HighLine::ON_BRIGHT_NONE_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#139
HighLine::ON_BRIGHT_RED = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#138
HighLine::ON_BRIGHT_RED_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#139
HighLine::ON_BRIGHT_WHITE = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#138
HighLine::ON_BRIGHT_WHITE_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#139
HighLine::ON_BRIGHT_YELLOW = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#138
HighLine::ON_BRIGHT_YELLOW_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#139
HighLine::ON_CYAN = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#138
HighLine::ON_CYAN_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#139
HighLine::ON_GRAY = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#138
HighLine::ON_GRAY_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#139
HighLine::ON_GREEN = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#138
HighLine::ON_GREEN_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#139
HighLine::ON_MAGENTA = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#138
HighLine::ON_MAGENTA_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#139
HighLine::ON_NONE = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#138
HighLine::ON_NONE_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#139
HighLine::ON_RED = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#138
HighLine::ON_RED_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#139
HighLine::ON_WHITE = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#138
HighLine::ON_WHITE_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#139
HighLine::ON_YELLOW = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#138
HighLine::ON_YELLOW_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# Question objects contain all the details of a single invocation of
# HighLine.ask().  The object is initialized by the parameters passed to
# HighLine.ask() and then queried to make sure each step of the input
# process is handled according to the users wishes.
#
# source://skylight//lib/skylight/vendor/cli/highline/question.rb#19
class HighLine::Question
  # Create an instance of HighLine::Question.  Expects a _question_ to ask
  # (can be <tt>""</tt>) and an _answer_type_ to convert the answer to.
  # The _answer_type_ parameter must be a type recognized by
  # Question.convert(). If given, a block is yielded the new Question
  # object to allow custom initialization.
  #
  # @return [Question] a new instance of Question
  # @yield [_self]
  # @yieldparam _self [HighLine::Question] the object that the method was called on
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#32
  def initialize(question, answer_type); end

  # Used to control range checks for answer.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#131
  def above; end

  # Used to control range checks for answer.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#131
  def above=(_arg0); end

  # Returns the provided _answer_string_ or the default answer for this
  # Question if a default was set and the answer is empty.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#217
  def answer_or_default(answer_string); end

  # The type that will be used to convert this answer.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#68
  def answer_type; end

  # The type that will be used to convert this answer.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#68
  def answer_type=(_arg0); end

  # Used to control range checks for answer.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#131
  def below; end

  # Used to control range checks for answer.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#131
  def below=(_arg0); end

  # Called late in the initialization process to build intelligent
  # responses based on the details of this Question object.
  # Also used by Menu#update_responses.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#230
  def build_responses(message_source = T.unsafe(nil), new_hash_wins = T.unsafe(nil)); end

  # Used to control character case processing for the answer to this question.
  # See HighLine::Question.change_case() for acceptable settings.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#121
  def case; end

  # Used to control character case processing for the answer to this question.
  # See HighLine::Question.change_case() for acceptable settings.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#121
  def case=(_arg0); end

  # Returns the provided _answer_string_ after changing character case by
  # the rules of this Question.  Valid settings for whitespace are:
  #
  # +nil+::                        Do not alter character case.
  #                                (Default.)
  # <tt>:up</tt>::                 Calls upcase().
  # <tt>:upcase</tt>::             Calls upcase().
  # <tt>:down</tt>::               Calls downcase().
  # <tt>:downcase</tt>::           Calls downcase().
  # <tt>:capitalize</tt>::         Calls capitalize().
  #
  # An unrecognized choice (like <tt>:none</tt>) is treated as +nil+.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#277
  def change_case(answer_string); end

  # Can be set to +true+ to use HighLine's cross-platform character reader
  # instead of fetching an entire line of input.  (Note: HighLine's character
  # reader *ONLY* supports STDIN on Windows and Unix.)  Can also be set to
  # <tt>:getc</tt> to use that method on the input stream.
  #
  # *WARNING*:  The _echo_ and _overwrite_ attributes for a question are
  # ignored when using the <tt>:getc</tt> method.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#80
  def character; end

  # Can be set to +true+ to use HighLine's cross-platform character reader
  # instead of fetching an entire line of input.  (Note: HighLine's character
  # reader *ONLY* supports STDIN on Windows and Unix.)  Can also be set to
  # <tt>:getc</tt> to use that method on the input stream.
  #
  # *WARNING*:  The _echo_ and _overwrite_ attributes for a question are
  # ignored when using the <tt>:getc</tt> method.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#80
  def character=(_arg0); end

  # For Auto-completion
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#70
  def completion; end

  # For Auto-completion
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#70
  def completion=(_arg0); end

  # Asks a yes or no confirmation question, to ensure a user knows what
  # they have just agreed to.  If set to +true+ the question will be,
  # "Are you sure?  "  Any other true value for this attribute is assumed
  # to be the question to ask.  When +false+ or +nil+ (the default),
  # answers are not confirmed.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#141
  def confirm; end

  # Asks a yes or no confirmation question, to ensure a user knows what
  # they have just agreed to.  If set to +true+ the question will be,
  # "Are you sure?  "  Any other true value for this attribute is assumed
  # to be the question to ask.  When +false+ or +nil+ (the default),
  # answers are not confirmed.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#141
  def confirm=(_arg0); end

  # Transforms the given _answer_string_ into the expected type for this
  # Question.  Currently supported conversions are:
  #
  # <tt>[...]</tt>::         Answer must be a member of the passed Array.
  #                          Auto-completion is used to expand partial
  #                          answers.
  # <tt>lambda {...}</tt>::  Answer is passed to lambda for conversion.
  # Date::                   Date.parse() is called with answer.
  # DateTime::               DateTime.parse() is called with answer.
  # File::                   The entered file name is auto-completed in
  #                          terms of _directory_ + _glob_, opened, and
  #                          returned.
  # Float::                  Answer is converted with Kernel.Float().
  # Integer::                Answer is converted with Kernel.Integer().
  # +nil+::                  Answer is left in String format.  (Default.)
  # Pathname::               Same as File, save that a Pathname object is
  #                          returned.
  # String::                 Answer is converted with Kernel.String().
  # HighLine::String::       Answer is converted with HighLine::String()
  # Regexp::                 Answer is fed to Regexp.new().
  # Symbol::                 The method to_sym() is called on answer and
  #                          the result returned.
  # <i>any other Class</i>:: The answer is passed on to
  #                          <tt>Class.parse()</tt>.
  #
  # This method throws ArgumentError, if the conversion cannot be
  # completed for any reason.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#318
  def convert(answer_string); end

  # Used to provide a default answer to this question.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#123
  def default; end

  # Used to provide a default answer to this question.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#123
  def default=(_arg0); end

  # The directory from which a user will be allowed to select files, when
  # File or Pathname is specified as an _answer_type_.  Initially set to
  # <tt>Pathname.new(File.expand_path(File.dirname($0)))</tt>.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#174
  def directory; end

  # The directory from which a user will be allowed to select files, when
  # File or Pathname is specified as an _answer_type_.  Initially set to
  # <tt>Pathname.new(File.expand_path(File.dirname($0)))</tt>.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#174
  def directory=(_arg0); end

  # Can be set to +true+ or +false+ to control whether or not input will
  # be echoed back to the user.  A setting of +true+ will cause echo to
  # match input, but any other true value will be treated as a String to
  # echo for each character typed.
  #
  # This requires HighLine's character reader.  See the _character_
  # attribute for details.
  #
  # *Note*:  When using HighLine to manage echo on Unix based systems, we
  # recommend installing the termios gem.  Without it, it's possible to type
  # fast enough to have letters still show up (when reading character by
  # character only).
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#101
  def echo; end

  # Can be set to +true+ or +false+ to control whether or not input will
  # be echoed back to the user.  A setting of +true+ will cause echo to
  # match input, but any other true value will be treated as a String to
  # echo for each character typed.
  #
  # This requires HighLine's character reader.  See the _character_
  # attribute for details.
  #
  # *Note*:  When using HighLine to manage echo on Unix based systems, we
  # recommend installing the termios gem.  Without it, it's possible to type
  # fast enough to have letters still show up (when reading character by
  # character only).
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#101
  def echo=(_arg0); end

  # Returns an English explanation of the current range settings.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#352
  def expected_range; end

  # Returns _first_answer_, which will be unset following this call.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#368
  def first_answer; end

  # When set to a non *nil* value, this will be tried as an answer to the
  # question.  If this answer passes validations, it will become the result
  # without the user ever being prompted.  Otherwise this value is discarded,
  # and this Question is resolved as a normal call to HighLine.ask().
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#168
  def first_answer=(_arg0); end

  # Returns true if _first_answer_ is set.
  #
  # @return [Boolean]
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#375
  def first_answer?; end

  # When set, the user will be prompted for multiple answers which will
  # be collected into an Array or Hash and returned as the final answer.
  #
  # You can set _gather_ to an Integer to have an Array of exactly that
  # many answers collected, or a String/Regexp to match an end input which
  # will not be returned in the Array.
  #
  # Optionally _gather_ can be set to a Hash.  In this case, the question
  # will be asked once for each key and the answers will be returned in a
  # Hash, mapped by key.  The <tt>@key</tt> variable is set before each
  # question is evaluated, so you can use it in your question.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#155
  def gather; end

  # When set, the user will be prompted for multiple answers which will
  # be collected into an Array or Hash and returned as the final answer.
  #
  # You can set _gather_ to an Integer to have an Array of exactly that
  # many answers collected, or a String/Regexp to match an end input which
  # will not be returned in the Array.
  #
  # Optionally _gather_ can be set to a Hash.  In this case, the question
  # will be asked once for each key and the answers will be returned in a
  # Hash, mapped by key.  The <tt>@key</tt> variable is set before each
  # question is evaluated, so you can use it in your question.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#155
  def gather=(_arg0); end

  # The glob pattern used to limit file selection when File or Pathname is
  # specified as an _answer_type_.  Initially set to <tt>"*"</tt>.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#179
  def glob; end

  # The glob pattern used to limit file selection when File or Pathname is
  # specified as an _answer_type_.  Initially set to <tt>"*"</tt>.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#179
  def glob=(_arg0); end

  # If set, answer must pass an include?() check on this object.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#133
  def in; end

  # If set, answer must pass an include?() check on this object.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#133
  def in=(_arg0); end

  # Returns +true+ if the _answer_object_ is greater than the _above_
  # attribute, less than the _below_ attribute and include?()ed in the
  # _in_ attribute.  Otherwise, +false+ is returned.  Any +nil+ attributes
  # are not checked.
  #
  # @return [Boolean]
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#385
  def in_range?(answer_object); end

  # Allows you to set a character limit for input.
  #
  # *WARNING*:  This option forces a character by character read.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#86
  def limit; end

  # Allows you to set a character limit for input.
  #
  # *WARNING*:  This option forces a character by character read.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#86
  def limit=(_arg0); end

  # When set to +true+ the question is asked, but output does not progress to
  # the next line.  The Cursor is moved back to the beginning of the question
  # line and it is cleared so that all the contents of the line disappear from
  # the screen.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#211
  def overwrite; end

  # When set to +true+ the question is asked, but output does not progress to
  # the next line.  The Cursor is moved back to the beginning of the question
  # line and it is cleared so that all the contents of the line disappear from
  # the screen.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#211
  def overwrite=(_arg0); end

  # The ERb template of the question to be asked.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#66
  def question; end

  # The ERb template of the question to be asked.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#66
  def question=(_arg0); end

  # Use the Readline library to fetch input.  This allows input editing as
  # well as keeping a history.  In addition, tab will auto-complete
  # within an Array of choices or a file listing.
  #
  # *WARNING*:  This option is incompatible with all of HighLine's
  # character reading  modes and it causes HighLine to ignore the
  # specified _input_ stream.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#111
  def readline; end

  # Use the Readline library to fetch input.  This allows input editing as
  # well as keeping a history.  In addition, tab will auto-complete
  # within an Array of choices or a file listing.
  #
  # *WARNING*:  This option is incompatible with all of HighLine's
  # character reading  modes and it causes HighLine to ignore the
  # specified _input_ stream.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#111
  def readline=(_arg0); end

  # Returns the provided _answer_string_ after processing whitespace by
  # the rules of this Question.  Valid settings for whitespace are:
  #
  # +nil+::                        Do not alter whitespace.
  # <tt>:strip</tt>::              Calls strip().  (Default.)
  # <tt>:chomp</tt>::              Calls chomp().
  # <tt>:collapse</tt>::           Collapses all whitespace runs to a
  #                                single space.
  # <tt>:strip_and_collapse</tt>:: Calls strip(), then collapses all
  #                                whitespace runs to a single space.
  # <tt>:chomp_and_collapse</tt>:: Calls chomp(), then collapses all
  #                                whitespace runs to a single space.
  # <tt>:remove</tt>::             Removes all whitespace.
  #
  # An unrecognized choice (like <tt>:none</tt>) is treated as +nil+.
  #
  # This process is skipped for single character input.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#410
  def remove_whitespace(answer_string); end

  # A Hash that stores the various responses used by HighLine to notify
  # the user.  The currently used responses and their purpose are as
  # follows:
  #
  # <tt>:ambiguous_completion</tt>::  Used to notify the user of an
  #                                   ambiguous answer the auto-completion
  #                                   system cannot resolve.
  # <tt>:ask_on_error</tt>::          This is the question that will be
  #                                   redisplayed to the user in the event
  #                                   of an error.  Can be set to
  #                                   <tt>:question</tt> to repeat the
  #                                   original question.
  # <tt>:invalid_type</tt>::          The error message shown when a type
  #                                   conversion fails.
  # <tt>:no_completion</tt>::         Used to notify the user that their
  #                                   selection does not have a valid
  #                                   auto-completion match.
  # <tt>:not_in_range</tt>::          Used to notify the user that a
  #                                   provided answer did not satisfy
  #                                   the range requirement tests.
  # <tt>:not_valid</tt>::             The error message shown when
  #                                   validation checks fail.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#204
  def responses; end

  # Returns an Array of valid answers to this question.  These answers are
  # only known when _answer_type_ is set to an Array of choices, File, or
  # Pathname.  Any other time, this method will return an empty Array.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#432
  def selection; end

  # Stringifies the question to be asked.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#445
  def to_str; end

  # Returns +true+ if the provided _answer_string_ is accepted by the
  # _validate_ attribute or +false+ if it's not.
  #
  # It's important to realize that an answer is validated after whitespace
  # and case handling.
  #
  # @return [Boolean]
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#456
  def valid_answer?(answer_string); end

  # If set to a Regexp, the answer must match (before type conversion).
  # Can also be set to a Proc which will be called with the provided
  # answer to validate with a +true+ or +false+ return.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#129
  def validate; end

  # If set to a Regexp, the answer must match (before type conversion).
  # Can also be set to a Proc which will be called with the provided
  # answer to validate with a +true+ or +false+ return.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#129
  def validate=(_arg0); end

  # When set to +true+ multiple entries will be collected according to
  # the setting for _gather_, except they will be required to match
  # each other. Multiple identical entries will return a single answer.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#161
  def verify_match; end

  # When set to +true+ multiple entries will be collected according to
  # the setting for _gather_, except they will be required to match
  # each other. Multiple identical entries will return a single answer.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#161
  def verify_match=(_arg0); end

  # Used to control whitespace processing for the answer to this question.
  # See HighLine::Question.remove_whitespace() for acceptable settings.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#116
  def whitespace; end

  # Used to control whitespace processing for the answer to this question.
  # See HighLine::Question.remove_whitespace() for acceptable settings.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#116
  def whitespace=(_arg0); end

  private

  # Adds the default choice to the end of question between <tt>|...|</tt>.
  # Trailing whitespace is preserved so the function of HighLine.say() is
  # not affected.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/question.rb#469
  def append_default; end
end

# An internal HighLine error.  User code does not need to trap this.
#
# source://skylight//lib/skylight/vendor/cli/highline/question.rb#21
class HighLine::Question::NoAutoCompleteMatch < ::StandardError; end

# An internal HighLine error.  User code does not need to trap this.
#
# source://skylight//lib/skylight/vendor/cli/highline.rb#34
class HighLine::QuestionError < ::StandardError; end

# source://skylight//lib/skylight/vendor/cli/highline.rb#137
HighLine::RED = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#112
HighLine::RED_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#144
HighLine::RESET = T.let(T.unsafe(nil), String)

# Alias for CLEAR.
#
# source://skylight//lib/skylight/vendor/cli/highline.rb#97
HighLine::RESET_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#144
HighLine::REVERSE = T.let(T.unsafe(nil), String)

# Reverse foreground and background
#
# source://skylight//lib/skylight/vendor/cli/highline.rb#105
HighLine::REVERSE_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#108
HighLine::STYLES = T.let(T.unsafe(nil), Array)

# A sample ColorScheme.
#
# source://skylight//lib/skylight/vendor/cli/highline/color_scheme.rb#114
class HighLine::SampleColorScheme < ::HighLine::ColorScheme
  # Builds the sample scheme with settings for <tt>:critical</tt>,
  # <tt>:error</tt>, <tt>:warning</tt>, <tt>:notice</tt>, <tt>:info</tt>,
  # <tt>:debug</tt>, <tt>:row_even</tt>, and <tt>:row_odd</tt> colors.
  #
  # @return [SampleColorScheme] a new instance of SampleColorScheme
  #
  # source://skylight//lib/skylight/vendor/cli/highline/color_scheme.rb#120
  def initialize(h = T.unsafe(nil)); end
end

# source://skylight//lib/skylight/vendor/cli/highline/string_extensions.rb#104
class HighLine::String < ::String
  include ::HighLine::StringExtensions

  def black; end
  def blink; end
  def blue; end
  def bold; end
  def bright_black; end
  def bright_blue; end
  def bright_cyan; end
  def bright_gray; end
  def bright_green; end
  def bright_magenta; end
  def bright_none; end
  def bright_red; end
  def bright_white; end
  def bright_yellow; end
  def clear; end

  # source://skylight//lib/skylight/vendor/cli/highline/string_extensions.rb#62
  def color(*args); end

  def concealed; end
  def cyan; end
  def dark; end

  # source://skylight//lib/skylight/vendor/cli/highline/string_extensions.rb#62
  def foreground(*args); end

  def gray; end
  def green; end
  def magenta; end

  # source://skylight//lib/skylight/vendor/cli/highline/string_extensions.rb#93
  def method_missing(method, *args, &blk); end

  def none; end

  # source://skylight//lib/skylight/vendor/cli/highline/string_extensions.rb#68
  def on(arg); end

  def on_black; end
  def on_blue; end
  def on_bright_black; end
  def on_bright_blue; end
  def on_bright_cyan; end
  def on_bright_gray; end
  def on_bright_green; end
  def on_bright_magenta; end
  def on_bright_none; end
  def on_bright_red; end
  def on_bright_white; end
  def on_bright_yellow; end
  def on_cyan; end
  def on_gray; end
  def on_green; end
  def on_magenta; end
  def on_none; end
  def on_red; end

  # source://skylight//lib/skylight/vendor/cli/highline/string_extensions.rb#85
  def on_rgb(*colors); end

  def on_white; end
  def on_yellow; end
  def red; end
  def reset; end
  def reverse; end

  # source://skylight//lib/skylight/vendor/cli/highline/string_extensions.rb#78
  def rgb(*colors); end

  # source://skylight//lib/skylight/vendor/cli/highline/string_extensions.rb#73
  def uncolor; end

  def underline; end
  def underscore; end
  def white; end
  def yellow; end
end

# source://skylight//lib/skylight/vendor/cli/highline/string_extensions.rb#31
module HighLine::StringExtensions
  class << self
    # @private
    #
    # source://skylight//lib/skylight/vendor/cli/highline/string_extensions.rb#32
    def included(base); end
  end
end

# source://skylight//lib/skylight/vendor/cli/highline/style.rb#41
class HighLine::Style
  # Single color/styles have :name, :code, :rgb (possibly), :builtin
  # Compound styles have :name, :list, :builtin
  #
  # @return [Style] a new instance of Style
  #
  # source://skylight//lib/skylight/vendor/cli/highline/style.rb#106
  def initialize(defn = T.unsafe(nil)); end

  # source://skylight//lib/skylight/vendor/cli/highline/style.rb#150
  def blue; end

  # source://skylight//lib/skylight/vendor/cli/highline/style.rb#170
  def bright; end

  # Returns the value of attribute builtin.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/style.rb#102
  def builtin; end

  # Sets the attribute builtin
  #
  # @param value the value to set the attribute builtin to.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/style.rb#102
  def builtin=(_arg0); end

  # source://skylight//lib/skylight/vendor/cli/highline/style.rb#134
  def code; end

  # source://skylight//lib/skylight/vendor/cli/highline/style.rb#130
  def color(string); end

  # source://skylight//lib/skylight/vendor/cli/highline/style.rb#122
  def dup; end

  # source://skylight//lib/skylight/vendor/cli/highline/style.rb#146
  def green; end

  # Returns the value of attribute list.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/style.rb#101
  def list; end

  # Returns the value of attribute name.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/style.rb#101
  def name; end

  # source://skylight//lib/skylight/vendor/cli/highline/style.rb#165
  def on; end

  # source://skylight//lib/skylight/vendor/cli/highline/style.rb#142
  def red; end

  # Returns the value of attribute rgb.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/style.rb#102
  def rgb; end

  # Sets the attribute rgb
  #
  # @param value the value to set the attribute rgb to.
  #
  # source://skylight//lib/skylight/vendor/cli/highline/style.rb#102
  def rgb=(_arg0); end

  # source://skylight//lib/skylight/vendor/cli/highline/style.rb#126
  def to_hash; end

  # source://skylight//lib/skylight/vendor/cli/highline/style.rb#154
  def variant(new_name, options = T.unsafe(nil)); end

  class << self
    # source://skylight//lib/skylight/vendor/cli/highline/style.rb#83
    def ansi_rgb_to_hex(ansi_number); end

    # source://skylight//lib/skylight/vendor/cli/highline/style.rb#93
    def code_index; end

    # source://skylight//lib/skylight/vendor/cli/highline/style.rb#43
    def index(style); end

    # source://skylight//lib/skylight/vendor/cli/highline/style.rb#89
    def list; end

    # source://skylight//lib/skylight/vendor/cli/highline/style.rb#67
    def rgb(*colors); end

    # source://skylight//lib/skylight/vendor/cli/highline/style.rb#57
    def rgb_hex(*colors); end

    # source://skylight//lib/skylight/vendor/cli/highline/style.rb#78
    def rgb_number(*parts); end

    # source://skylight//lib/skylight/vendor/cli/highline/style.rb#63
    def rgb_parts(hex); end

    # source://skylight//lib/skylight/vendor/cli/highline/style.rb#97
    def uncolor(string); end
  end
end

# source://skylight//lib/skylight/vendor/cli/highline/system_extensions.rb#11
module HighLine::SystemExtensions
  extend ::HighLine::SystemExtensions

  # Windows savvy getc().
  #
  # *WARNING*:  This method ignores <tt>input</tt> and reads one
  # character from +STDIN+!
  #
  # source://skylight//lib/skylight/vendor/cli/highline/system_extensions.rb#237
  def get_character(input = T.unsafe(nil)); end

  # We do not define a raw_no_echo_mode for Windows as _getch turns off echo
  #
  # source://skylight//lib/skylight/vendor/cli/highline/system_extensions.rb#209
  def raw_no_echo_mode; end

  # source://skylight//lib/skylight/vendor/cli/highline/system_extensions.rb#214
  def restore_mode; end

  # A Unix savvy method using stty to fetch the console columns, and rows.
  # ... stty does not work in JRuby
  #
  # source://skylight//lib/skylight/vendor/cli/highline/system_extensions.rb#225
  def terminal_size; end
end

# For Debugging purposes only.
#
# source://skylight//lib/skylight/vendor/cli/highline/system_extensions.rb#207
HighLine::SystemExtensions::CHARACTER_MODE = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline/system_extensions.rb#12
HighLine::SystemExtensions::JRUBY = T.let(T.unsafe(nil), FalseClass)

# source://skylight//lib/skylight/vendor/cli/highline.rb#144
HighLine::UNDERLINE = T.let(T.unsafe(nil), String)

# Underline
#
# source://skylight//lib/skylight/vendor/cli/highline.rb#102
HighLine::UNDERLINE_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#144
HighLine::UNDERSCORE = T.let(T.unsafe(nil), String)

# Alias for UNDERLINE
#
# source://skylight//lib/skylight/vendor/cli/highline.rb#103
HighLine::UNDERSCORE_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# The version of the installed library.
#
# source://skylight//lib/skylight/vendor/cli/highline.rb#31
HighLine::VERSION = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#137
HighLine::WHITE = T.let(T.unsafe(nil), String)

# On Mac OSX Terminal, white is actually gray
#
# source://skylight//lib/skylight/vendor/cli/highline.rb#119
HighLine::WHITE_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# source://skylight//lib/skylight/vendor/cli/highline.rb#137
HighLine::YELLOW = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/vendor/cli/highline.rb#115
HighLine::YELLOW_STYLE = T.let(T.unsafe(nil), HighLine::Style)

# <tt>require "highline/import"</tt> adds shortcut methods to Kernel, making
# agree(), ask(), choose() and say() globally available.  This is handy for
# quick and dirty input and output.  These methods use the HighLine object in
# the global variable <tt>$terminal</tt>, which is initialized to used
# <tt>$stdin</tt> and <tt>$stdout</tt> (you are free to change this).
# Otherwise, these methods are identical to their HighLine counterparts, see that
# class for detailed explanations.
#
# source://skylight//lib/skylight/probes.rb#161
module Kernel
  # @api private
  #
  # source://skylight//lib/skylight/probes.rb#165
  def require(name); end
end

# Used from extconf and to load libskylight
#
# source://skylight//lib/skylight/version.rb#1
module Skylight
  extend ::Skylight::Util::Logging

  class << self
    # source://skylight//lib/skylight/util/instrumenter_method.rb#18
    def broken!(*_arg0, **_arg1, &_arg2); end

    # @api private
    #
    # source://skylight//lib/skylight/native.rb#103
    def check_install_errors(config); end

    # source://skylight//lib/skylight/util/instrumenter_method.rb#18
    def config(*_arg0, **_arg1, &_arg2); end

    # source://skylight//lib/skylight/util/instrumenter_method.rb#7
    def disable(*_arg0, **_arg1, &_arg2); end

    # source://skylight//lib/skylight/util/instrumenter_method.rb#18
    def done(*_arg0, **_arg1, &_arg2); end

    # source://skylight//lib/skylight.rb#67
    def enable_normalizer(*names); end

    # source://skylight//lib/skylight/util/instrumenter_method.rb#18
    def endpoint_assignment_muted?(*_arg0, **_arg1, &_arg2); end

    # @overload instrument
    # @overload instrument
    #
    # source://skylight//lib/skylight.rb#169
    def instrument(opts = T.unsafe(nil), &block); end

    # source://skylight//lib/skylight.rb#59
    def instrumenter; end

    # source://skylight//lib/skylight/native.rb#61
    def libskylight_path; end

    def load_libskylight(_arg0); end

    # source://skylight//lib/skylight/util/instrumenter_method.rb#7
    def mute(*_arg0, **_arg1, &_arg2); end

    # @return [Boolean]
    #
    # source://skylight//lib/skylight/native.rb#57
    def native?; end

    # source://skylight//lib/skylight.rb#63
    def probe(*args); end

    # Runs the shutdown procedure in the background.
    # This should do little more than unsubscribe from all ActiveSupport::Notifications
    #
    # source://skylight//lib/skylight.rb#220
    def spawn_shutdown_thread!; end

    # Start instrumenting
    #
    # source://skylight//lib/skylight.rb#72
    def start!(config = T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://skylight//lib/skylight.rb#105
    def started?; end

    # Stop instrumenting
    #
    # source://skylight//lib/skylight.rb#110
    def stop!; end

    # Start a trace
    #
    # source://skylight//lib/skylight.rb#132
    def trace(endpoint = T.unsafe(nil), cat = T.unsafe(nil), title = T.unsafe(nil), meta: T.unsafe(nil), segment: T.unsafe(nil), component: T.unsafe(nil)); end

    # Check tracing
    #
    # @return [Boolean]
    #
    # source://skylight//lib/skylight.rb#126
    def tracing?; end

    # source://skylight//lib/skylight/util/instrumenter_method.rb#18
    def tracing_muted?(*_arg0, **_arg1, &_arg2); end

    # source://skylight//lib/skylight/util/instrumenter_method.rb#7
    def unmute(*_arg0, **_arg1, &_arg2); end

    # @api private
    #
    # source://skylight//lib/skylight/native.rb#115
    def warn_skylight_native_missing(config); end
  end
end

# @api private
#
# source://skylight//lib/skylight/api.rb#6
class Skylight::Api
  include ::Skylight::Util::Logging

  # @api private
  # @return [Api] a new instance of Api
  #
  # source://skylight//lib/skylight/api.rb#109
  def initialize(config); end

  # @api private
  #
  # source://skylight//lib/skylight/api.rb#9
  def config; end

  # @api private
  # @raise [CreateFailed]
  #
  # source://skylight//lib/skylight/api.rb#113
  def create_app(name, token = T.unsafe(nil)); end

  # @api private
  #
  # source://skylight//lib/skylight/api.rb#124
  def fetch_mergeable_apps(token); end

  # @api private
  #
  # source://skylight//lib/skylight/api.rb#131
  def merge_apps!(token, app_guid:, component_guid:, environment:); end

  # @api private
  #
  # source://skylight//lib/skylight/api.rb#139
  def validate_config; end

  private

  # @api private
  #
  # source://skylight//lib/skylight/api.rb#153
  def error_for_status(code); end

  # TODO: Improve handling here: https://github.com/tildeio/direwolf-agent/issues/274
  #
  # @api private
  #
  # source://skylight//lib/skylight/api.rb#147
  def http_request(service, method, *args); end
end

# @api private
#
# source://skylight//lib/skylight/api.rb#45
class Skylight::Api::ConfigValidationResults
  include ::Skylight::Util::Logging

  # @api private
  # @return [ConfigValidationResults] a new instance of ConfigValidationResults
  #
  # source://skylight//lib/skylight/api.rb#50
  def initialize(config, raw_response); end

  # @api private
  #
  # source://skylight//lib/skylight/api.rb#63
  def body; end

  # @api private
  # @return [Boolean]
  #
  # source://skylight//lib/skylight/api.rb#87
  def config_valid?; end

  # @api private
  #
  # source://skylight//lib/skylight/api.rb#102
  def corrected_config; end

  # @api private
  # @return [Boolean]
  #
  # source://skylight//lib/skylight/api.rb#55
  def error_response?; end

  # @api private
  # @return [Boolean]
  #
  # source://skylight//lib/skylight/api.rb#92
  def forbidden?; end

  # @api private
  #
  # source://skylight//lib/skylight/api.rb#48
  def raw_response; end

  # @api private
  #
  # source://skylight//lib/skylight/api.rb#59
  def status; end

  # @api private
  # @return [Boolean]
  #
  # source://skylight//lib/skylight/api.rb#74
  def token_valid?; end

  # @api private
  #
  # source://skylight//lib/skylight/api.rb#96
  def validation_errors; end
end

# @api private
#
# source://skylight//lib/skylight/api.rb#17
class Skylight::Api::Conflict < ::Skylight::Api::Error; end

# @api private
#
# source://skylight//lib/skylight/api.rb#20
class Skylight::Api::CreateFailed < ::Skylight::Api::Error
  # @api private
  # @return [CreateFailed] a new instance of CreateFailed
  #
  # source://skylight//lib/skylight/api.rb#23
  def initialize(res); end

  # @api private
  #
  # source://skylight//lib/skylight/api.rb#28
  def errors; end

  # @api private
  #
  # source://skylight//lib/skylight/api.rb#21
  def res; end

  # @api private
  #
  # source://skylight//lib/skylight/api.rb#34
  def to_s; end
end

# @api private
#
# source://skylight//lib/skylight/api.rb#11
class Skylight::Api::Error < ::StandardError; end

# @api private
#
# source://skylight//lib/skylight/api.rb#14
class Skylight::Api::Unauthorized < ::Skylight::Api::Error; end

# @api private
#
# source://skylight//lib/skylight.rb#46
Skylight::CATEGORY_REGEX = T.let(T.unsafe(nil), Regexp)

# source://skylight//lib/skylight/cli/helpers.rb#2
module Skylight::CLI; end

# @api private
#
# source://skylight//lib/skylight/cli.rb#16
class Skylight::CLI::Base < ::Thor
  include ::Skylight::CLI::Helpers

  # @api private
  #
  # source://skylight//lib/skylight/cli.rb#68
  def disable_dev_warning; end

  # @api private
  #
  # source://skylight//lib/skylight/cli.rb#78
  def disable_env_warning; end

  # source://thor/1.3.0/lib/thor.rb#40
  def doctor(*args); end

  # source://thor/1.3.0/lib/thor.rb#40
  def merge(*args); end

  # @api private
  #
  # source://skylight//lib/skylight/cli.rb#23
  def setup(token); end

  private

  # @api private
  #
  # source://skylight//lib/skylight/cli.rb#132
  def api; end

  # @api private
  #
  # source://skylight//lib/skylight/cli.rb#87
  def app_name; end

  # @api private
  #
  # source://skylight//lib/skylight/cli.rb#128
  def config_path; end

  # Is this duplicated?
  #
  # @api private
  #
  # source://skylight//lib/skylight/cli.rb#124
  def relative_config_path; end

  # @api private
  #
  # source://skylight//lib/skylight/cli.rb#136
  def user_config; end
end

# source://skylight//lib/skylight/cli/doctor.rb#5
class Skylight::CLI::Doctor < ::Thor::Group
  include ::Skylight::CLI::Helpers

  # source://skylight//lib/skylight/cli/doctor.rb#83
  def check_config; end

  # source://skylight//lib/skylight/cli/doctor.rb#104
  def check_daemon; end

  # source://skylight//lib/skylight/cli/doctor.rb#56
  def check_native; end

  # source://skylight//lib/skylight/cli/doctor.rb#40
  def check_rails; end

  # source://skylight//lib/skylight/cli/doctor.rb#10
  def check_ssl; end

  # source://skylight//lib/skylight/cli/doctor.rb#164
  def wrap_up; end

  private

  # Overwrite the default helper method to load from Rails
  #
  # source://skylight//lib/skylight/cli/doctor.rb#171
  def config; end

  # source://skylight//lib/skylight/cli/doctor.rb#205
  def done!; end

  # source://skylight//lib/skylight/cli/doctor.rb#197
  def encountered_error!; end

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/cli/doctor.rb#201
  def has_errors?; end

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/cli/doctor.rb#187
  def mac?; end

  # NOTE: This check won't work correctly on Windows
  #
  # @return [Boolean]
  #
  # source://skylight//lib/skylight/cli/doctor.rb#192
  def rvm_present?; end
end

# source://skylight//lib/skylight/cli/helpers.rb#3
module Skylight::CLI::Helpers
  private

  # source://skylight//lib/skylight/cli/helpers.rb#15
  def config; end

  # Sets the output padding while executing a block and resets it.
  #
  # source://skylight//lib/skylight/cli/helpers.rb#22
  def indent(count = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/cli/helpers.rb#11
  def rails?; end

  # Duplicated below
  #
  # source://skylight//lib/skylight/cli/helpers.rb#7
  def rails_rb; end
end

# source://skylight//lib/skylight/cli/merger.rb#8
class Skylight::CLI::Merger < ::Thor::Group
  include ::Skylight::CLI::Helpers

  # source://skylight//lib/skylight/cli/merger.rb#69
  def ask_for_child_app; end

  # source://skylight//lib/skylight/cli/merger.rb#78
  def ask_for_child_env; end

  # source://skylight//lib/skylight/cli/merger.rb#50
  def ask_for_parent_app; end

  # source://skylight//lib/skylight/cli/merger.rb#74
  def confirm_child; end

  # source://skylight//lib/skylight/cli/merger.rb#104
  def confirm_child_env; end

  # source://skylight//lib/skylight/cli/merger.rb#108
  def confirm_everything; end

  # source://skylight//lib/skylight/cli/merger.rb#65
  def confirm_parent; end

  # source://skylight//lib/skylight/cli/merger.rb#113
  def do_confirm; end

  # source://skylight//lib/skylight/cli/merger.rb#30
  def fetch_apps; end

  # source://thor/1.3.0/lib/thor/base.rb#163
  def merge_token; end

  # source://thor/1.3.0/lib/thor/base.rb#163
  def merge_token=(_arg0); end

  # source://skylight//lib/skylight/cli/merger.rb#127
  def print_new_config_instructions; end

  # source://skylight//lib/skylight/cli/merger.rb#22
  def welcome; end

  private

  # source://skylight//lib/skylight/cli/merger.rb#223
  def api; end

  # source://skylight//lib/skylight/cli/merger.rb#207
  def ask_for_app(app_list, &formatter); end

  # source://skylight//lib/skylight/cli/merger.rb#271
  def children; end

  # source://skylight//lib/skylight/cli/merger.rb#178
  def do_merge; end

  # source://skylight//lib/skylight/cli/merger.rb#192
  def done!(message: T.unsafe(nil), success: T.unsafe(nil)); end

  # source://skylight//lib/skylight/cli/merger.rb#227
  def format_component(component); end

  # source://skylight//lib/skylight/cli/merger.rb#267
  def parent_component_fingerprints; end

  # source://skylight//lib/skylight/cli/merger.rb#295
  def specify_child_env; end

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/cli/merger.rb#259
  def valid_component?(component_name, env); end

  # source://skylight//lib/skylight/cli/merger.rb#240
  def validate_mergeability(child_app, child_env); end

  class << self
    # source://skylight//lib/skylight/cli/merger.rb#11
    def banner; end
  end
end

# source://skylight//lib/skylight/cli/merger.rb#15
Skylight::CLI::Merger::STRINGS = T.let(T.unsafe(nil), Hash)

# source://skylight//lib/skylight/config.rb#16
class Skylight::Config
  include ::Skylight::Util::Logging

  # @api private
  # @return [Config] a new instance of Config
  #
  # source://skylight//lib/skylight/config.rb#230
  def initialize(*args); end

  # source://skylight//lib/skylight/config.rb#382
  def [](key, default = T.unsafe(nil)); end

  # source://skylight//lib/skylight/config.rb#400
  def []=(key, val, scope = T.unsafe(nil)); end

  # source://skylight//lib/skylight/config.rb#556
  def alert_logger; end

  # Sets the attribute alert_logger
  #
  # @param value the value to set the attribute alert_logger to.
  #
  # source://skylight//lib/skylight/config.rb#554
  def alert_logger=(_arg0); end

  # @api private
  #
  # source://skylight//lib/skylight/config.rb#635
  def api; end

  # source://skylight//lib/skylight/config.rb#752
  def as_json(*_arg0); end

  # ===== Helpers =====
  #
  # source://skylight//lib/skylight/config.rb#715
  def authentication_with_meta; end

  # source://skylight//lib/skylight/config.rb#349
  def check_file_permissions(file, key); end

  # source://skylight//lib/skylight/config.rb#370
  def check_logfile_permissions(log_file, key); end

  # source://skylight//lib/skylight/config.rb#678
  def check_sockdir_permissions(sockdir_path); end

  # source://skylight//lib/skylight/config.rb#744
  def component; end

  # source://skylight//lib/skylight/config.rb#735
  def components; end

  # source://skylight//lib/skylight/config.rb#731
  def deploy; end

  # source://skylight//lib/skylight/config.rb#430
  def duration_ms(key, default = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/config.rb#570
  def enable_segments?; end

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/config.rb#574
  def enable_sidekiq?; end

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/config.rb#582
  def enable_source_locations?; end

  # @api private
  #
  # source://skylight//lib/skylight/config.rb#477
  def gc; end

  # source://skylight//lib/skylight/config.rb#382
  def get(key, default = T.unsafe(nil)); end

  # @api private
  #
  # source://skylight//lib/skylight/config.rb#482
  def ignored_endpoints; end

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/config.rb#377
  def key?(key); end

  # source://skylight//lib/skylight/config.rb#512
  def log_level; end

  # source://skylight//lib/skylight/config.rb#538
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  #
  # source://skylight//lib/skylight/config.rb#554
  def logger=(_arg0); end

  # source://skylight//lib/skylight/config.rb#542
  def native_log_file; end

  # source://skylight//lib/skylight/config.rb#534
  def native_log_level; end

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/config.rb#590
  def on_heroku?; end

  # @api private
  #
  # source://skylight//lib/skylight/config.rb#227
  def priority_key; end

  # source://skylight//lib/skylight/config.rb#508
  def root; end

  # source://skylight//lib/skylight/config.rb#426
  def send_or_get(val); end

  # source://skylight//lib/skylight/config.rb#400
  def set(key, val, scope = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/config.rb#578
  def sinatra_route_prefixes?; end

  # @api private
  #
  # source://skylight//lib/skylight/config.rb#498
  def source_location_ignored_gems; end

  # source://skylight//lib/skylight/config.rb#748
  def to_json(*_arg0); end

  # source://skylight//lib/skylight/config.rb#449
  def to_native_env; end

  # source://skylight//lib/skylight/config.rb#586
  def user_config; end

  # @api private
  #
  # source://skylight//lib/skylight/config.rb#324
  def validate!; end

  # source://skylight//lib/skylight/config.rb#639
  def validate_with_server; end

  # ===== Helpers =====
  #
  # source://skylight//lib/skylight/config.rb#472
  def version; end

  # source://skylight//lib/skylight/config.rb#699
  def write(path); end

  private

  # source://skylight//lib/skylight/config.rb#619
  def cast_for_env(val); end

  # source://skylight//lib/skylight/config.rb#758
  def check_nfs(path); end

  # source://skylight//lib/skylight/config.rb#596
  def create_logger(out, level: T.unsafe(nil)); end

  # source://skylight//lib/skylight/config.rb#609
  def load_logger; end

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/config.rb#763
  def reporting_env?; end

  class << self
    # Default values for Skylight configuration keys
    #
    # source://skylight//lib/skylight/config.rb#119
    def default_values; end

    # Maps legacy config keys to new config keys
    #
    # source://skylight//lib/skylight/config.rb#216
    def legacy_keys; end

    # source://skylight//lib/skylight/config.rb#252
    def load(opts = T.unsafe(nil), env = T.unsafe(nil)); end

    # source://skylight//lib/skylight/config.rb#169
    def native_env_keys; end

    # @api private
    #
    # source://skylight//lib/skylight/config.rb#290
    def remap_env(env); end

    # source://skylight//lib/skylight/config.rb#284
    def remap_key(key); end

    # source://skylight//lib/skylight/config.rb#220
    def validators; end
  end
end

# source://skylight//lib/skylight/config.rb#116
Skylight::Config::DEFAULT_IGNORED_SOURCE_LOCATION_GEMS = T.let(T.unsafe(nil), Array)

# Map environment variable keys with Skylight configuration keys
#
# source://skylight//lib/skylight/config.rb#23
Skylight::Config::ENV_TO_KEY = T.let(T.unsafe(nil), Hash)

# source://skylight//lib/skylight/config.rb#108
Skylight::Config::KEY_TO_NATIVE_ENV = T.let(T.unsafe(nil), Hash)

# @api private
#
# source://skylight//lib/skylight/config.rb#20
Skylight::Config::MUTEX = T.let(T.unsafe(nil), Thread::Mutex)

# source://skylight//lib/skylight/config.rb#162
Skylight::Config::REQUIRED_KEYS = T.let(T.unsafe(nil), Hash)

# source://skylight//lib/skylight/config.rb#114
Skylight::Config::SERVER_VALIDATE = T.let(T.unsafe(nil), Array)

# @api private
#
# source://skylight//lib/skylight/errors.rb#5
class Skylight::ConfigError < ::RuntimeError; end

# @api private
#
# source://skylight//lib/skylight.rb#49
Skylight::DEFAULT_CATEGORY = T.let(T.unsafe(nil), String)

# @api private
#
# source://skylight//lib/skylight.rb#52
Skylight::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://skylight//lib/skylight/deprecation.rb#16
Skylight::DEPRECATOR = T.let(T.unsafe(nil), Skylight::Deprecation)

# source://skylight//lib/skylight/deprecation.rb#8
class Skylight::Deprecation < ::ActiveSupport::Deprecation
  private

  # source://skylight//lib/skylight/deprecation.rb#11
  def ignored_callstack(path); end

  class << self
    # source://activesupport/7.1.1/lib/active_support/deprecation/instance_delegator.rb#34
    def ignored_callstack(*_arg0, **_arg1, &_arg2); end
  end
end

# source://skylight//lib/skylight/extensions.rb#6
module Skylight::Extensions; end

# source://skylight//lib/skylight/extensions.rb#7
class Skylight::Extensions::Collection
  # @return [Collection] a new instance of Collection
  #
  # source://skylight//lib/skylight/extensions.rb#8
  def initialize(config, extensions = T.unsafe(nil)); end

  # source://skylight//lib/skylight/extensions.rb#53
  def allowed_meta_keys; end

  # source://skylight//lib/skylight/extensions.rb#22
  def disable!(ext_name); end

  # source://skylight//lib/skylight/extensions.rb#13
  def enable!(ext_name); end

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/extensions.rb#29
  def enabled?(ext_name); end

  # meta is a mutable hash that will be passed to the instrumenter.
  # This method bridges Skylight.instrument and instrumenter.instrument.
  #
  # source://skylight//lib/skylight/extensions.rb#41
  def process_instrument_options(opts, meta); end

  # source://skylight//lib/skylight/extensions.rb#45
  def process_normalizer_meta(payload, meta, **opts); end

  # source://skylight//lib/skylight/extensions.rb#35
  def process_trace_meta(meta); end

  # source://skylight//lib/skylight/extensions.rb#49
  def trace_preprocess_meta(meta); end

  private

  # Returns the value of attribute config.
  #
  # source://skylight//lib/skylight/extensions.rb#59
  def config; end

  # Returns the value of attribute extensions.
  #
  # source://skylight//lib/skylight/extensions.rb#59
  def extensions; end

  # source://skylight//lib/skylight/extensions.rb#61
  def find_by_name(ext_name); end

  # source://skylight//lib/skylight/extensions.rb#69
  def rememoize!; end
end

# source://skylight//lib/skylight/extensions.rb#75
class Skylight::Extensions::Extension
  # @return [Extension] a new instance of Extension
  #
  # source://skylight//lib/skylight/extensions.rb#76
  def initialize(config); end

  # source://skylight//lib/skylight/extensions.rb#92
  def allowed_meta_keys; end

  # source://skylight//lib/skylight/extensions.rb#83
  def process_instrument_options(_opts, _meta); end

  # source://skylight//lib/skylight/extensions.rb#86
  def process_normalizer_meta(_payload, _meta, **opts); end

  # source://skylight//lib/skylight/extensions.rb#80
  def process_trace_meta(_meta); end

  # source://skylight//lib/skylight/extensions.rb#89
  def trace_preprocess_meta(_meta); end
end

# source://skylight//lib/skylight/extensions/source_location.rb#8
class Skylight::Extensions::SourceLocation < ::Skylight::Extensions::Extension
  include ::Skylight::Util::Logging

  # @return [SourceLocation] a new instance of SourceLocation
  #
  # source://skylight//lib/skylight/extensions/source_location.rb#16
  def initialize(*_arg0); end

  # source://skylight//lib/skylight/extensions/source_location.rb#111
  def allowed_meta_keys; end

  # Returns the value of attribute config.
  #
  # source://skylight//lib/skylight/extensions/source_location.rb#9
  def config; end

  # source://skylight//lib/skylight/extensions/source_location.rb#34
  def process_instrument_options(opts, meta); end

  # source://skylight//lib/skylight/extensions/source_location.rb#65
  def process_normalizer_meta(payload, meta, **opts); end

  # source://skylight//lib/skylight/extensions/source_location.rb#24
  def process_trace_meta(meta); end

  # source://skylight//lib/skylight/extensions/source_location.rb#88
  def trace_preprocess_meta(meta); end

  protected

  # source://skylight//lib/skylight/extensions/source_location.rb#117
  def dispatch_hinted_source_location(source_name, const_name, method_name); end

  # source://skylight//lib/skylight/extensions/source_location.rb#136
  def find_caller(cache_key: T.unsafe(nil)); end

  # source://skylight//lib/skylight/extensions/source_location.rb#164
  def instance_method_source_location(constant_name, method_name, source_name: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/extensions/source_location.rb#148
  def project_path?(path); end

  # source://skylight//lib/skylight/extensions/source_location.rb#191
  def sanitize_source_location(path, line); end

  # from normalizers.rb
  # Returns an array of file and line
  #
  # source://skylight//lib/skylight/extensions/source_location.rb#125
  def source_location(payload, meta, cache_key: T.unsafe(nil)); end

  private

  # source://skylight//lib/skylight/extensions/source_location.rb#251
  def find_caller_inner(locations); end

  # source://skylight//lib/skylight/extensions/source_location.rb#286
  def find_class_method(constant, method_name); end

  # source://skylight//lib/skylight/extensions/source_location.rb#282
  def find_instance_method(constant, method_name); end

  # walks up the inheritance tree until it finds the last method
  # without a super_method definition.
  #
  # source://skylight//lib/skylight/extensions/source_location.rb#262
  def find_instance_method_super(constant, method_name); end

  # walks up the inheritance tree until it finds the instance method
  # belonging to the constant given (skip prepended modules)
  #
  # source://skylight//lib/skylight/extensions/source_location.rb#272
  def find_own_instance_method(constant, method_name); end

  # source://skylight//lib/skylight/extensions/source_location.rb#235
  def find_source_gem(path); end

  # source://skylight//lib/skylight/extensions/source_location.rb#209
  def gem_require_trie; end
end

# source://skylight//lib/skylight/extensions/source_location.rb#14
Skylight::Extensions::SourceLocation::MAX_CALLER_DEPTH = T.let(T.unsafe(nil), Integer)

# source://skylight//lib/skylight/extensions/source_location.rb#13
Skylight::Extensions::SourceLocation::META_KEYS = T.let(T.unsafe(nil), Array)

# source://skylight//lib/skylight/formatters/http.rb#2
module Skylight::Formatters; end

# source://skylight//lib/skylight/formatters/http.rb#3
module Skylight::Formatters::HTTP
  class << self
    # Build instrumentation options for HTTP queries
    #
    # @param method [String] HTTP method, e.g. get, post
    # @param scheme [String] HTTP scheme, e.g. http, https
    # @param host [String] Request host, e.g. example.com
    # @param port [String, Integer] Request port
    # @param path [String] Request path
    # @param query [String] Request query string
    # @return [Hash] a hash containing `:category`, `:title`, and `:annotations`
    #
    # source://skylight//lib/skylight/formatters/http.rb#13
    def build_opts(method, _scheme, host, _port, _path, _query); end
  end
end

# @api private
#
# source://skylight//lib/skylight/gc.rb#5
class Skylight::GC
  include ::Skylight::Util::Logging

  # @api private
  # @return [GC] a new instance of GC
  #
  # source://skylight//lib/skylight/gc.rb#15
  def initialize(config, profiler); end

  # @api private
  #
  # source://skylight//lib/skylight/gc.rb#13
  def config; end

  # @api private
  #
  # source://skylight//lib/skylight/gc.rb#29
  def enable; end

  # @api private
  #
  # source://skylight//lib/skylight/gc.rb#58
  def release(win); end

  # Total time in microseconds for GC over entire process lifetime
  #
  # @api private
  #
  # source://skylight//lib/skylight/gc.rb#34
  def total_time; end

  # @api private
  #
  # source://skylight//lib/skylight/gc.rb#38
  def track; end

  # @api private
  #
  # source://skylight//lib/skylight/gc.rb#62
  def update; end

  private

  # @api private
  #
  # source://skylight//lib/skylight/gc.rb#70
  def __update; end
end

# @api private
#
# source://skylight//lib/skylight/gc.rb#8
Skylight::GC::MAX_COUNT = T.let(T.unsafe(nil), Integer)

# @api private
#
# source://skylight//lib/skylight/gc.rb#9
Skylight::GC::MAX_TIME = T.let(T.unsafe(nil), Integer)

# @api private
#
# source://skylight//lib/skylight/gc.rb#6
Skylight::GC::METHODS = T.let(T.unsafe(nil), Array)

# @api private
#
# source://skylight//lib/skylight/gc.rb#7
Skylight::GC::TH_KEY = T.let(T.unsafe(nil), Symbol)

# @api private
#
# source://skylight//lib/skylight/gc.rb#78
class Skylight::GC::Window
  # @api private
  # @return [Window] a new instance of Window
  #
  # source://skylight//lib/skylight/gc.rb#81
  def initialize(global); end

  # @api private
  #
  # source://skylight//lib/skylight/gc.rb#90
  def add(time); end

  # @api private
  #
  # source://skylight//lib/skylight/gc.rb#94
  def release; end

  # @api private
  #
  # source://skylight//lib/skylight/gc.rb#79
  def time; end

  # @api private
  #
  # source://skylight//lib/skylight/gc.rb#86
  def update; end
end

# source://skylight//lib/skylight/errors.rb#15
class Skylight::GrpcConnectError < ::Skylight::NativeError
  class << self
    # source://skylight//lib/skylight/errors.rb#16
    def code; end

    # source://skylight//lib/skylight/errors.rb#17
    def message; end
  end
end

# Instrumenting a specific method will cause an event to be created every time that method is called.
# The event will be inserted at the appropriate place in the Skylight trace.
#
# To instrument a method, the first thing to do is include {Skylight::Helpers Skylight::Helpers}
# into the class that you will be instrumenting. Then, annotate each method that
# you wish to instrument with {Skylight::Helpers::ClassMethods#instrument_method instrument_method}.
#
# source://skylight//lib/skylight/helpers.rb#8
module Skylight::Helpers
  mixes_in_class_methods ::Skylight::Helpers::ClassMethods

  class << self
    # @api private
    # @private
    #
    # source://skylight//lib/skylight/helpers.rb#213
    def included(base); end
  end
end

# @see Skylight::Helpers
#
# source://skylight//lib/skylight/helpers.rb#10
module Skylight::Helpers::ClassMethods
  def __sk_singleton_class; end

  # @overload instrument_class_method
  #
  # source://skylight//lib/skylight/helpers.rb#129
  def instrument_class_method(name, **opts); end

  # @overload instrument_method
  # @overload instrument_method
  #
  # source://skylight//lib/skylight/helpers.rb#85
  def instrument_method(*args, **opts); end

  # @api private
  #
  # source://skylight//lib/skylight/helpers.rb#12
  def method_added(name); end

  # @api private
  #
  # source://skylight//lib/skylight/helpers.rb#22
  def singleton_method_added(name); end

  private

  # source://skylight//lib/skylight/helpers.rb#138
  def __sk_instrument_method_on(klass, name, title, **opts); end
end

# @api private
#
# source://skylight//lib/skylight/instrumenter.rb#8
class Skylight::Instrumenter
  include ::Skylight::Util::Logging

  # @api private
  # @return [Instrumenter] a new instance of Instrumenter
  #
  # source://skylight//lib/skylight/instrumenter.rb#63
  def initialize(uuid, config); end

  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#299
  def broken!; end

  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#48
  def config; end

  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#106
  def current_trace; end

  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#110
  def current_trace=(trace); end

  # possible values:
  # ignore: :all
  # ignore: :endpoint_assignment
  # ignore: false | nil
  #
  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#148
  def disable(ignore: T.unsafe(nil)); end

  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#78
  def disable_extension!(name); end

  # @api private
  # @return [Boolean]
  #
  # source://skylight//lib/skylight/instrumenter.rb#136
  def disabled?; end

  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#313
  def done(span, meta = T.unsafe(nil)); end

  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#74
  def enable_extension!(name); end

  # @api private
  # @return [Boolean]
  #
  # source://skylight//lib/skylight/instrumenter.rb#140
  def endpoint_assignment_muted?; end

  # @api private
  # @return [Boolean]
  #
  # source://skylight//lib/skylight/instrumenter.rb#82
  def extension_enabled?(name); end

  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#48
  def extensions; end

  # Because GraphQL can return multiple results, each of which
  # may have their own success/error states, we need to set the
  # skylight segment as follows:
  #
  # - when all queries have errors: "error"
  # - when some queries have errors: "<rendered format>+error"
  # - when no queries have errors: "<rendered format>"
  #
  # <rendered format> will be determined by the Rails controller as usual.
  # See Instrumenter#finalize_endpoint_segment for the actual segment/error assignment.
  #
  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#359
  def finalize_endpoint_segment(trace); end

  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#48
  def gc; end

  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#336
  def handle_instrumenter_error(trace, err); end

  # @api private
  # @return [Boolean]
  #
  # source://skylight//lib/skylight/instrumenter.rb#345
  def ignore?(trace); end

  # @api private
  # @raise [ArgumentError]
  #
  # source://skylight//lib/skylight/instrumenter.rb#253
  def instrument(cat, title = T.unsafe(nil), desc = T.unsafe(nil), meta = T.unsafe(nil)); end

  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#86
  def log_context; end

  # possible values:
  # ignore: :all
  # ignore: :endpoint_assignment
  # ignore: false | nil
  #
  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#148
  def mute(ignore: T.unsafe(nil)); end

  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#132
  def muted; end

  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#128
  def muted=(val); end

  # @api private
  def native_start; end

  # @api private
  def native_stop; end

  # @api private
  def native_submit_trace(_arg0); end

  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#98
  def native_track_desc(_endpoint, _description); end

  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#305
  def poison!; end

  # @api private
  # @return [Boolean]
  #
  # source://skylight//lib/skylight/instrumenter.rb#309
  def poisoned?; end

  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#319
  def process(trace); end

  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#207
  def shutdown; end

  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#164
  def silence_warnings(context); end

  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#177
  def start!; end

  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#48
  def subscriber; end

  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#212
  def trace(endpoint, cat, title = T.unsafe(nil), desc = T.unsafe(nil), meta: T.unsafe(nil), segment: T.unsafe(nil), component: T.unsafe(nil)); end

  # @api private
  # @return [Boolean]
  #
  # source://skylight//lib/skylight/instrumenter.rb#136
  def tracing_muted?; end

  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#156
  def unmute; end

  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#48
  def uuid; end

  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#115
  def validate_installation; end

  # @api private
  # @return [Boolean]
  #
  # source://skylight//lib/skylight/instrumenter.rb#170
  def warnings_silenced?(context); end

  class << self
    # @api private
    def native_new(_arg0, _arg1); end

    # @api private
    #
    # source://skylight//lib/skylight/instrumenter.rb#54
    def new(config); end
  end
end

# @api private
#
# source://skylight//lib/skylight/instrumenter.rb#9
Skylight::Instrumenter::KEY = T.let(T.unsafe(nil), Symbol)

# @api private
#
# source://skylight//lib/skylight/instrumenter.rb#13
class Skylight::Instrumenter::TraceInfo
  # @api private
  # @return [TraceInfo] a new instance of TraceInfo
  #
  # source://skylight//lib/skylight/instrumenter.rb#14
  def initialize(key = T.unsafe(nil)); end

  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#19
  def current; end

  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#23
  def current=(trace); end

  # @api private
  # @return [Boolean]
  #
  # source://skylight//lib/skylight/instrumenter.rb#42
  def endpoint_assignment_muted?; end

  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#34
  def muted; end

  # NOTE: This should only be set by the instrumenter, and only
  # in the context of a `mute` block. Do not try to turn this
  # flag on and off directly.
  #
  # @api private
  #
  # source://skylight//lib/skylight/instrumenter.rb#30
  def muted=(val); end

  # @api private
  # @return [Boolean]
  #
  # source://skylight//lib/skylight/instrumenter.rb#38
  def tracing_muted?; end
end

# source://skylight//lib/skylight/errors.rb#15
class Skylight::InstrumenterUnrecoverableError < ::Skylight::NativeError
  class << self
    # source://skylight//lib/skylight/errors.rb#16
    def code; end

    # source://skylight//lib/skylight/errors.rb#17
    def message; end
  end
end

# source://skylight//lib/skylight/errors.rb#15
class Skylight::InvalidUtf8Error < ::Skylight::NativeError
  class << self
    # source://skylight//lib/skylight/errors.rb#16
    def code; end

    # source://skylight//lib/skylight/errors.rb#17
    def message; end
  end
end

# source://skylight//lib/skylight.rb#37
Skylight::LOCK = T.let(T.unsafe(nil), Thread::Mutex)

# source://skylight//lib/skylight/errors.rb#15
class Skylight::MaximumTraceSpansError < ::Skylight::NativeError
  class << self
    # source://skylight//lib/skylight/errors.rb#16
    def code; end

    # source://skylight//lib/skylight/errors.rb#17
    def message; end
  end
end

# @api private
#
# source://skylight//lib/skylight/middleware.rb#5
class Skylight::Middleware
  include ::Skylight::Util::Logging

  # @api private
  # @return [Middleware] a new instance of Middleware
  #
  # source://skylight//lib/skylight/middleware.rb#77
  def initialize(app, opts = T.unsafe(nil)); end

  # @api private
  #
  # source://skylight//lib/skylight/middleware.rb#82
  def call(env); end

  # For Util::Logging
  #
  # @api private
  #
  # source://skylight//lib/skylight/middleware.rb#75
  def config; end

  private

  # @api private
  #
  # source://skylight//lib/skylight/middleware.rb#142
  def current_request_id; end

  # @api private
  #
  # source://skylight//lib/skylight/middleware.rb#146
  def current_request_id=(request_id); end

  # @api private
  #
  # source://skylight//lib/skylight/middleware.rb#122
  def endpoint_meta(_env); end

  # Allow for overwriting
  #
  # @api private
  #
  # source://skylight//lib/skylight/middleware.rb#118
  def endpoint_name(_env); end

  # @api private
  #
  # source://skylight//lib/skylight/middleware.rb#138
  def internal_request_id; end

  # @api private
  #
  # source://skylight//lib/skylight/middleware.rb#112
  def log_context; end

  # @api private
  #
  # source://skylight//lib/skylight/middleware.rb#134
  def make_request_id(request_id); end

  # Request ID code based on ActionDispatch::RequestId
  #
  # @api private
  #
  # source://skylight//lib/skylight/middleware.rb#127
  def set_request_id(env); end

  class << self
    # @api private
    #
    # source://skylight//lib/skylight/middleware.rb#51
    def with_after_close(resp, debug_identifier: T.unsafe(nil), &block); end
  end
end

# @api private
#
# source://skylight//lib/skylight/middleware.rb#8
class Skylight::Middleware::BodyProxy
  # @api private
  # @return [BodyProxy] a new instance of BodyProxy
  #
  # source://skylight//lib/skylight/middleware.rb#9
  def initialize(body, &block); end

  # @api private
  #
  # source://skylight//lib/skylight/middleware.rb#21
  def close; end

  # @api private
  # @return [Boolean]
  #
  # source://skylight//lib/skylight/middleware.rb#32
  def closed?; end

  # N.B. This method is a special case to address the bug described by
  # https://github.com/rack/rack/issues/434.
  # We are applying this special case for #each only. Future bugs of this
  # class will be handled by requesting users to patch their ruby
  # implementation, to save adding too many methods in this class.
  #
  # @api private
  #
  # source://skylight//lib/skylight/middleware.rb#41
  def each(*_arg0, **_arg1, &_arg2); end

  # @api private
  #
  # source://skylight//lib/skylight/middleware.rb#45
  def method_missing(*args, &block); end

  private

  # @api private
  # @return [Boolean]
  #
  # source://skylight//lib/skylight/middleware.rb#15
  def respond_to_missing?(name, include_all = T.unsafe(nil)); end
end

# @api private
#
# source://skylight//lib/skylight/middleware.rb#6
Skylight::Middleware::SKYLIGHT_REQUEST_ID = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/errors.rb#8
class Skylight::NativeError < ::StandardError
  # @return [NativeError] a new instance of NativeError
  #
  # source://skylight//lib/skylight/errors.rb#44
  def initialize(method_name); end

  # source://skylight//lib/skylight/errors.rb#49
  def code; end

  # source://skylight//lib/skylight/errors.rb#53
  def formatted_code; end

  # Returns the value of attribute method_name.
  #
  # source://skylight//lib/skylight/errors.rb#30
  def method_name; end

  class << self
    # source://skylight//lib/skylight/errors.rb#32
    def code; end

    # source://skylight//lib/skylight/errors.rb#26
    def for_code(code); end

    # source://skylight//lib/skylight/errors.rb#36
    def formatted_code; end

    # source://skylight//lib/skylight/errors.rb#40
    def message; end

    # source://skylight//lib/skylight/errors.rb#11
    def register(code, name, message); end
  end
end

# Convert AS::N events to Skylight events
#
# @api private
#
# source://skylight//lib/skylight/normalizers.rb#4
module Skylight::Normalizers
  class << self
    # @api private
    #
    # source://skylight//lib/skylight/normalizers.rb#31
    def build(config); end

    # @api private
    #
    # source://skylight//lib/skylight/normalizers.rb#27
    def disable(*names); end

    # @api private
    #
    # source://skylight//lib/skylight/normalizers.rb#18
    def enable(*names, enabled: T.unsafe(nil)); end

    # @api private
    #
    # source://skylight//lib/skylight/normalizers.rb#9
    def register(name, klass, opts = T.unsafe(nil)); end

    # @api private
    #
    # source://skylight//lib/skylight/normalizers.rb#5
    def registry; end

    # @api private
    #
    # source://skylight//lib/skylight/normalizers.rb#14
    def unregister(name); end
  end
end

# source://skylight//lib/skylight/normalizers/action_controller/process_action.rb#3
module Skylight::Normalizers::ActionController; end

# Normalizer for processing a Rails controller action
#
# source://skylight//lib/skylight/normalizers/action_controller/process_action.rb#5
class Skylight::Normalizers::ActionController::ProcessAction < ::Skylight::Normalizers::Normalizer
  # @option payload
  # @option payload
  # @param trace [Skylight::Messages::Trace::Builder]
  # @param name [String] ignored, only present to match API
  # @param payload [Hash]
  # @return [Array]
  #
  # source://skylight//lib/skylight/normalizers/action_controller/process_action.rb#20
  def normalize(trace, _name, payload); end

  # source://skylight//lib/skylight/normalizers/action_controller/process_action.rb#26
  def normalize_after(trace, _span, _name, payload); end

  private

  # source://skylight//lib/skylight/normalizers/action_controller/process_action.rb#36
  def controller_action(payload); end

  # source://skylight//lib/skylight/normalizers/action_controller/process_action.rb#40
  def process_meta_options(payload); end

  # source://skylight//lib/skylight/normalizers/action_controller/process_action.rb#45
  def segment_from_payload(payload); end

  # source://skylight//lib/skylight/normalizers/action_controller/process_action.rb#57
  def segment_from_status(status); end
end

# source://skylight//lib/skylight/normalizers/action_controller/process_action.rb#8
Skylight::Normalizers::ActionController::ProcessAction::CAT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/action_controller/send_file.rb#16
class Skylight::Normalizers::ActionController::SendFile < ::Skylight::Normalizers::Normalizer
  # @return [SendFile] a new instance of SendFile
  #
  # source://skylight//lib/skylight/normalizers/action_controller/send_file.rb#38
  def initialize(*_arg0); end

  # source://skylight//lib/skylight/normalizers/action_controller/send_file.rb#22
  def normalize(_trace, _name, _payload); end
end

# source://skylight//lib/skylight/normalizers/action_controller/send_file.rb#36
Skylight::Normalizers::ActionController::SendFile::ATTACHMENT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/action_controller/send_file.rb#19
Skylight::Normalizers::ActionController::SendFile::CAT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/action_controller/send_file.rb#35
Skylight::Normalizers::ActionController::SendFile::OCTET_STREAM = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/action_controller/send_file.rb#20
Skylight::Normalizers::ActionController::SendFile::TITLE = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/action_dispatch/process_middleware.rb#5
module Skylight::Normalizers::ActionDispatch; end

# source://skylight//lib/skylight/normalizers/action_dispatch/process_middleware.rb#6
class Skylight::Normalizers::ActionDispatch::ProcessMiddleware < ::Skylight::Normalizers::Normalizer
  # source://skylight//lib/skylight/normalizers/action_dispatch/process_middleware.rb#13
  def normalize(trace, _name, payload); end
end

# source://skylight//lib/skylight/normalizers/action_dispatch/process_middleware.rb#11
Skylight::Normalizers::ActionDispatch::ProcessMiddleware::ANONYMOUS = T.let(T.unsafe(nil), Regexp)

# source://skylight//lib/skylight/normalizers/action_dispatch/process_middleware.rb#10
Skylight::Normalizers::ActionDispatch::ProcessMiddleware::ANONYMOUS_MIDDLEWARE = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/action_dispatch/process_middleware.rb#9
Skylight::Normalizers::ActionDispatch::ProcessMiddleware::CAT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/action_dispatch/route_set.rb#4
class Skylight::Normalizers::ActionDispatch::RouteSet < ::Skylight::Normalizers::Normalizer
  # source://skylight//lib/skylight/normalizers/action_dispatch/route_set.rb#9
  def normalize(trace, _name, _payload); end

  private

  # source://skylight//lib/skylight/normalizers/action_dispatch/route_set.rb#20
  def process_meta_options(_payload); end

  # source://skylight//lib/skylight/normalizers/action_dispatch/route_set.rb#16
  def router_class_name; end
end

# source://skylight//lib/skylight/normalizers/action_dispatch/route_set.rb#7
Skylight::Normalizers::ActionDispatch::RouteSet::CAT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/action_view/render_collection.rb#5
module Skylight::Normalizers::ActionView; end

# Normalizer for Rails collection rendering
#
# source://skylight//lib/skylight/normalizers/action_view/render_collection.rb#7
class Skylight::Normalizers::ActionView::RenderCollection < ::Skylight::Normalizers::RenderNormalizer
  # @option payload
  # @option payload
  # @param trace [Skylight::Messages::Trace::Builder] ignored, only present to match API
  # @param name [String] ignored, only present to match API
  # @param payload [Hash] a customizable set of options
  # @param payload [Hash]
  # @return [Array]
  #
  # source://skylight//lib/skylight/normalizers/action_view/render_collection.rb#18
  def normalize(_trace, _name, payload); end
end

# source://skylight//lib/skylight/normalizers/action_view/render_collection.rb#10
Skylight::Normalizers::ActionView::RenderCollection::CAT = T.let(T.unsafe(nil), String)

# Normalizer for Rails layout rendering
#
# source://skylight//lib/skylight/normalizers/action_view/render_layout.rb#9
class Skylight::Normalizers::ActionView::RenderLayout < ::Skylight::Normalizers::RenderNormalizer
  # @option payload
  # @param trace [Skylight::Messages::Trace::Builder] ignored, only present to match API
  # @param name [String] ignored, only present to match API
  # @param payload [Hash]
  # @return [Array]
  #
  # source://skylight//lib/skylight/normalizers/action_view/render_layout.rb#19
  def normalize(_trace, _name, payload); end
end

# source://skylight//lib/skylight/normalizers/action_view/render_layout.rb#12
Skylight::Normalizers::ActionView::RenderLayout::CAT = T.let(T.unsafe(nil), String)

# Normalizer for Rails partial rendering
#
# source://skylight//lib/skylight/normalizers/action_view/render_partial.rb#7
class Skylight::Normalizers::ActionView::RenderPartial < ::Skylight::Normalizers::RenderNormalizer
  # @option payload
  # @param trace [Skylight::Messages::Trace::Builder] ignored, only present to match API
  # @param name [String] ignored, only present to match API
  # @param payload [Hash]
  # @return [Array]
  #
  # source://skylight//lib/skylight/normalizers/action_view/render_partial.rb#17
  def normalize(_trace, _name, payload); end
end

# source://skylight//lib/skylight/normalizers/action_view/render_partial.rb#10
Skylight::Normalizers::ActionView::RenderPartial::CAT = T.let(T.unsafe(nil), String)

# Normalizer for Rails template rendering
#
# source://skylight//lib/skylight/normalizers/action_view/render_template.rb#7
class Skylight::Normalizers::ActionView::RenderTemplate < ::Skylight::Normalizers::RenderNormalizer
  # @option payload
  # @param trace [Skylight::Messages::Trace::Builder] ignored, only present to match API
  # @param name [String] ignored, only present to match API
  # @param payload [Hash]
  # @return [Array]
  #
  # source://skylight//lib/skylight/normalizers/action_view/render_template.rb#17
  def normalize(_trace, _name, payload); end
end

# source://skylight//lib/skylight/normalizers/action_view/render_template.rb#10
Skylight::Normalizers::ActionView::RenderTemplate::CAT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/active_job/perform.rb#3
module Skylight::Normalizers::ActiveJob; end

# source://skylight//lib/skylight/normalizers/active_job/perform.rb#4
class Skylight::Normalizers::ActiveJob::Perform < ::Skylight::Normalizers::Normalizer
  # source://skylight//lib/skylight/normalizers/active_job/perform.rb#21
  def normalize(trace, _name, payload); end

  # source://skylight//lib/skylight/normalizers/active_job/perform.rb#31
  def normalize_after(trace, _span, _name, payload); end

  private

  # source://skylight//lib/skylight/normalizers/active_job/perform.rb#49
  def maybe_set_endpoint(trace, payload); end

  # source://skylight//lib/skylight/normalizers/active_job/perform.rb#42
  def normalize_adapter_name(adapter); end

  # source://skylight//lib/skylight/normalizers/active_job/perform.rb#76
  def normalize_title(job_instance); end

  # source://skylight//lib/skylight/normalizers/active_job/perform.rb#37
  def process_meta_options(payload); end

  class << self
    # source://skylight//lib/skylight/normalizers/active_job/perform.rb#10
    def normalize_title(job_instance); end
  end
end

# source://skylight//lib/skylight/normalizers/active_job/perform.rb#19
Skylight::Normalizers::ActiveJob::Perform::CAT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/active_job/perform.rb#8
Skylight::Normalizers::ActiveJob::Perform::DELAYED_JOB_WRAPPER = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/active_job/perform.rb#7
Skylight::Normalizers::ActiveJob::Perform::DELIVERY_JOB = T.let(T.unsafe(nil), Regexp)

# source://skylight//lib/skylight/normalizers/active_model_serializers/render.rb#3
module Skylight::Normalizers::ActiveModelSerializers; end

# source://skylight//lib/skylight/normalizers/active_model_serializers/render.rb#4
class Skylight::Normalizers::ActiveModelSerializers::Render < ::Skylight::Normalizers::Normalizer
  # source://skylight//lib/skylight/normalizers/active_model_serializers/render.rb#10
  def normalize(_trace, _name, payload); end
end

# source://skylight//lib/skylight/normalizers/active_model_serializers/render.rb#8
Skylight::Normalizers::ActiveModelSerializers::Render::ANONYMOUS = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/active_model_serializers/render.rb#7
Skylight::Normalizers::ActiveModelSerializers::Render::CAT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/active_record/instantiation.rb#3
module Skylight::Normalizers::ActiveRecord; end

# source://skylight//lib/skylight/normalizers/active_record/sql.rb#11
class Skylight::Normalizers::ActiveRecord::FutureResult < ::Skylight::Normalizers::Normalizer
  # source://skylight//lib/skylight/normalizers/active_record/sql.rb#14
  def normalize(_trace, _name, payload); end
end

# source://skylight//lib/skylight/normalizers/active_record/instantiation.rb#4
class Skylight::Normalizers::ActiveRecord::Instantiation < ::Skylight::Normalizers::Normalizer
  # source://skylight//lib/skylight/normalizers/active_record/instantiation.rb#9
  def normalize(_trace, _name, payload); end
end

# source://skylight//lib/skylight/normalizers/active_record/instantiation.rb#7
Skylight::Normalizers::ActiveRecord::Instantiation::CAT = T.let(T.unsafe(nil), String)

# Normalizer for SQL requests
#
# source://skylight//lib/skylight/normalizers/active_record/sql.rb#7
class Skylight::Normalizers::ActiveRecord::SQL < ::Skylight::Normalizers::SQL; end

# source://skylight//lib/skylight/normalizers/active_storage.rb#3
class Skylight::Normalizers::ActiveStorage < ::Skylight::Normalizers::Normalizer
  # source://skylight//lib/skylight/normalizers/active_storage.rb#19
  def normalize(_trace, name, _payload); end
end

# source://skylight//lib/skylight/normalizers/active_storage.rb#4
Skylight::Normalizers::ActiveStorage::TITLES = T.let(T.unsafe(nil), Hash)

# source://skylight//lib/skylight/normalizers/active_support/cache.rb#3
module Skylight::Normalizers::ActiveSupport; end

# source://skylight//lib/skylight/normalizers/active_support/cache.rb#4
class Skylight::Normalizers::ActiveSupport::Cache < ::Skylight::Normalizers::Normalizer; end

# source://skylight//lib/skylight/normalizers/active_support/cache_clear.rb#4
class Skylight::Normalizers::ActiveSupport::CacheClear < ::Skylight::Normalizers::ActiveSupport::Cache
  # source://skylight//lib/skylight/normalizers/active_support/cache_clear.rb#10
  def normalize(_trace, _name, _payload); end
end

# source://skylight//lib/skylight/normalizers/active_support/cache_clear.rb#7
Skylight::Normalizers::ActiveSupport::CacheClear::CAT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/active_support/cache_clear.rb#8
Skylight::Normalizers::ActiveSupport::CacheClear::TITLE = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/active_support/cache_decrement.rb#4
class Skylight::Normalizers::ActiveSupport::CacheDecrement < ::Skylight::Normalizers::ActiveSupport::Cache
  # source://skylight//lib/skylight/normalizers/active_support/cache_decrement.rb#10
  def normalize(_trace, _name, _payload); end
end

# source://skylight//lib/skylight/normalizers/active_support/cache_decrement.rb#7
Skylight::Normalizers::ActiveSupport::CacheDecrement::CAT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/active_support/cache_decrement.rb#8
Skylight::Normalizers::ActiveSupport::CacheDecrement::TITLE = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/active_support/cache_delete.rb#4
class Skylight::Normalizers::ActiveSupport::CacheDelete < ::Skylight::Normalizers::ActiveSupport::Cache
  # source://skylight//lib/skylight/normalizers/active_support/cache_delete.rb#10
  def normalize(_trace, _name, _payload); end
end

# source://skylight//lib/skylight/normalizers/active_support/cache_delete.rb#7
Skylight::Normalizers::ActiveSupport::CacheDelete::CAT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/active_support/cache_delete.rb#8
Skylight::Normalizers::ActiveSupport::CacheDelete::TITLE = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/active_support/cache_exist.rb#4
class Skylight::Normalizers::ActiveSupport::CacheExist < ::Skylight::Normalizers::ActiveSupport::Cache
  # source://skylight//lib/skylight/normalizers/active_support/cache_exist.rb#10
  def normalize(_trace, _name, _payload); end
end

# source://skylight//lib/skylight/normalizers/active_support/cache_exist.rb#7
Skylight::Normalizers::ActiveSupport::CacheExist::CAT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/active_support/cache_exist.rb#8
Skylight::Normalizers::ActiveSupport::CacheExist::TITLE = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/active_support/cache_fetch_hit.rb#4
class Skylight::Normalizers::ActiveSupport::CacheFetchHit < ::Skylight::Normalizers::ActiveSupport::Cache
  # source://skylight//lib/skylight/normalizers/active_support/cache_fetch_hit.rb#10
  def normalize(_trace, _name, _payload); end
end

# source://skylight//lib/skylight/normalizers/active_support/cache_fetch_hit.rb#7
Skylight::Normalizers::ActiveSupport::CacheFetchHit::CAT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/active_support/cache_fetch_hit.rb#8
Skylight::Normalizers::ActiveSupport::CacheFetchHit::TITLE = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/active_support/cache_generate.rb#4
class Skylight::Normalizers::ActiveSupport::CacheGenerate < ::Skylight::Normalizers::ActiveSupport::Cache
  # source://skylight//lib/skylight/normalizers/active_support/cache_generate.rb#10
  def normalize(_trace, _name, _payload); end
end

# source://skylight//lib/skylight/normalizers/active_support/cache_generate.rb#7
Skylight::Normalizers::ActiveSupport::CacheGenerate::CAT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/active_support/cache_generate.rb#8
Skylight::Normalizers::ActiveSupport::CacheGenerate::TITLE = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/active_support/cache_increment.rb#4
class Skylight::Normalizers::ActiveSupport::CacheIncrement < ::Skylight::Normalizers::ActiveSupport::Cache
  # source://skylight//lib/skylight/normalizers/active_support/cache_increment.rb#10
  def normalize(_trace, _name, _payload); end
end

# source://skylight//lib/skylight/normalizers/active_support/cache_increment.rb#7
Skylight::Normalizers::ActiveSupport::CacheIncrement::CAT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/active_support/cache_increment.rb#8
Skylight::Normalizers::ActiveSupport::CacheIncrement::TITLE = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/active_support/cache_read.rb#4
class Skylight::Normalizers::ActiveSupport::CacheRead < ::Skylight::Normalizers::ActiveSupport::Cache
  # source://skylight//lib/skylight/normalizers/active_support/cache_read.rb#10
  def normalize(_trace, _name, _payload); end
end

# source://skylight//lib/skylight/normalizers/active_support/cache_read.rb#7
Skylight::Normalizers::ActiveSupport::CacheRead::CAT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/active_support/cache_read.rb#8
Skylight::Normalizers::ActiveSupport::CacheRead::TITLE = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/active_support/cache_read_multi.rb#4
class Skylight::Normalizers::ActiveSupport::CacheReadMulti < ::Skylight::Normalizers::ActiveSupport::Cache
  # source://skylight//lib/skylight/normalizers/active_support/cache_read_multi.rb#10
  def normalize(_trace, _name, _payload); end
end

# source://skylight//lib/skylight/normalizers/active_support/cache_read_multi.rb#7
Skylight::Normalizers::ActiveSupport::CacheReadMulti::CAT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/active_support/cache_read_multi.rb#8
Skylight::Normalizers::ActiveSupport::CacheReadMulti::TITLE = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/active_support/cache_write.rb#4
class Skylight::Normalizers::ActiveSupport::CacheWrite < ::Skylight::Normalizers::ActiveSupport::Cache
  # source://skylight//lib/skylight/normalizers/active_support/cache_write.rb#10
  def normalize(_trace, _name, _payload); end
end

# source://skylight//lib/skylight/normalizers/active_support/cache_write.rb#7
Skylight::Normalizers::ActiveSupport::CacheWrite::CAT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/active_support/cache_write.rb#8
Skylight::Normalizers::ActiveSupport::CacheWrite::TITLE = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/coach/handler_finish.rb#3
module Skylight::Normalizers::Coach; end

# source://skylight//lib/skylight/normalizers/coach/handler_finish.rb#4
class Skylight::Normalizers::Coach::HandlerFinish < ::Skylight::Normalizers::Normalizer
  # Run when the handler first starts, we need to set the trace endpoint to be the
  # handler name.
  #
  # We can expect the payload to have the :middleware key.
  #
  # source://skylight//lib/skylight/normalizers/coach/handler_finish.rb#26
  def normalize(trace, _name, payload); end

  # source://skylight//lib/skylight/normalizers/coach/handler_finish.rb#31
  def normalize_after(trace, _span, _name, payload); end
end

# source://skylight//lib/skylight/normalizers/coach/handler_finish.rb#17
Skylight::Normalizers::Coach::HandlerFinish::CAT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/coach/middleware_finish.rb#4
class Skylight::Normalizers::Coach::MiddlewareFinish < ::Skylight::Normalizers::Normalizer
  # Called whenever a new middleware is executed. We can expect this to happen
  # within a Coach::Handler.
  #
  # We can expect the payload to have the :middleware key.
  #
  # source://skylight//lib/skylight/normalizers/coach/middleware_finish.rb#26
  def normalize(trace, _name, payload); end
end

# source://skylight//lib/skylight/normalizers/coach/middleware_finish.rb#17
Skylight::Normalizers::Coach::MiddlewareFinish::CAT = T.let(T.unsafe(nil), String)

# @api private
#
# source://skylight//lib/skylight/normalizers.rb#100
class Skylight::Normalizers::Container
  # @api private
  # @return [Container] a new instance of Container
  #
  # source://skylight//lib/skylight/normalizers.rb#101
  def initialize(normalizers); end

  # @api private
  #
  # source://skylight//lib/skylight/normalizers.rb#109
  def each_key(&block); end

  # @api private
  #
  # source://skylight//lib/skylight/normalizers.rb#105
  def keys; end

  # @api private
  #
  # source://skylight//lib/skylight/normalizers.rb#113
  def normalize(trace, name, payload); end

  # @api private
  #
  # source://skylight//lib/skylight/normalizers.rb#117
  def normalize_after(trace, span, name, payload); end

  # @api private
  #
  # source://skylight//lib/skylight/normalizers.rb#121
  def normalizer_for(name); end
end

# source://skylight//lib/skylight/normalizers/couch_potato/query.rb#5
module Skylight::Normalizers::CouchPotato; end

# source://skylight//lib/skylight/normalizers/couch_potato/query.rb#6
class Skylight::Normalizers::CouchPotato::Query < ::Skylight::Normalizers::Normalizer
  # source://skylight//lib/skylight/normalizers/couch_potato/query.rb#12
  def normalize(_trace, name, payload); end
end

# source://skylight//lib/skylight/normalizers/couch_potato/query.rb#10
Skylight::Normalizers::CouchPotato::Query::CAT = T.let(T.unsafe(nil), String)

# @api private
#
# source://skylight//lib/skylight/normalizers.rb#98
Skylight::Normalizers::DEFAULT = T.let(T.unsafe(nil), Skylight::Normalizers::Default)

# source://skylight//lib/skylight/normalizers/data_mapper/sql.rb#5
module Skylight::Normalizers::DataMapper; end

# Normalizer for SQL requests
#
# source://skylight//lib/skylight/normalizers/data_mapper/sql.rb#7
class Skylight::Normalizers::DataMapper::SQL < ::Skylight::Normalizers::SQL; end

# The default normalizer, used if no other is found.
#
# source://skylight//lib/skylight/normalizers/default.rb#4
class Skylight::Normalizers::Default < ::Skylight::Normalizers::Normalizer
  # @return [Default] a new instance of Default
  #
  # source://skylight//lib/skylight/normalizers/default.rb#5
  def initialize; end

  # source://skylight//lib/skylight/normalizers/default.rb#9
  def config; end

  # @option payload
  # @option payload
  # @param trace [Skylight::Messages::Trace::Builder] ignored, only present to match API
  # @param name [String]
  # @param payload [Hash]
  # @return [Array, :skip] the normalized array or `:skip` if `name` is not part of a known {Skylight::TIERS tier}
  #
  # source://skylight//lib/skylight/normalizers/default.rb#19
  def normalize(_trace, name, payload); end
end

# source://skylight//lib/skylight/normalizers/elasticsearch/request.rb#3
module Skylight::Normalizers::Elasticsearch; end

# source://skylight//lib/skylight/normalizers/elasticsearch/request.rb#4
class Skylight::Normalizers::Elasticsearch::Request < ::Skylight::Normalizers::Normalizer
  # source://skylight//lib/skylight/normalizers/elasticsearch/request.rb#9
  def normalize(_trace, _name, payload); end
end

# source://skylight//lib/skylight/normalizers/elasticsearch/request.rb#7
Skylight::Normalizers::Elasticsearch::Request::CAT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/faraday/request.rb#5
module Skylight::Normalizers::Faraday; end

# source://skylight//lib/skylight/normalizers/faraday/request.rb#6
class Skylight::Normalizers::Faraday::Request < ::Skylight::Normalizers::Normalizer
  # @return [Boolean]
  #
  # source://skylight//lib/skylight/normalizers/faraday/request.rb#19
  def disabled?; end

  # source://skylight//lib/skylight/normalizers/faraday/request.rb#23
  def normalize(_trace, _name, payload); end

  class << self
    # source://skylight//lib/skylight/normalizers/faraday/request.rb#11
    def disable; end
  end
end

# source://skylight//lib/skylight/normalizers/faraday/request.rb#9
Skylight::Normalizers::Faraday::Request::DISABLED_KEY = T.let(T.unsafe(nil), Symbol)

# source://skylight//lib/skylight/normalizers/grape/endpoint.rb#3
module Skylight::Normalizers::Grape; end

# source://skylight//lib/skylight/normalizers/grape/endpoint.rb#4
class Skylight::Normalizers::Grape::Endpoint < ::Skylight::Normalizers::Normalizer
  private

  # source://skylight//lib/skylight/normalizers/grape/endpoint.rb#11
  def get_method(endpoint); end

  # source://skylight//lib/skylight/normalizers/grape/endpoint.rb#21
  def get_namespace(endpoint); end

  # source://skylight//lib/skylight/normalizers/grape/endpoint.rb#17
  def get_path(endpoint); end
end

# source://skylight//lib/skylight/normalizers/grape/endpoint_render.rb#4
class Skylight::Normalizers::Grape::EndpointRender < ::Skylight::Normalizers::Grape::Endpoint
  # source://skylight//lib/skylight/normalizers/grape/endpoint_render.rb#9
  def normalize(_trace, _name, payload); end
end

# source://skylight//lib/skylight/normalizers/grape/endpoint_render.rb#7
Skylight::Normalizers::Grape::EndpointRender::CAT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/grape/endpoint_run.rb#4
class Skylight::Normalizers::Grape::EndpointRun < ::Skylight::Normalizers::Grape::Endpoint
  # source://skylight//lib/skylight/normalizers/grape/endpoint_run.rb#7
  def normalize(trace, _name, payload); end

  private

  # source://skylight//lib/skylight/normalizers/grape/endpoint_run.rb#30
  def base_app_name(endpoint); end

  # source://skylight//lib/skylight/normalizers/grape/endpoint_run.rb#17
  def get_endpoint_name(endpoint); end
end

# source://skylight//lib/skylight/normalizers/grape/endpoint_run_filters.rb#4
class Skylight::Normalizers::Grape::EndpointRunFilters < ::Skylight::Normalizers::Grape::Endpoint
  # source://skylight//lib/skylight/normalizers/grape/endpoint_run_filters.rb#9
  def normalize(_trace, _name, payload); end
end

# source://skylight//lib/skylight/normalizers/grape/endpoint_run_filters.rb#7
Skylight::Normalizers::Grape::EndpointRunFilters::CAT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/grape/format_response.rb#4
class Skylight::Normalizers::Grape::FormatResponse < ::Skylight::Normalizers::Normalizer
  # source://skylight//lib/skylight/normalizers/grape/format_response.rb#9
  def normalize(_trace, _name, payload); end
end

# source://skylight//lib/skylight/normalizers/grape/format_response.rb#7
Skylight::Normalizers::Grape::FormatResponse::CAT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/graphql/base.rb#5
module Skylight::Normalizers::GraphQL; end

# source://skylight//lib/skylight/normalizers/graphql/base.rb#96
class Skylight::Normalizers::GraphQL::AnalyzeQuery < ::Skylight::Normalizers::GraphQL::Base; end

# source://skylight//lib/skylight/normalizers/graphql/base.rb#28
Skylight::Normalizers::GraphQL::AnalyzeQuery::KEY = T.let(T.unsafe(nil), String)

# Some AS::N events in GraphQL are not super useful.
# We are purposefully ignoring the following keys (and you probably shouldn't add them):
#  - "graphql.analyze_multiplex"
#  - "graphql.execute_field" (very frequently called)
#  - "graphql.execute_field_lazy"
#
# source://skylight//lib/skylight/normalizers/graphql/base.rb#12
class Skylight::Normalizers::GraphQL::Base < ::Skylight::Normalizers::Normalizer
  # source://skylight//lib/skylight/normalizers/graphql/base.rb#35
  def normalize(_trace, _name, _payload); end

  private

  # source://skylight//lib/skylight/normalizers/graphql/base.rb#45
  def extract_query_name(query); end

  # source://skylight//lib/skylight/normalizers/graphql/base.rb#41
  def key; end

  class << self
    # @private
    #
    # source://skylight//lib/skylight/normalizers/graphql/base.rb#26
    def inherited(klass); end

    # source://skylight//lib/skylight/normalizers/graphql/base.rb#31
    def key; end

    # source://skylight//lib/skylight/normalizers/graphql/base.rb#21
    def register_graphql; end
  end
end

# source://skylight//lib/skylight/normalizers/graphql/base.rb#13
Skylight::Normalizers::GraphQL::Base::ANONYMOUS = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/graphql/base.rb#14
Skylight::Normalizers::GraphQL::Base::CAT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/graphql/base.rb#62
class Skylight::Normalizers::GraphQL::ExecuteMultiplex < ::Skylight::Normalizers::GraphQL::Base
  # source://skylight//lib/skylight/normalizers/graphql/base.rb#65
  def normalize_after(trace, _span, _name, payload); end
end

# source://skylight//lib/skylight/normalizers/graphql/base.rb#28
Skylight::Normalizers::GraphQL::ExecuteMultiplex::KEY = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/graphql/base.rb#100
class Skylight::Normalizers::GraphQL::ExecuteQuery < ::Skylight::Normalizers::GraphQL::Base
  # source://skylight//lib/skylight/normalizers/graphql/base.rb#103
  def normalize(trace, _name, payload); end
end

# source://skylight//lib/skylight/normalizers/graphql/base.rb#28
Skylight::Normalizers::GraphQL::ExecuteQuery::KEY = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/graphql/base.rb#116
class Skylight::Normalizers::GraphQL::ExecuteQueryLazy < ::Skylight::Normalizers::GraphQL::ExecuteQuery
  # source://skylight//lib/skylight/normalizers/graphql/base.rb#119
  def normalize(trace, _name, payload); end
end

# source://skylight//lib/skylight/normalizers/graphql/base.rb#28
Skylight::Normalizers::GraphQL::ExecuteQueryLazy::KEY = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/graphql/base.rb#50
class Skylight::Normalizers::GraphQL::Lex < ::Skylight::Normalizers::GraphQL::Base; end

# source://skylight//lib/skylight/normalizers/graphql/base.rb#28
Skylight::Normalizers::GraphQL::Lex::KEY = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/graphql/base.rb#54
class Skylight::Normalizers::GraphQL::Parse < ::Skylight::Normalizers::GraphQL::Base; end

# source://skylight//lib/skylight/normalizers/graphql/base.rb#28
Skylight::Normalizers::GraphQL::Parse::KEY = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/graphql/base.rb#58
class Skylight::Normalizers::GraphQL::Validate < ::Skylight::Normalizers::GraphQL::Base; end

# source://skylight//lib/skylight/normalizers/graphql/base.rb#28
Skylight::Normalizers::GraphQL::Validate::KEY = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/graphiti/resolve.rb#5
module Skylight::Normalizers::Graphiti; end

# source://skylight//lib/skylight/normalizers/graphiti/render.rb#6
class Skylight::Normalizers::Graphiti::Render < ::Skylight::Normalizers::Normalizer
  # source://skylight//lib/skylight/normalizers/graphiti/render.rb#12
  def normalize(_trace, _name, payload); end
end

# source://skylight//lib/skylight/normalizers/graphiti/render.rb#10
Skylight::Normalizers::Graphiti::Render::ANONYMOUS = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/graphiti/render.rb#9
Skylight::Normalizers::Graphiti::Render::CAT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/graphiti/resolve.rb#6
class Skylight::Normalizers::Graphiti::Resolve < ::Skylight::Normalizers::Normalizer
  # source://skylight//lib/skylight/normalizers/graphiti/resolve.rb#14
  def normalize(_trace, _name, payload); end
end

# source://skylight//lib/skylight/normalizers/graphiti/resolve.rb#12
Skylight::Normalizers::Graphiti::Resolve::ANONYMOUS_ADAPTER = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/graphiti/resolve.rb#11
Skylight::Normalizers::Graphiti::Resolve::ANONYMOUS_RESOURCE = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/graphiti/resolve.rb#9
Skylight::Normalizers::Graphiti::Resolve::CAT = T.let(T.unsafe(nil), String)

# @api private
#
# source://skylight//lib/skylight/normalizers.rb#48
class Skylight::Normalizers::Normalizer
  include ::Skylight::Util::Logging

  # @api private
  # @return [Normalizer] a new instance of Normalizer
  #
  # source://skylight//lib/skylight/normalizers.rb#57
  def initialize(config); end

  # @api private
  #
  # source://skylight//lib/skylight/normalizers.rb#53
  def config; end

  # @api private
  #
  # source://skylight//lib/skylight/normalizers.rb#62
  def normalize(_trace, _name, _payload); end

  # @api private
  #
  # source://skylight//lib/skylight/normalizers.rb#78
  def normalize_after(trace, span, name, payload); end

  # @api private
  #
  # source://skylight//lib/skylight/normalizers.rb#66
  def normalize_with_meta(trace, name, payload); end

  private

  # @api private
  #
  # source://skylight//lib/skylight/normalizers.rb#83
  def process_meta(trace, _name, payload, meta, cache_key: T.unsafe(nil)); end

  # @api private
  #
  # source://skylight//lib/skylight/normalizers.rb#92
  def process_meta_options(_payload); end

  class << self
    # @api private
    #
    # source://skylight//lib/skylight/normalizers.rb#49
    def register(name, opts = T.unsafe(nil)); end
  end
end

# Base Normalizer for Rails rendering
#
# source://skylight//lib/skylight/normalizers/render.rb#4
class Skylight::Normalizers::RenderNormalizer < ::Skylight::Normalizers::Normalizer
  include ::Skylight::Util::AllocationFree

  # Generic normalizer for renders
  #
  # @option payload
  # @param category [String]
  # @param payload [Hash]
  # @return [Array]
  #
  # source://skylight//lib/skylight/normalizers/render.rb#24
  def normalize_render(category, payload); end

  # source://skylight//lib/skylight/normalizers/render.rb#32
  def relative_path(path); end

  # source://skylight//lib/skylight/normalizers/render.rb#7
  def setup; end

  private

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/normalizers/render.rb#73
  def absolute_path?(path); end

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/normalizers/render.rb#53
  def relative_path?(path); end
end

# source://skylight//lib/skylight/normalizers/render.rb#57
Skylight::Normalizers::RenderNormalizer::SEPARATOR_BYTE = T.let(T.unsafe(nil), Integer)

# Normalizer for SQL requests
#
# source://skylight//lib/skylight/normalizers/sql.rb#8
class Skylight::Normalizers::SQL < ::Skylight::Normalizers::Normalizer
  # @option payload
  # @option payload
  # @param trace [Skylight::Messages::Trace::Builder] ignored, only present to match API
  # @param name [String] ignored, only present to match API
  # @param payload [Hash]
  # @return [Array]
  #
  # source://skylight//lib/skylight/normalizers/sql.rb#17
  def normalize(_trace, _name, payload); end
end

# source://skylight//lib/skylight/normalizers/sql.rb#9
Skylight::Normalizers::SQL::CAT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/normalizers/sequel/sql.rb#5
module Skylight::Normalizers::Sequel; end

# Normalizer for SQL requests
#
# source://skylight//lib/skylight/normalizers/sequel/sql.rb#7
class Skylight::Normalizers::Sequel::SQL < ::Skylight::Normalizers::SQL; end

# source://skylight//lib/skylight/normalizers/shrine.rb#3
class Skylight::Normalizers::Shrine < ::Skylight::Normalizers::Normalizer
  # source://skylight//lib/skylight/normalizers/shrine.rb#23
  def normalize(_trace, name, _payload); end
end

# source://skylight//lib/skylight/normalizers/shrine.rb#4
Skylight::Normalizers::Shrine::TITLES = T.let(T.unsafe(nil), Hash)

# @api private
#
# source://skylight//lib/skylight/probes.rb#6
module Skylight::Probes
  class << self
    # @api private
    #
    # source://skylight//lib/skylight/probes.rb#80
    def add_path(path); end

    # @api private
    #
    # source://skylight//lib/skylight/probes.rb#91
    def available; end

    # @api private
    # @return [Boolean]
    #
    # source://skylight//lib/skylight/probes.rb#61
    def constant_available?(const_name); end

    # @api private
    #
    # source://skylight//lib/skylight/probes.rb#148
    def each_by_require_path(require_path); end

    # @api private
    #
    # source://skylight//lib/skylight/probes.rb#65
    def install!; end

    # @api private
    #
    # source://skylight//lib/skylight/probes.rb#73
    def install_probe(registration); end

    # @api private
    #
    # source://skylight//lib/skylight/probes.rb#110
    def installed; end

    # @api private
    # @raise [ArgumentError]
    #
    # source://skylight//lib/skylight/probes.rb#95
    def probe(*probes); end

    # @api private
    #
    # source://skylight//lib/skylight/probes.rb#114
    def register(name, *args); end

    # @api private
    #
    # source://skylight//lib/skylight/probes.rb#134
    def register_require_hook(registration); end

    # @api private
    #
    # source://skylight//lib/skylight/probes.rb#102
    def registered; end

    # @api private
    #
    # source://skylight//lib/skylight/probes.rb#122
    def require_hook(require_path); end

    # @api private
    #
    # source://skylight//lib/skylight/probes.rb#106
    def require_hooks; end

    # @api private
    #
    # source://skylight//lib/skylight/probes.rb#141
    def unregister_require_hook(registration); end
  end
end

# @api private
#
# source://skylight//lib/skylight/probes.rb#7
class Skylight::Probes::ProbeRegistration
  # @api private
  # @return [ProbeRegistration] a new instance of ProbeRegistration
  #
  # source://skylight//lib/skylight/probes.rb#10
  def initialize(name, const_name, require_paths, probe); end

  # @api private
  #
  # source://skylight//lib/skylight/probes.rb#8
  def const_name; end

  # @api private
  # @return [Boolean]
  #
  # source://skylight//lib/skylight/probes.rb#23
  def constant_available?; end

  # @api private
  #
  # source://skylight//lib/skylight/probes.rb#17
  def install; end

  # @api private
  #
  # source://skylight//lib/skylight/probes.rb#8
  def name; end

  # @api private
  #
  # source://skylight//lib/skylight/probes.rb#8
  def probe; end

  # @api private
  #
  # source://skylight//lib/skylight/probes.rb#8
  def require_paths; end

  private

  # @api private
  #
  # source://skylight//lib/skylight/probes.rb#29
  def log_install_exception(err); end
end

# @api private
#
# source://skylight//lib/skylight/railtie.rb#6
class Skylight::Railtie < ::Rails::Railtie
  private

  # @api private
  # @return [Boolean]
  #
  # source://skylight//lib/skylight/railtie.rb#152
  def activate?(sk_config); end

  # @api private
  #
  # source://skylight//lib/skylight/railtie.rb#144
  def config_path(app); end

  # @api private
  #
  # source://skylight//lib/skylight/railtie.rb#118
  def configure_logging(config, app); end

  # @api private
  #
  # source://skylight//lib/skylight/railtie.rb#55
  def development_warning; end

  # @api private
  #
  # source://skylight//lib/skylight/railtie.rb#148
  def environments; end

  # @api private
  #
  # source://skylight//lib/skylight/railtie.rb#92
  def existent_paths(paths); end

  # @api private
  #
  # source://skylight//lib/skylight/railtie.rb#176
  def insert_middleware(app, config); end

  # @api private
  #
  # source://skylight//lib/skylight/railtie.rb#163
  def load_probes; end

  # @api private
  #
  # source://skylight//lib/skylight/railtie.rb#96
  def load_skylight_config(app); end

  # @api private
  #
  # source://skylight//lib/skylight/railtie.rb#51
  def log_prefix; end

  # @api private
  #
  # source://skylight//lib/skylight/railtie.rb#88
  def log_warning(config, msg); end

  # @api private
  #
  # source://skylight//lib/skylight/railtie.rb#168
  def middleware_position; end

  # @api private
  #
  # source://skylight//lib/skylight/railtie.rb#60
  def run_initializer(app); end

  # @api private
  #
  # source://skylight//lib/skylight/railtie.rb#187
  def set_middleware_position(app, config); end

  # We must have an opt-in signal
  #
  # @api private
  #
  # source://skylight//lib/skylight/railtie.rb#40
  def show_worker_activation_warning(sk_config); end

  # @api private
  #
  # source://skylight//lib/skylight/railtie.rb#200
  def sk_rails_config(target = T.unsafe(nil)); end
end

# source://skylight//lib/skylight/deprecation.rb#6
Skylight::SKYLIGHT_GEM_ROOT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/sidekiq.rb#2
module Skylight::Sidekiq
  class << self
    # source://skylight//lib/skylight/sidekiq.rb#3
    def add_middleware; end
  end
end

# source://skylight//lib/skylight/sidekiq.rb#19
class Skylight::Sidekiq::ServerMiddleware
  include ::Skylight::Util::Logging

  # source://skylight//lib/skylight/sidekiq.rb#22
  def call(worker, job, queue); end
end

# source://skylight//lib/skylight/errors.rb#15
class Skylight::SqlLexError < ::Skylight::NativeError
  class << self
    # source://skylight//lib/skylight/errors.rb#16
    def code; end

    # source://skylight//lib/skylight/errors.rb#17
    def message; end
  end
end

# @api private
#
# source://skylight//lib/skylight/subscriber.rb#3
class Skylight::Subscriber
  include ::Skylight::Util::Logging

  # @api private
  # @return [Subscriber] a new instance of Subscriber
  #
  # source://skylight//lib/skylight/subscriber.rb#8
  def initialize(config, instrumenter); end

  # @api private
  #
  # source://skylight//lib/skylight/subscriber.rb#6
  def config; end

  # @api private
  #
  # source://skylight//lib/skylight/subscriber.rb#60
  def finish(name, _id, payload); end

  # @api private
  #
  # source://skylight//lib/skylight/subscriber.rb#6
  def normalizers; end

  # @api private
  #
  # source://skylight//lib/skylight/subscriber.rb#83
  def publish(name, *args); end

  # @api private
  #
  # source://skylight//lib/skylight/subscriber.rb#87
  def publish_event(event); end

  # @api private
  #
  # source://skylight//lib/skylight/subscriber.rb#15
  def register!; end

  # @api private
  #
  # source://skylight//lib/skylight/subscriber.rb#53
  def start(name, _id, payload); end

  # @api private
  #
  # source://skylight//lib/skylight/subscriber.rb#20
  def unregister!; end

  # @api private
  #
  # source://skylight//lib/skylight/subscriber.rb#43
  def with_trace(trace, &block); end

  private

  # @api private
  #
  # source://skylight//lib/skylight/subscriber.rb#105
  def _start(trace, name, payload); end

  # @api private
  #
  # source://skylight//lib/skylight/subscriber.rb#93
  def current_trace; end

  # @api private
  #
  # source://skylight//lib/skylight/subscriber.rb#97
  def normalize(*args); end

  # @api private
  #
  # source://skylight//lib/skylight/subscriber.rb#101
  def normalize_after(*args); end
end

# @api private
#
# source://skylight//lib/skylight/subscriber.rb#41
Skylight::Subscriber::EXCEPTION_IMMEDIATE = T.let(T.unsafe(nil), Hash)

# cargo-culted from Rails's ConnectionAdapter
#
# @api private
#
# source://skylight//lib/skylight/subscriber.rb#40
Skylight::Subscriber::EXCEPTION_NEVER = T.let(T.unsafe(nil), Hash)

# ===== ActiveSupport::Notifications API
#
# @api private
#
# source://skylight//lib/skylight/subscriber.rb#30
class Skylight::Subscriber::Notification
  # @api private
  # @return [Notification] a new instance of Notification
  #
  # source://skylight//lib/skylight/subscriber.rb#33
  def initialize(name, span); end

  # @api private
  #
  # source://skylight//lib/skylight/subscriber.rb#31
  def name; end

  # @api private
  #
  # source://skylight//lib/skylight/subscriber.rb#31
  def span; end
end

# @api private
#
# source://skylight//lib/skylight.rb#40
Skylight::TIERS = T.let(T.unsafe(nil), Array)

# @api private
#
# source://skylight//lib/skylight.rb#43
Skylight::TIER_REGEX = T.let(T.unsafe(nil), Regexp)

# source://skylight//lib/skylight/trace.rb#5
class Skylight::Trace
  include ::Skylight::Util::Logging

  # @raise [ArgumentError]
  # @return [Trace] a new instance of Trace
  #
  # source://skylight//lib/skylight/trace.rb#32
  def initialize(instrumenter, cat, title, desc, meta, component: T.unsafe(nil)); end

  # source://skylight//lib/skylight/trace.rb#174
  def broken!; end

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/trace.rb#108
  def broken?; end

  # Returns the value of attribute component.
  #
  # source://skylight//lib/skylight/trace.rb#13
  def component; end

  # Returns the value of attribute compound_response_error_status.
  #
  # source://skylight//lib/skylight/trace.rb#90
  def compound_response_error_status; end

  # Sets the attribute compound_response_error_status
  #
  # @param value the value to set the attribute compound_response_error_status to.
  #
  # source://skylight//lib/skylight/trace.rb#90
  def compound_response_error_status=(_arg0); end

  # source://skylight//lib/skylight/trace.rb#92
  def config; end

  # source://skylight//lib/skylight/trace.rb#140
  def done(span, meta = T.unsafe(nil)); end

  # Returns the value of attribute endpoint.
  #
  # source://skylight//lib/skylight/trace.rb#13
  def endpoint; end

  # source://skylight//lib/skylight/trace.rb#79
  def endpoint=(value); end

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/trace.rb#104
  def endpoint_assignment_muted?; end

  # source://skylight//lib/skylight/trace.rb#163
  def inspect; end

  # source://skylight//lib/skylight/trace.rb#121
  def instrument(cat, title = T.unsafe(nil), desc = T.unsafe(nil), meta = T.unsafe(nil)); end

  # Returns the value of attribute instrumenter.
  #
  # source://skylight//lib/skylight/trace.rb#13
  def instrumenter; end

  # source://skylight//lib/skylight/trace.rb#75
  def log_context; end

  # source://skylight//lib/skylight/trace.rb#112
  def maybe_broken(err); end

  # Returns the value of attribute meta.
  #
  # source://skylight//lib/skylight/trace.rb#13
  def meta; end

  # source://skylight//lib/skylight/trace.rb#96
  def muted; end

  def native_get_component; end
  def native_get_endpoint; end
  def native_get_started_at; end
  def native_get_uuid; end
  def native_set_component(_arg0); end
  def native_set_endpoint(_arg0); end
  def native_set_exception(_arg0); end
  def native_span_get_category(_arg0); end
  def native_span_get_title(_arg0); end
  def native_span_set_description(_arg0, _arg1); end
  def native_span_set_exception(_arg0, _arg1, _arg2); end
  def native_span_set_meta(_arg0, _arg1); end
  def native_span_set_title(_arg0, _arg1); end
  def native_span_started(_arg0); end
  def native_start_span(_arg0, _arg1); end
  def native_stop_span(_arg0, _arg1); end
  def native_use_pruning; end

  # Returns the value of attribute notifications.
  #
  # source://skylight//lib/skylight/trace.rb#13
  def notifications; end

  # source://skylight//lib/skylight/trace.rb#167
  def release; end

  # Returns the value of attribute segment.
  #
  # source://skylight//lib/skylight/trace.rb#13
  def segment; end

  # source://skylight//lib/skylight/trace.rb#85
  def segment=(value); end

  # source://skylight//lib/skylight/trace.rb#195
  def submit; end

  # source://skylight//lib/skylight/trace.rb#67
  def too_many_spans!; end

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/trace.rb#71
  def too_many_spans?; end

  # source://skylight//lib/skylight/trace.rb#179
  def traced; end

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/trace.rb#100
  def tracing_muted?; end

  # source://skylight//lib/skylight/trace.rb#58
  def uuid; end

  # source://skylight//lib/skylight/trace.rb#62
  def uuid=(value); end

  private

  # source://skylight//lib/skylight/trace.rb#357
  def allowed_meta_keys; end

  # source://skylight//lib/skylight/trace.rb#334
  def component=(component); end

  # Middleware spans that were interrupted by a throw/catch should be cached here.
  # keys: span ids
  # values: nsec timestamp at which the span was cached here.
  #
  # source://skylight//lib/skylight/trace.rb#263
  def deferred_spans; end

  # source://skylight//lib/skylight/trace.rb#319
  def gc_time; end

  # Originally extracted from `stop`.
  # If we attempt to close spans out of order, and it appears to be a middleware issue,
  # disable the middleware probe and mark trace as broken.
  #
  # source://skylight//lib/skylight/trace.rb#295
  def handle_unexpected_stop(expected, span); end

  # source://skylight//lib/skylight/trace.rb#361
  def maybe_warn(context, msg); end

  # source://skylight//lib/skylight/trace.rb#256
  def mute_child_instrumentation(span); end

  # source://skylight//lib/skylight/trace.rb#283
  def normalized_stop(span, time); end

  # source://skylight//lib/skylight/trace.rb#342
  def preprocess_meta(meta); end

  # source://skylight//lib/skylight/trace.rb#330
  def resolve_component(component); end

  # source://skylight//lib/skylight/trace.rb#234
  def start(time, cat, title, desc, meta, opts = T.unsafe(nil)); end

  # source://skylight//lib/skylight/trace.rb#267
  def stop(span, time); end

  # source://skylight//lib/skylight/trace.rb#223
  def track_gc(time, now); end

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/trace.rb#326
  def use_pruning?; end

  # source://skylight//lib/skylight/trace.rb#347
  def validate_meta(meta); end

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/trace.rb#369
  def warnings_silenced?(context); end

  class << self
    def native_new(_arg0, _arg1, _arg2, _arg3); end

    # source://skylight//lib/skylight/trace.rb#15
    def new(instrumenter, endpoint, start, cat, title = T.unsafe(nil), desc = T.unsafe(nil), meta: T.unsafe(nil), segment: T.unsafe(nil), component: T.unsafe(nil)); end

    # TODO: Move this into native
    #
    # source://skylight//lib/skylight/trace.rb#26
    def normalize_time(time); end
  end
end

# source://skylight//lib/skylight/trace.rb#6
Skylight::Trace::GC_CAT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/trace.rb#9
Skylight::Trace::META_KEYS = T.let(T.unsafe(nil), Array)

# source://skylight//lib/skylight/trace.rb#7
Skylight::Trace::SYNTHETIC = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/user_config.rb#5
class Skylight::UserConfig
  # @return [UserConfig] a new instance of UserConfig
  #
  # source://skylight//lib/skylight/user_config.rb#8
  def initialize(config); end

  # Returns the value of attribute disable_dev_warning.
  #
  # source://skylight//lib/skylight/user_config.rb#6
  def disable_dev_warning; end

  # Sets the attribute disable_dev_warning
  #
  # @param value the value to set the attribute disable_dev_warning to.
  #
  # source://skylight//lib/skylight/user_config.rb#6
  def disable_dev_warning=(_arg0); end

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/user_config.rb#35
  def disable_dev_warning?; end

  # Returns the value of attribute disable_env_warning.
  #
  # source://skylight//lib/skylight/user_config.rb#6
  def disable_env_warning; end

  # Sets the attribute disable_env_warning
  #
  # @param value the value to set the attribute disable_env_warning to.
  #
  # source://skylight//lib/skylight/user_config.rb#6
  def disable_env_warning=(_arg0); end

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/user_config.rb#39
  def disable_env_warning?; end

  # source://skylight//lib/skylight/user_config.rb#14
  def file_path; end

  # source://skylight//lib/skylight/user_config.rb#43
  def reload; end

  # source://skylight//lib/skylight/user_config.rb#51
  def save; end

  # source://skylight//lib/skylight/user_config.rb#56
  def to_hash; end
end

# @api private
#
# source://skylight//lib/skylight/util/logging.rb#4
module Skylight::Util; end

# Log both to the specified logger and STDOUT
#
# source://skylight//lib/skylight/util/logging.rb#6
class Skylight::Util::AlertLogger
  # @return [AlertLogger] a new instance of AlertLogger
  #
  # source://skylight//lib/skylight/util/logging.rb#7
  def initialize(logger); end

  # source://skylight//lib/skylight/util/logging.rb#20
  def close; end

  # source://skylight//lib/skylight/util/logging.rb#11
  def write(*args); end
end

# Helpers to reduce memory allocation
#
# source://skylight//lib/skylight/util/allocation_free.rb#4
module Skylight::Util::AllocationFree
  # Find an item in an array without allocation.
  #
  # return the found item or nil, if nothing found
  #
  # @param array [Array] the array to search
  # @yield a block called against each item until a match is found
  # @yieldparam item an item from the array
  # @yieldreturn [Boolean] whether `item` matches the criteria
  #
  # source://skylight//lib/skylight/util/allocation_free.rb#12
  def array_find(array); end
end

# A more precise clock
#
# source://skylight//lib/skylight/util/clock.rb#4
class Skylight::Util::Clock
  # TODO: rename to secs
  #
  # source://skylight//lib/skylight/util/clock.rb#22
  def absolute_secs; end

  # TODO: remove
  #
  # source://skylight//lib/skylight/util/clock.rb#27
  def nanos; end

  def native_hrtime; end

  # TODO: remove
  #
  # source://skylight//lib/skylight/util/clock.rb#32
  def secs; end

  # source://skylight//lib/skylight/util/clock.rb#7
  def tick; end

  class << self
    # source://skylight//lib/skylight/util/clock.rb#37
    def absolute_secs; end

    # source://skylight//lib/skylight/util/clock.rb#49
    def default; end

    # Sets the attribute default
    #
    # @param value the value to set the attribute default to.
    #
    # source://skylight//lib/skylight/util/clock.rb#53
    def default=(_arg0); end

    # source://skylight//lib/skylight/util/clock.rb#41
    def nanos; end

    # source://skylight//lib/skylight/util/clock.rb#45
    def secs; end

    # source://skylight//lib/skylight/util/clock.rb#5
    def use_native!; end
  end
end

# source://skylight//lib/skylight/util/component.rb#7
class Skylight::Util::Component
  # @raise [ArgumentError]
  # @return [Component] a new instance of Component
  #
  # source://skylight//lib/skylight/util/component.rb#15
  def initialize(environment, name, force_worker: T.unsafe(nil)); end

  # keys here should match those from the main config
  #
  # source://skylight//lib/skylight/util/component.rb#42
  def as_json(*_arg0); end

  # Returns the value of attribute environment.
  #
  # source://skylight//lib/skylight/util/component.rb#8
  def environment; end

  # Sets the attribute environment
  #
  # @param value the value to set the attribute environment to.
  #
  # source://skylight//lib/skylight/util/component.rb#8
  def environment=(_arg0); end

  # Returns the value of attribute name.
  #
  # source://skylight//lib/skylight/util/component.rb#8
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://skylight//lib/skylight/util/component.rb#8
  def name=(_arg0); end

  # source://skylight//lib/skylight/util/component.rb#29
  def to_encoded_s; end

  # source://skylight//lib/skylight/util/component.rb#25
  def to_s; end

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/util/component.rb#33
  def web?; end

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/util/component.rb#37
  def worker?; end

  private

  # source://skylight//lib/skylight/util/component.rb#52
  def argv; end

  # source://skylight//lib/skylight/util/component.rb#48
  def program_name; end

  # source://skylight//lib/skylight/util/component.rb#56
  def resolve_name(given_name, force_worker); end

  # @raise [ArgumentError]
  #
  # source://skylight//lib/skylight/util/component.rb#64
  def validate_string!(string, kind); end
end

# source://skylight//lib/skylight/util/component.rb#13
Skylight::Util::Component::DEFAULT_ENVIRONMENT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/util/component.rb#11
Skylight::Util::Component::DEFAULT_NAME = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/util/component.rb#10
Skylight::Util::Component::NAME_FORMAT = T.let(T.unsafe(nil), Regexp)

# source://skylight//lib/skylight/util/component.rb#12
Skylight::Util::Component::WORKER_NAME = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/util/deploy.rb#6
module Skylight::Util::Deploy
  class << self
    # source://skylight//lib/skylight/util/deploy.rb#7
    def build(config); end
  end
end

# source://skylight//lib/skylight/util/deploy.rb#114
Skylight::Util::Deploy::DEPLOY_TYPES = T.let(T.unsafe(nil), Array)

# source://skylight//lib/skylight/util/deploy.rb#46
class Skylight::Util::Deploy::DefaultDeploy < ::Skylight::Util::Deploy::EmptyDeploy
  include ::Skylight::Util::Logging

  # @return [DefaultDeploy] a new instance of DefaultDeploy
  #
  # source://skylight//lib/skylight/util/deploy.rb#49
  def initialize(*_arg0); end

  # source://skylight//lib/skylight/util/deploy.rb#62
  def description; end

  # source://skylight//lib/skylight/util/deploy.rb#58
  def git_sha; end

  # source://skylight//lib/skylight/util/deploy.rb#54
  def id; end
end

# source://skylight//lib/skylight/util/deploy.rb#15
class Skylight::Util::Deploy::EmptyDeploy
  # @return [EmptyDeploy] a new instance of EmptyDeploy
  #
  # source://skylight//lib/skylight/util/deploy.rb#18
  def initialize(config); end

  # Returns the value of attribute config.
  #
  # source://skylight//lib/skylight/util/deploy.rb#16
  def config; end

  # source://skylight//lib/skylight/util/deploy.rb#31
  def description; end

  # source://skylight//lib/skylight/util/deploy.rb#27
  def git_sha; end

  # source://skylight//lib/skylight/util/deploy.rb#23
  def id; end

  # Returns the value of attribute timestamp.
  #
  # source://skylight//lib/skylight/util/deploy.rb#16
  def timestamp; end

  # source://skylight//lib/skylight/util/deploy.rb#35
  def to_query_hash; end
end

# source://skylight//lib/skylight/util/deploy.rb#96
class Skylight::Util::Deploy::GitDeploy < ::Skylight::Util::Deploy::EmptyDeploy
  # @return [GitDeploy] a new instance of GitDeploy
  #
  # source://skylight//lib/skylight/util/deploy.rb#99
  def initialize(*_arg0); end

  # Returns the value of attribute description.
  #
  # source://skylight//lib/skylight/util/deploy.rb#97
  def description; end

  # Returns the value of attribute git_sha.
  #
  # source://skylight//lib/skylight/util/deploy.rb#97
  def git_sha; end

  private

  # source://skylight//lib/skylight/util/deploy.rb#106
  def get_info; end
end

# source://skylight//lib/skylight/util/deploy.rb#67
class Skylight::Util::Deploy::HerokuDeploy < ::Skylight::Util::Deploy::EmptyDeploy
  # @return [HerokuDeploy] a new instance of HerokuDeploy
  #
  # source://skylight//lib/skylight/util/deploy.rb#68
  def initialize(*_arg0); end

  # source://skylight//lib/skylight/util/deploy.rb#81
  def description; end

  # source://skylight//lib/skylight/util/deploy.rb#77
  def git_sha; end

  # source://skylight//lib/skylight/util/deploy.rb#73
  def id; end

  private

  # source://skylight//lib/skylight/util/deploy.rb#87
  def get_info; end
end

# Provides Gzip compressing support
#
# source://skylight//lib/skylight/util/gzip.rb#6
module Skylight::Util::Gzip
  class << self
    # Compress a string with Gzip
    #
    # @param str [String] uncompressed string
    # @return [String] compressed string
    #
    # source://skylight//lib/skylight/util/gzip.rb#11
    def compress(str); end
  end
end

# source://skylight//lib/skylight/util/http.rb#11
class Skylight::Util::HTTP
  include ::Skylight::Util::Logging

  # @return [HTTP] a new instance of HTTP
  #
  # source://skylight//lib/skylight/util/http.rb#41
  def initialize(config, service = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns the value of attribute authentication.
  #
  # source://skylight//lib/skylight/util/http.rb#24
  def authentication; end

  # Sets the attribute authentication
  #
  # @param value the value to set the attribute authentication to.
  #
  # source://skylight//lib/skylight/util/http.rb#24
  def authentication=(_arg0); end

  # Returns the value of attribute config.
  #
  # source://skylight//lib/skylight/util/http.rb#25
  def config; end

  # source://skylight//lib/skylight/util/http.rb#68
  def get(endpoint, hdrs = T.unsafe(nil)); end

  # Returns the value of attribute host.
  #
  # source://skylight//lib/skylight/util/http.rb#25
  def host; end

  # Returns the value of attribute port.
  #
  # source://skylight//lib/skylight/util/http.rb#25
  def port; end

  # source://skylight//lib/skylight/util/http.rb#73
  def post(endpoint, body, hdrs = T.unsafe(nil)); end

  private

  # source://skylight//lib/skylight/util/http.rb#89
  def build_request(type, endpoint, hdrs, length = T.unsafe(nil)); end

  # source://skylight//lib/skylight/util/http.rb#103
  def do_request(http, req); end

  # source://skylight//lib/skylight/util/http.rb#122
  def execute(req, body = T.unsafe(nil)); end

  # source://skylight//lib/skylight/util/http.rb#85
  def get_timeout(type, config, service, opts); end
end

# source://skylight//lib/skylight/util/http.rb#15
Skylight::Util::HTTP::ACCEPT = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/util/http.rb#17
Skylight::Util::HTTP::APPLICATION_JSON = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/util/http.rb#18
Skylight::Util::HTTP::AUTHORIZATION = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/util/http.rb#12
Skylight::Util::HTTP::CONTENT_ENCODING = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/util/http.rb#13
Skylight::Util::HTTP::CONTENT_LENGTH = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/util/http.rb#14
Skylight::Util::HTTP::CONTENT_TYPE = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/util/http.rb#19
Skylight::Util::HTTP::DEFLATE = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/util/http.rb#207
class Skylight::Util::HTTP::ErrorResponse < ::Struct
  # Returns the value of attribute exception
  #
  # @return [Object] the current value of exception
  def exception; end

  # Sets the attribute exception
  #
  # @param value [Object] the value to set the attribute exception to.
  # @return [Object] the newly set value
  def exception=(_); end

  # Returns the value of attribute request
  #
  # @return [Object] the current value of request
  def request; end

  # Sets the attribute request
  #
  # @param value [Object] the value to set the attribute request to.
  # @return [Object] the newly set value
  def request=(_); end

  # source://skylight//lib/skylight/util/http.rb#208
  def status; end

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/util/http.rb#212
  def success?; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://skylight//lib/skylight/util/http.rb#20
Skylight::Util::HTTP::GZIP = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/util/http.rb#27
Skylight::Util::HTTP::READ_EXCEPTIONS = T.let(T.unsafe(nil), Array)

# source://skylight//lib/skylight/util/http.rb#38
class Skylight::Util::HTTP::ReadResponseError < ::StandardError; end

# source://skylight//lib/skylight/util/http.rb#163
class Skylight::Util::HTTP::Response
  # @return [Response] a new instance of Response
  #
  # source://skylight//lib/skylight/util/http.rb#166
  def initialize(status, headers, body); end

  # Returns the value of attribute body.
  #
  # source://skylight//lib/skylight/util/http.rb#164
  def body; end

  # Returns the value of attribute exception.
  #
  # source://skylight//lib/skylight/util/http.rb#164
  def exception; end

  # source://skylight//lib/skylight/util/http.rb#189
  def get(key); end

  # Returns the value of attribute headers.
  #
  # source://skylight//lib/skylight/util/http.rb#164
  def headers; end

  # source://skylight//lib/skylight/util/http.rb#197
  def method_missing(name, *args, &blk); end

  # Returns the value of attribute status.
  #
  # source://skylight//lib/skylight/util/http.rb#164
  def status; end

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/util/http.rb#181
  def success?; end

  # source://skylight//lib/skylight/util/http.rb#185
  def to_s; end

  private

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/util/http.rb#193
  def respond_to_missing?(name, include_all = T.unsafe(nil)); end
end

# source://skylight//lib/skylight/util/http.rb#29
class Skylight::Util::HTTP::StartError < ::StandardError
  # @return [StartError] a new instance of StartError
  #
  # source://skylight//lib/skylight/util/http.rb#32
  def initialize(error); end

  # Returns the value of attribute original.
  #
  # source://skylight//lib/skylight/util/http.rb#30
  def original; end
end

# source://skylight//lib/skylight/util/http.rb#16
Skylight::Util::HTTP::X_VERSION_HDR = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/util/hostname.rb#6
module Skylight::Util::Hostname
  class << self
    # source://skylight//lib/skylight/util/hostname.rb#7
    def default_hostname; end
  end
end

# source://skylight//lib/skylight/util/instrumenter_method.rb#3
module Skylight::Util::InstrumenterMethod
  # source://skylight//lib/skylight/util/instrumenter_method.rb#4
  def instrumenter_method(name, wrapped_block: T.unsafe(nil)); end
end

# source://skylight//lib/skylight/util/logging.rb#24
module Skylight::Util::Logging
  # source://skylight//lib/skylight/util/logging.rb#97
  def config_for_logging; end

  # @param msg [String] the message to log
  # @param args [Array] values for `Kernel#sprintf` on `msg`
  #
  # source://skylight//lib/skylight/util/logging.rb#62
  def debug(msg, *args); end

  # @param msg [String] the message to log
  # @param args [Array] values for `Kernel#sprintf` on `msg`
  #
  # source://skylight//lib/skylight/util/logging.rb#80
  def error(msg, *args); end

  # Alias for `Kernel#sprintf`
  #
  # @return [String]
  #
  # source://skylight//lib/skylight/util/logging.rb#93
  def fmt(*args); end

  # @param msg [String] the message to log
  # @param args [Array] values for `Kernel#sprintf` on `msg`
  #
  # source://skylight//lib/skylight/util/logging.rb#68
  def info(msg, *args); end

  # @param level [String, Symbol] the method on `logger` to use for logging
  # @param msg [String] the message to log
  # @param args [Array] values for `Kernel#sprintf` on `msg`
  #
  # source://skylight//lib/skylight/util/logging.rb#108
  def log(level, msg, *args); end

  # source://skylight//lib/skylight/util/logging.rb#25
  def log_context; end

  # source://skylight//lib/skylight/util/logging.rb#62
  def log_debug(msg, *args); end

  # source://skylight//lib/skylight/util/logging.rb#80
  def log_error(msg, *args); end

  # source://skylight//lib/skylight/util/logging.rb#68
  def log_info(msg, *args); end

  # Logs if tracing
  #
  # See {trace?}.
  #
  # source://skylight//lib/skylight/util/logging.rb#42
  def log_trace(msg, *args); end

  # source://skylight//lib/skylight/util/logging.rb#74
  def log_warn(msg, *args); end

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/util/logging.rb#33
  def raise_on_error?; end

  # Evaluates and logs the result of the block if tracing
  #
  # See {trace?}.
  #
  # @yield block to be evaluted
  # @yieldreturn arguments for {#debug}
  #
  # source://skylight//lib/skylight/util/logging.rb#54
  def t; end

  # Logs if tracing
  #
  # See {trace?}.
  #
  # @param msg [String] the message to log
  # @param args [Array] values for `Kernel#sprintf` on `msg`
  #
  # source://skylight//lib/skylight/util/logging.rb#42
  def trace(msg, *args); end

  # @return [Boolean]
  #
  # source://skylight//lib/skylight/util/logging.rb#29
  def trace?; end

  # @param msg [String] the message to log
  # @param args [Array] values for `Kernel#sprintf` on `msg`
  #
  # source://skylight//lib/skylight/util/logging.rb#74
  def warn(msg, *args); end
end

# source://skylight//lib/skylight/util/lru_cache.rb#4
class Skylight::Util::LruCache
  # @return [LruCache] a new instance of LruCache
  #
  # source://skylight//lib/skylight/util/lru_cache.rb#5
  def initialize(max_size); end

  # source://skylight//lib/skylight/util/lru_cache.rb#31
  def clear; end

  # Individual hash operations here are atomic in MRI.
  #
  # source://skylight//lib/skylight/util/lru_cache.rb#18
  def fetch(key); end

  # @raise [ArgumentError]
  #
  # source://skylight//lib/skylight/util/lru_cache.rb#10
  def max_size=(size); end
end

# source://skylight//lib/skylight/util/platform.rb#6
module Skylight::Util::Platform
  class << self
    # source://skylight//lib/skylight/util/platform.rb#69
    def dlext; end

    # source://skylight//lib/skylight/util/platform.rb#65
    def libext; end

    # source://skylight//lib/skylight/util/platform.rb#61
    def tuple; end
  end
end

# Normalize the platform CPU
#
# source://skylight//lib/skylight/util/platform.rb#33
Skylight::Util::Platform::ARCH = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/util/platform.rb#47
Skylight::Util::Platform::LIBEXT = T.let(T.unsafe(nil), String)

# Normalize the platform OS
#
# source://skylight//lib/skylight/util/platform.rb#8
Skylight::Util::Platform::OS = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/util/platform.rb#59
Skylight::Util::Platform::TUPLE = T.let(T.unsafe(nil), String)

# source://skylight//lib/skylight/util/proxy.rb#3
module Skylight::Util::Proxy
  class << self
    # source://skylight//lib/skylight/util/proxy.rb#4
    def detect_url(env); end
  end
end

# source://skylight//lib/skylight/util/ssl.rb#5
class Skylight::Util::SSL
  class << self
    # @return [Boolean]
    #
    # source://skylight//lib/skylight/util/ssl.rb#21
    def ca_cert_file?; end

    # source://skylight//lib/skylight/util/ssl.rb#25
    def ca_cert_file_or_default; end

    # source://skylight//lib/skylight/util/ssl.rb#8
    def detect_ca_cert_file!; end
  end
end

# source://skylight//lib/skylight/util/ssl.rb#6
Skylight::Util::SSL::DEFAULT_CA_FILE = T.let(T.unsafe(nil), String)

# pre-release versions should be given here as "5.0.0-alpha"
# for compatibility with semver when it is parsed by the rust agent.
# This string will be transformed in the gemspec to "5.0.0.alpha"
# to conform with rubygems.
#
# source://skylight//lib/skylight/version.rb#6
Skylight::VERSION = T.let(T.unsafe(nil), String)

# @api private
#
# source://skylight//lib/skylight/vm/gc.rb#3
module Skylight::VM; end

# This doesn't quite work as we would like it. I believe that the GC
# statistics includes time that is not stop-the-world, this does not
# necessarily take time away from the application.
#
# require 'java'
# class GC
#   def initialize
#     @factory = Java::JavaLangManagement::ManagementFactory
#   end
#
#   def enable
#   end
#
#   def total_time
#     res = 0.0
#
#     @factory.garbage_collector_mx_beans.each do |mx|
#       res += (mx.collection_time.to_f / 1_000.0)
#     end
#
#     res
#   end
# end
#
# @api private
#
# source://skylight//lib/skylight/vm/gc.rb#29
class Skylight::VM::GC
  # @api private
  # @return [GC] a new instance of GC
  #
  # source://skylight//lib/skylight/vm/gc.rb#30
  def initialize; end

  # @api private
  #
  # source://skylight//lib/skylight/vm/gc.rb#34
  def enable; end

  # @api private
  #
  # source://skylight//lib/skylight/vm/gc.rb#38
  def total_time; end
end

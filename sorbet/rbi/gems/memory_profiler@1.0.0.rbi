# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `memory_profiler` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module MemoryProfiler
  class << self
    def report(opts = T.unsafe(nil), &block); end
    def start(opts = T.unsafe(nil)); end
    def stop; end
  end
end

class MemoryProfiler::CLI
  def run(argv); end

  private

  def option_parser(options); end
  def reporter_options(options); end
  def results_options(options); end
end

class MemoryProfiler::Helpers
  def initialize; end

  def guess_gem(path); end
  def lookup_class_name(klass); end
  def lookup_location(file, line); end
  def lookup_string(obj); end
  def object_class(obj); end
end

MemoryProfiler::Helpers::KERNEL_CLASS_METHOD = T.let(T.unsafe(nil), UnboundMethod)

class MemoryProfiler::Monochrome
  def line(text); end
  def path(text); end
  def string(text); end
end

class MemoryProfiler::Polychrome
  def line(text); end
  def path(text); end
  def string(text); end

  private

  def bg_black(str); end
  def bg_blue(str); end
  def bg_brown(str); end
  def bg_cyan(str); end
  def bg_gray(str); end
  def bg_green(str); end
  def bg_magenta(str); end
  def bg_red(str); end
  def black(str); end
  def blue(str); end
  def bold(str); end
  def brown(str); end
  def cyan(str); end
  def gray(str); end
  def green(str); end
  def magenta(str); end
  def red(str); end
  def reverse_color(str); end
end

class MemoryProfiler::Reporter
  def initialize(opts = T.unsafe(nil)); end

  def generation; end
  def report_results; end
  def run(&block); end
  def start; end
  def stop; end
  def top; end
  def trace; end

  private

  def object_list(generation); end

  class << self
    def current_reporter; end
    def current_reporter=(_arg0); end
    def report(opts = T.unsafe(nil), &block); end
  end
end

class MemoryProfiler::Results
  def allocated_memory_by_class; end
  def allocated_memory_by_class=(_arg0); end
  def allocated_memory_by_file; end
  def allocated_memory_by_file=(_arg0); end
  def allocated_memory_by_gem; end
  def allocated_memory_by_gem=(_arg0); end
  def allocated_memory_by_location; end
  def allocated_memory_by_location=(_arg0); end
  def allocated_objects_by_class; end
  def allocated_objects_by_class=(_arg0); end
  def allocated_objects_by_file; end
  def allocated_objects_by_file=(_arg0); end
  def allocated_objects_by_gem; end
  def allocated_objects_by_gem=(_arg0); end
  def allocated_objects_by_location; end
  def allocated_objects_by_location=(_arg0); end
  def normalize_path(path); end
  def pretty_print(io = T.unsafe(nil), **options); end
  def print_string_reports(io, options); end
  def register_results(allocated, retained, top); end
  def retained_memory_by_class; end
  def retained_memory_by_class=(_arg0); end
  def retained_memory_by_file; end
  def retained_memory_by_file=(_arg0); end
  def retained_memory_by_gem; end
  def retained_memory_by_gem=(_arg0); end
  def retained_memory_by_location; end
  def retained_memory_by_location=(_arg0); end
  def retained_objects_by_class; end
  def retained_objects_by_class=(_arg0); end
  def retained_objects_by_file; end
  def retained_objects_by_file=(_arg0); end
  def retained_objects_by_gem; end
  def retained_objects_by_gem=(_arg0); end
  def retained_objects_by_location; end
  def retained_objects_by_location=(_arg0); end
  def scale_bytes(bytes); end
  def string_report(data, top); end
  def strings_allocated; end
  def strings_allocated=(_arg0); end
  def strings_retained; end
  def strings_retained=(_arg0); end
  def total_allocated; end
  def total_allocated=(_arg0); end
  def total_allocated_memsize; end
  def total_allocated_memsize=(_arg0); end
  def total_retained; end
  def total_retained=(_arg0); end
  def total_retained_memsize; end
  def total_retained_memsize=(_arg0); end

  private

  def dump_data(io, type, metric, name, options); end
  def dump_strings(io, type, options); end
  def print_output(io, topic, detail); end
  def print_title(io, title); end
  def total_memsize(stat_hash); end

  class << self
    def register_type(name, stat_attribute); end
  end
end

MemoryProfiler::Results::METRICS = T.let(T.unsafe(nil), Array)

MemoryProfiler::Results::NAMES = T.let(T.unsafe(nil), Array)

MemoryProfiler::Results::TYPES = T.let(T.unsafe(nil), Array)

MemoryProfiler::Results::UNIT_PREFIXES = T.let(T.unsafe(nil), Hash)

class MemoryProfiler::Stat
  def initialize(class_name, gem, file, location, memsize, string_value); end

  def class_name; end
  def file; end
  def gem; end
  def location; end
  def memsize; end
  def string_value; end
end

class MemoryProfiler::StatHash < ::Hash
  include(::MemoryProfiler::TopN)
end

module MemoryProfiler::TopN
  def top_n(max, metric_method); end
end

MemoryProfiler::VERSION = T.let(T.unsafe(nil), String)

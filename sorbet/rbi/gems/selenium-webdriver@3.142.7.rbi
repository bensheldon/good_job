# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `selenium-webdriver` gem.
# Please instead update this file by running `bin/tapioca gem selenium-webdriver`.

module Selenium; end

module Selenium::WebDriver
  class << self
    # Create a new Driver instance with the correct bridge for the given browser
    #
    # One special argument is not passed on to the bridges, :listener.
    # You can pass a listener for this option to get notified of WebDriver events.
    # The passed object must respond to #call or implement the methods from AbstractEventListener.
    #
    # @example
    #
    #   WebDriver.for :firefox, profile: 'some-profile'
    #   WebDriver.for :firefox, profile: Profile.new
    #   WebDriver.for :remote,  url: "http://localhost:4444/wd/hub", desired_capabilities: caps
    # @overload for
    # @overload for
    # @return [Driver]
    # @see Selenium::WebDriver::Edge::Driver
    # @see Selenium::WebDriver::Chrome::Driver
    # @see Selenium::WebDriver::PhantomJS::Driver
    # @see Selenium::WebDriver::Safari::Driver
    # @see Selenium::WebDriver::Support::AbstractEventListener
    # @see Selenium::WebDriver::Remote::Driver
    # @see Selenium::WebDriver::Firefox::Driver
    # @see Selenium::WebDriver::IE::Driver
    def for(*args); end

    # Returns logger instance that can be used across the whole Selenium.
    #
    # @return [Logger]
    def logger; end

    # @api private
    def root; end
  end
end

# The ActionBuilder provides the user a way to set up and perform
# complex user interactions.
#
# This class should not be instantiated directly, but is created by Driver#action
#
# @example
#
#   driver.action.key_down(:shift).
#   click(element).
#   click(second_element).
#   key_up(:shift).
#   drag_and_drop(element, third_element).
#   perform
class Selenium::WebDriver::ActionBuilder
  # @api private
  # @return [ActionBuilder] a new instance of ActionBuilder
  def initialize(mouse, keyboard); end

  # Clicks in the middle of the given element. Equivalent to:
  #
  #   driver.action.move_to(element).click
  #
  # When no element is passed, the current mouse position will be clicked.
  #
  # @example Clicking on an element
  #
  #   el = driver.find_element(id: "some_id")
  #   driver.action.click(el).perform
  # @example Clicking at the current mouse position
  #
  #   driver.action.click.perform
  # @param element [Selenium::WebDriver::Element] An optional element to click.
  # @return [ActionBuilder] A self reference.
  def click(element = T.unsafe(nil)); end

  # Clicks (without releasing) in the middle of the given element. This is
  # equivalent to:
  #
  #   driver.action.move_to(element).click_and_hold
  #
  # @example Clicking and holding on some element
  #
  #   el = driver.find_element(id: "some_id")
  #   driver.action.click_and_hold(el).perform
  # @param element [Element] the element to move to and click.
  # @return [ActionBuilder] A self reference.
  def click_and_hold(element = T.unsafe(nil)); end

  # Performs a context-click at middle of the given element. First performs
  # a move_to to the location of the element.
  #
  # @example Context-click at middle of given element
  #
  #   el = driver.find_element(id: "some_id")
  #   driver.action.context_click(el).perform
  # @param element [Selenium::WebDriver::Element] An element to context click.
  # @return [ActionBuilder] A self reference.
  def context_click(element = T.unsafe(nil)); end

  # Performs a double-click at middle of the given element. Equivalent to:
  #
  #   driver.action.move_to(element).double_click
  #
  # @example Double click an element
  #
  #   el = driver.find_element(id: "some_id")
  #   driver.action.double_click(el).perform
  # @param element [Selenium::WebDriver::Element] An optional element to move to.
  # @return [ActionBuilder] A self reference.
  def double_click(element = T.unsafe(nil)); end

  # A convenience method that performs click-and-hold at the location of the
  # source element, moves to the location of the target element, then
  # releases the mouse.
  #
  # @example Drag and drop one element onto another
  #
  #   el1 = driver.find_element(id: "some_id1")
  #   el2 = driver.find_element(id: "some_id2")
  #   driver.action.drag_and_drop(el1, el2).perform
  # @param source [Selenium::WebDriver::Element] element to emulate button down at.
  # @param target [Selenium::WebDriver::Element] element to move to and release the
  #   mouse at.
  # @return [ActionBuilder] A self reference.
  def drag_and_drop(source, target); end

  # A convenience method that performs click-and-hold at the location of
  # the source element, moves by a given offset, then releases the mouse.
  #
  # @example Drag and drop an element by offset
  #
  #   el = driver.find_element(id: "some_id1")
  #   driver.action.drag_and_drop_by(el, 100, 100).perform
  # @param source [Selenium::WebDriver::Element] Element to emulate button down at.
  # @param right_by [Integer] horizontal move offset.
  # @param down_by [Integer] vertical move offset.
  # @return [ActionBuilder] A self reference.
  def drag_and_drop_by(source, right_by, down_by); end

  # Performs a modifier key press. Does not release
  # the modifier key - subsequent interactions may assume it's kept pressed.
  # Note that the modifier key is never released implicitly - either
  # #key_up(key) or #send_keys(:null) must be called to release the modifier.
  #
  # Equivalent to:
  #   driver.action.click(element).send_keys(key)
  #   # or
  #   driver.action.click.send_keys(key)
  #
  # @example Press a key
  #
  #   driver.action.key_down(:control).perform
  # @example Press a key on an element
  #
  #   el = driver.find_element(id: "some_id")
  #   driver.action.key_down(el, :shift).perform
  # @overload key_down
  # @overload key_down
  # @raise [ArgumentError] if the given key is not a modifier
  # @return [ActionBuilder] A self reference
  def key_down(*args); end

  # Performs a modifier key release.
  # Releasing a non-depressed modifier key will yield undefined behaviour.
  #
  # @example Release a key
  #
  #   driver.action.key_up(:shift).perform
  # @example Release a key from an element
  #
  #   el = driver.find_element(id: "some_id")
  #   driver.action.key_up(el, :alt).perform
  # @overload key_up
  # @overload key_up
  # @raise [ArgumentError] if the given key is not a modifier
  # @return [ActionBuilder] A self reference
  def key_up(*args); end

  # Moves the mouse from its current position (or 0,0) by the given offset.
  # If the coordinates provided are outside the viewport (the mouse will
  # end up outside the browser window) then the viewport is scrolled to
  # match.
  #
  # @example Move the mouse to a certain offset from its current position
  #
  #   driver.action.move_by(100, 100).perform
  # @param right_by [Integer] horizontal offset. A negative value means moving the
  #   mouse left.
  # @param down_by [Integer] vertical offset. A negative value means moving the mouse
  #   up.
  # @raise [MoveTargetOutOfBoundsError] if the provided offset is outside
  #   the document's boundaries.
  # @return [ActionBuilder] A self reference.
  def move_by(right_by, down_by); end

  # Moves the mouse to the middle of the given element. The element is scrolled into
  # view and its location is calculated using getBoundingClientRect.  Then the
  # mouse is moved to optional offset coordinates from the element.
  #
  # Note that when using offsets, both coordinates need to be passed.
  #
  # @example Scroll element into view and move the mouse to it
  #
  #   el = driver.find_element(id: "some_id")
  #   driver.action.move_to(el).perform
  # @example
  #
  #   el = driver.find_element(id: "some_id")
  #   driver.action.move_to(el, 100, 100).perform
  # @param element [Selenium::WebDriver::Element] to move to.
  # @param right_by [Integer] Optional offset from the top-left corner. A negative value means
  #   coordinates right from the element.
  # @param down_by [Integer] Optional offset from the top-left corner. A negative value means
  #   coordinates above the element.
  # @return [ActionBuilder] A self reference.
  def move_to(element, right_by = T.unsafe(nil), down_by = T.unsafe(nil)); end

  # Executes the actions added to the builder.
  def perform; end

  # Releases the depressed left mouse button at the current mouse location.
  #
  # @example Releasing an element after clicking and holding it
  #
  #   el = driver.find_element(id: "some_id")
  #   driver.action.click_and_hold(el).release.perform
  # @return [ActionBuilder] A self reference.
  def release(element = T.unsafe(nil)); end

  # Sends keys to the active element. This differs from calling
  # Element#send_keys(keys) on the active element in two ways:
  #
  # * The modifier keys included in this call are not released.
  # * There is no attempt to re-focus the element - so send_keys(:tab) for switching elements should work.
  #
  # @example Send the text "help" to an element
  #
  #   el = driver.find_element(id: "some_id")
  #   driver.action.send_keys(el, "help").perform
  # @example Send the text "help" to the currently focused element
  #
  #   driver.action.send_keys("help").perform
  # @overload send_keys
  # @overload send_keys
  # @return [ActionBuilder] A self reference
  def send_keys(*args); end
end

class Selenium::WebDriver::Alert
  # @return [Alert] a new instance of Alert
  def initialize(bridge); end

  def accept; end
  def dismiss; end
  def send_keys(keys); end
  def text; end
end

module Selenium::WebDriver::Atoms
  private

  def execute_atom(function_name, *arguments); end
  def read_atom(function); end
end

# Shared across bridges
#
# @api private
module Selenium::WebDriver::BridgeHelper
  # @api private
  def element_id_from(id); end

  # @api private
  def parse_cookie_string(str); end

  # @api private
  def unwrap_script_result(arg); end
end

module Selenium::WebDriver::Chrome
  class << self
    def driver_path; end
    def driver_path=(path); end
    def path; end
    def path=(path); end
  end
end

module Selenium::WebDriver::Chrome::Bridge
  def available_log_types; end
  def commands(command); end
  def log(type); end
  def network_conditions; end
  def network_conditions=(conditions); end
  def send_command(command_params); end
end

Selenium::WebDriver::Chrome::Bridge::COMMANDS = T.let(T.unsafe(nil), Hash)

# Driver implementation for Chrome.
#
# @api private
class Selenium::WebDriver::Chrome::Driver < ::Selenium::WebDriver::Driver
  include ::Selenium::WebDriver::DriverExtensions::HasNetworkConditions
  include ::Selenium::WebDriver::DriverExtensions::HasTouchScreen
  include ::Selenium::WebDriver::DriverExtensions::HasWebStorage
  include ::Selenium::WebDriver::DriverExtensions::HasLocation
  include ::Selenium::WebDriver::DriverExtensions::TakesScreenshot
  include ::Selenium::WebDriver::DriverExtensions::DownloadsFiles

  # @api private
  # @return [Driver] a new instance of Driver
  def initialize(opts = T.unsafe(nil)); end

  # @api private
  def browser; end

  # @api private
  def execute_cdp(cmd, **params); end

  # @api private
  def quit; end

  private

  # @api private
  def create_capabilities(opts); end
end

class Selenium::WebDriver::Chrome::Options < ::Selenium::WebDriver::Common::Options
  # Create a new Options instance.
  #
  # @example
  #   options = Selenium::WebDriver::Chrome::Options.new(args: ['start-maximized', 'user-data-dir=/tmp/temp_profile'])
  #   driver = Selenium::WebDriver.for(:chrome, options: options)
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @param opts [Hash] the pre-defined options to create the Chrome::Options with
  # @return [Options] a new instance of Options
  def initialize(**opts); end

  # Add a command-line argument to use when starting Chrome.
  #
  # @example Start Chrome maximized
  #   options = Selenium::WebDriver::Chrome::Options.new
  #   options.add_argument('start-maximized')
  # @param arg [String] The command-line argument to add
  def add_argument(arg); end

  # Add an emulation device name
  #
  # @example Start Chrome in mobile emulation mode by device name
  #   options = Selenium::WebDriver::Chrome::Options.new
  #   options.add_emulation(device_name: 'iPhone 6')
  # @example Start Chrome in mobile emulation mode by device metrics
  #   options = Selenium::WebDriver::Chrome::Options.new
  #   options.add_emulation(device_metrics: {width: 400, height: 800, pixelRatio: 1, touch: true})
  # @param device_name [String] Name of the device or a hash containing width, height, pixelRatio, touch
  # @param device_metrics [Hash] Hash containing width, height, pixelRatio, touch
  # @param user_agent [String] Full user agent
  def add_emulation(device_name: T.unsafe(nil), device_metrics: T.unsafe(nil), user_agent: T.unsafe(nil)); end

  # Add an extension by Base64-encoded string.
  #
  # @example
  #   options = Selenium::WebDriver::Chrome::Options.new
  #   options.add_encoded_extension(encoded_string)
  # @param encoded [String] The Base64-encoded string of the .crx file
  def add_encoded_extension(encoded); end

  # Add an extension by local path.
  #
  # @example
  #   options = Selenium::WebDriver::Chrome::Options.new
  #   options.add_extension('/path/to/extension.crx')
  # @param path [String] The local path to the .crx file
  # @raise [Error::WebDriverError]
  def add_extension(path); end

  # Add a new option not yet handled by bindings.
  #
  # @example Leave Chrome open when chromedriver is killed
  #   options = Selenium::WebDriver::Chrome::Options.new
  #   options.add_option(:detach, true)
  # @param name [String, Symbol] Name of the option
  # @param value [Boolean, String, Integer] Value of the option
  def add_option(name, value); end

  # Add a preference that is only applied to the user profile in use.
  #
  # @example Set the default homepage
  #   options = Selenium::WebDriver::Chrome::Options.new
  #   options.add_preference('homepage', 'http://www.seleniumhq.com/')
  # @param name [String] Key of the preference
  # @param value [Boolean, String, Integer] Value of the preference
  def add_preference(name, value); end

  # Returns the value of attribute args.
  def args; end

  # @api private
  def as_json(*_arg0); end

  # Returns the value of attribute binary.
  def binary; end

  # Sets the attribute binary
  #
  # @param value the value to set the attribute binary to.
  def binary=(_arg0); end

  # Returns the value of attribute detach.
  def detach; end

  # Sets the attribute detach
  #
  # @param value the value to set the attribute detach to.
  def detach=(_arg0); end

  # Returns the value of attribute emulation.
  def emulation; end

  # Returns the value of attribute encoded_extensions.
  def encoded_extensions; end

  # Returns the value of attribute extensions.
  def extensions; end

  # Run Chrome in headless mode.
  #
  # @example Enable headless mode
  #   options = Selenium::WebDriver::Chrome::Options.new
  #   options.headless!
  def headless!; end

  # Returns the value of attribute options.
  def options; end

  # Returns the value of attribute prefs.
  def prefs; end

  # Returns the value of attribute profile.
  def profile; end

  # Sets the attribute profile
  #
  # @param value the value to set the attribute profile to.
  def profile=(_arg0); end
end

Selenium::WebDriver::Chrome::Options::KEY = T.let(T.unsafe(nil), String)

# @private
class Selenium::WebDriver::Chrome::Profile
  include ::Selenium::WebDriver::ProfileHelper
  extend ::Selenium::WebDriver::ProfileHelper::ClassMethods

  # @return [Profile] a new instance of Profile
  def initialize(model = T.unsafe(nil)); end

  def [](key); end

  # Set a preference in the profile.
  #
  # See https://src.chromium.org/svn/trunk/src/chrome/common/pref_names.cc
  def []=(key, value); end

  def add_encoded_extension(encoded); end

  # @raise [Error::WebDriverError]
  def add_extension(path); end

  def as_json(*_arg0); end

  # Returns the value of attribute directory.
  def directory; end

  def layout_on_disk; end

  private

  def prefs; end
  def prefs_file_for(dir); end
  def read_model_prefs; end
  def write_prefs_to(dir); end
end

# @api private
class Selenium::WebDriver::Chrome::Service < ::Selenium::WebDriver::Service
  private

  # Note: This processing is deprecated
  #
  # @api private
  def extract_service_args(driver_opts); end

  class << self
    # @api private
    def driver_path=(path); end
  end
end

module Selenium::WebDriver::Common; end

class Selenium::WebDriver::Common::Options
  private

  def camel_case(str); end

  # @raise [TypeError]
  def convert_json_key(key); end

  def generate_as_json(value); end
end

class Selenium::WebDriver::Dimension < ::Struct
  # Returns the value of attribute height
  #
  # @return [Object] the current value of height
  def height; end

  # Sets the attribute height
  #
  # @param value [Object] the value to set the attribute height to.
  # @return [Object] the newly set value
  def height=(_); end

  # Returns the value of attribute width
  #
  # @return [Object] the current value of width
  def width; end

  # Sets the attribute width
  #
  # @param value [Object] the value to set the attribute width to.
  # @return [Object] the newly set value
  def width=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# The main class through which you control the browser.
#
# @see SearchContext
# @see Navigation
# @see TargetLocator
# @see Options
class Selenium::WebDriver::Driver
  include ::Selenium::WebDriver::SearchContext

  # A new Driver instance with the given bridge.
  # End users should use Selenium::WebDriver.for instead of using this directly.
  #
  # @api private
  # @return [Driver] a new instance of Driver
  def initialize(bridge, listener: T.unsafe(nil)); end

  # Get the first element matching the given selector. If given a
  # String or Symbol, it will be used as the id of the element.
  #
  # Examples:
  #
  #   driver['someElementId']    #=> #<WebDriver::Element:0x1011c3b88>
  #   driver[:tag_name => 'div'] #=> #<WebDriver::Element:0x1011c3b88>
  #
  # @param sel [String, Hash] id or selector
  # @return [WebDriver::Element]
  def [](sel); end

  # @return [ActionBuilder, W3CActionBuilder]
  # @see ActionBuilder, W3CActionBuilder
  def action; end

  # driver.all(class: 'bar') #=> [#<WebDriver::Element:0x1011c3b88, ...]
  def all(*args); end

  def browser; end
  def capabilities; end

  # Close the current window, or the browser if no windows are left.
  def close; end

  # Get the URL of the current page
  #
  # @return [String]
  def current_url; end

  # Execute an asynchronous piece of JavaScript in the context of the
  # currently selected frame or window. Unlike executing
  # execute_script (synchronous JavaScript), scripts
  # executed with this method must explicitly signal they are finished by
  # invoking the provided callback. This callback is always injected into the
  # executed function as the last argument.
  #
  # @param script [String] JavaScript source to execute
  # @param args [WebDriver::Element, Integer, Float, Boolean, NilClass, String, Array] Arguments to the script. May be empty.
  # @return [WebDriver::Element, Integer, Float, Boolean, NilClass, String, Array]
  def execute_async_script(script, *args); end

  # Execute the given JavaScript
  #
  # @param script [String] JavaScript source to execute
  # @param args [WebDriver::Element, Integer, Float, Boolean, NilClass, String, Array] Arguments will be available in the given script in the 'arguments' pseudo-array.
  # @return [WebDriver::Element, Integer, Float, Boolean, NilClass, String, Array] The value returned from the script.
  def execute_script(script, *args); end

  # driver.first(id: 'foo')
  def first(*args); end

  # Opens the specified URL in the browser.
  def get(url); end

  def inspect; end
  def keyboard; end

  # @return [Manager]
  # @see Manager
  def manage; end

  def mouse; end

  # @return [Navigation]
  # @see Navigation
  def navigate; end

  # Get the source of the current page
  #
  # @return [String]
  def page_source; end

  # Quit the browser
  def quit; end

  # @api private
  # @see SearchContext
  def ref; end

  # Execute the given JavaScript
  #
  # @param script [String] JavaScript source to execute
  # @param args [WebDriver::Element, Integer, Float, Boolean, NilClass, String, Array] Arguments will be available in the given script in the 'arguments' pseudo-array.
  # @return [WebDriver::Element, Integer, Float, Boolean, NilClass, String, Array] The value returned from the script.
  #
  #   driver.script('function() { ... };')
  def script(script, *args); end

  # @return [TargetLocator]
  # @see TargetLocator
  def switch_to; end

  # Get the title of the current page
  #
  # @return [String]
  def title; end

  # Get the current window handle
  #
  # @return [String]
  def window_handle; end

  # Get the window handles of open browser windows.
  #
  # @return [Array]
  # @see TargetLocator#window
  def window_handles; end

  private

  # Returns the value of attribute bridge.
  def bridge; end

  def service_url(opts); end

  class << self
    # @api private
    # @return [Driver]
    # @see Selenium::WebDriver.for
    def for(browser, opts = T.unsafe(nil)); end
  end
end

# @api private
module Selenium::WebDriver::DriverExtensions; end

module Selenium::WebDriver::DriverExtensions::DownloadsFiles
  # Sets download path for Chromium.
  #
  # @param path [String]
  def download_path=(path); end
end

module Selenium::WebDriver::DriverExtensions::HasAddons
  # Installs addon.
  #
  # @param path [String] Full path to addon file
  # @param temporary [Boolean]
  # @return [String] identifier of installed addon
  def install_addon(path, temporary = T.unsafe(nil)); end

  # Uninstalls addon.
  #
  # @param id [String] Identifier of installed addon
  def uninstall_addon(id); end
end

module Selenium::WebDriver::DriverExtensions::HasDebugger
  # Attaches debugger to session.
  #
  # @example
  #   driver.attach_debugger
  #   driver.execute_script('debugger')
  # @return [Hash]
  def attach_debugger; end
end

module Selenium::WebDriver::DriverExtensions::HasLocation
  def location; end

  # @raise [TypeError]
  def location=(loc); end

  def set_location(lat, lon, alt); end
end

module Selenium::WebDriver::DriverExtensions::HasNetworkConditions
  # Returns network conditions.
  #
  # @return [Hash]
  def network_conditions; end

  # Sets network conditions
  #
  # @option conditions
  # @option conditions
  # @option conditions
  # @param conditions [Hash]
  def network_conditions=(conditions); end
end

module Selenium::WebDriver::DriverExtensions::HasNetworkConnection
  def network_connection_type; end

  # @raise [ArgumentError]
  def network_connection_type=(connection_type); end

  private

  def type_to_values; end

  # @return [Boolean]
  def valid_type?(type); end

  def values_to_type; end
end

module Selenium::WebDriver::DriverExtensions::HasPermissions
  # Returns permissions.
  #
  # @return [Hash]
  def permissions; end

  # Sets permissions.
  #
  # @example
  #   driver.permissions = {'getUserMedia' => true}
  # @param permissions [Hash<Symbol, Boolean>]
  def permissions=(permissions); end
end

module Selenium::WebDriver::DriverExtensions::HasRemoteStatus
  def remote_status; end
end

# @api private
module Selenium::WebDriver::DriverExtensions::HasSessionId
  # @api public
  # @return [String] the session id
  def session_id; end
end

# @api private
module Selenium::WebDriver::DriverExtensions::HasTouchScreen
  # @api private
  def touch; end

  private

  # @api private
  def touch_screen; end
end

# @api private
module Selenium::WebDriver::DriverExtensions::HasWebStorage
  # @api private
  def local_storage; end

  # @api private
  def session_storage; end
end

# @api private
module Selenium::WebDriver::DriverExtensions::Rotatable
  # Get the current screen orientation
  #
  # @api public
  # @return [:landscape, :portrait] orientation
  def orientation; end

  # Change the screen orientation
  #
  # @api public
  # @param orientation [:landscape, :portrait]
  def rotate(orientation); end

  # Change the screen orientation
  #
  # @api public
  # @param orientation [:landscape, :portrait]
  def rotation=(orientation); end
end

# @api private
Selenium::WebDriver::DriverExtensions::Rotatable::ORIENTATIONS = T.let(T.unsafe(nil), Array)

# @api private
module Selenium::WebDriver::DriverExtensions::TakesScreenshot
  # Save a PNG screenshot to the given path
  #
  # @api public
  def save_screenshot(png_path); end

  # Return a PNG screenshot in the given format as a string
  #
  # @api public
  # @param format [:base64, :png]
  # @return String screenshot
  def screenshot_as(format); end
end

# @api private
module Selenium::WebDriver::DriverExtensions::UploadsFiles
  # Set the file detector to pass local files to a remote WebDriver.
  #
  # The detector is an object that responds to #call, and when called
  # will determine if the given string represents a file. If it does,
  # the path to the file on the local file system should be returned,
  # otherwise nil or false.
  #
  # Example:
  #
  #     driver = Selenium::WebDriver.for :remote
  #     driver.file_detector = lambda do |args|
  #        # args => ["/path/to/file"]
  #        str = args.first.to_s
  #        str if File.exist?(str)
  #     end
  #
  #     driver.find_element(:id => "upload").send_keys "/path/to/file"
  #
  # By default, no file detection is performed.
  #
  # @api public
  # @raise [ArgumentError]
  def file_detector=(detector); end
end

module Selenium::WebDriver::Edge
  class << self
    def driver_path; end
    def driver_path=(path); end
  end
end

module Selenium::WebDriver::Edge::Bridge
  def commands(command); end
  def maximize_window(handle = T.unsafe(nil)); end
  def reposition_window(x, y, handle = T.unsafe(nil)); end
  def resize_window(width, height, handle = T.unsafe(nil)); end
  def send_keys_to_active_element(key); end
  def window_handle; end
  def window_position(handle = T.unsafe(nil)); end
  def window_size(handle = T.unsafe(nil)); end
end

# Driver implementation for Microsoft Edge.
#
# @api private
class Selenium::WebDriver::Edge::Driver < ::Selenium::WebDriver::Driver
  include ::Selenium::WebDriver::DriverExtensions::TakesScreenshot

  # @api private
  # @return [Driver] a new instance of Driver
  def initialize(opts = T.unsafe(nil)); end

  # @api private
  def browser; end

  # @api private
  def quit; end
end

class Selenium::WebDriver::Edge::Options
  # Create a new Options instance for Edge.
  #
  # @example
  #   options = Selenium::WebDriver::Edge::Options.new(in_private: true)
  #   driver = Selenium::WebDriver.for :edge, options: options
  # @option opts
  # @option opts
  # @option opts
  # @param opts [Hash] the pre-defined options to create the Edge::Options with
  # @return [Options] a new instance of Options
  # @see https://docs.microsoft.com/en-us/microsoft-edge/webdriver
  def initialize(**opts); end

  # Add an extension by local path.
  #
  # @example
  #   options = Selenium::WebDriver::Edge::Options.new
  #   options.add_extension_path('C:\path\to\extension')
  # @param path [String] The local path to the extension folder
  # @raise [Error::WebDriverError]
  def add_extension_path(path); end

  # @api private
  def as_json(*_arg0); end

  # Returns the value of attribute extension_paths.
  def extension_paths; end

  # Returns the value of attribute in_private.
  def in_private; end

  # Sets the attribute in_private
  #
  # @param value the value to set the attribute in_private to.
  def in_private=(_arg0); end

  # Returns the value of attribute start_page.
  def start_page; end

  # Sets the attribute start_page
  #
  # @param value the value to set the attribute start_page to.
  def start_page=(_arg0); end
end

# @api private
class Selenium::WebDriver::Edge::Service < ::Selenium::WebDriver::Service
  private

  # Note: This processing is deprecated
  #
  # @api private
  def extract_service_args(driver_opts); end
end

class Selenium::WebDriver::Element
  include ::Selenium::WebDriver::SearchContext

  # Creates a new Element
  #
  # @api private
  # @return [Element] a new instance of Element
  def initialize(bridge, id); end

  def ==(other); end

  # Get the value of a the given attribute of the element. Will return the current value, even if
  # this has been modified after the page has been loaded. More exactly, this method will return
  # the value of the given attribute, unless that attribute is not present, in which case the
  # value of the property with the same name is returned. If neither value is set, nil is
  # returned. The "style" attribute is converted as best can be to a text representation with a
  # trailing semi-colon. The following are deemed to be "boolean" attributes, and will
  # return either "true" or "false":
  #
  # async, autofocus, autoplay, checked, compact, complete, controls, declare, defaultchecked,
  # defaultselected, defer, disabled, draggable, ended, formnovalidate, hidden, indeterminate,
  # iscontenteditable, ismap, itemscope, loop, multiple, muted, nohref, noresize, noshade, novalidate,
  # nowrap, open, paused, pubdate, readonly, required, reversed, scoped, seamless, seeking,
  # selected, spellcheck, truespeed, willvalidate
  #
  # Finally, the following commonly mis-capitalized attribute/property names are evaluated as
  # expected:
  #
  # class, readonly
  #
  # @param name [String] attribute name
  # @return [String, nil] attribute value
  #
  #   element['class'] or element[:class] #=> "someclass"
  def [](name); end

  # element.all(class: 'bar')
  def all(*args); end

  # For Rails 3 - http://jonathanjulian.com/2010/04/rails-to_json-or-as_json/
  #
  # @api private
  def as_json(*_arg0); end

  # Get the value of a the given attribute of the element. Will return the current value, even if
  # this has been modified after the page has been loaded. More exactly, this method will return
  # the value of the given attribute, unless that attribute is not present, in which case the
  # value of the property with the same name is returned. If neither value is set, nil is
  # returned. The "style" attribute is converted as best can be to a text representation with a
  # trailing semi-colon. The following are deemed to be "boolean" attributes, and will
  # return either "true" or "false":
  #
  # async, autofocus, autoplay, checked, compact, complete, controls, declare, defaultchecked,
  # defaultselected, defer, disabled, draggable, ended, formnovalidate, hidden, indeterminate,
  # iscontenteditable, ismap, itemscope, loop, multiple, muted, nohref, noresize, noshade, novalidate,
  # nowrap, open, paused, pubdate, readonly, required, reversed, scoped, seamless, seeking,
  # selected, spellcheck, truespeed, willvalidate
  #
  # Finally, the following commonly mis-capitalized attribute/property names are evaluated as
  # expected:
  #
  # class, readonly
  #
  # @param name [String] attribute name
  # @return [String, nil] attribute value
  def attribute(name); end

  # If this element is a text entry element, this will clear the value. Has no effect on other
  # elements. Text entry elements are INPUT and TEXTAREA elements.
  #
  # Note that the events fired by this event may not be as you'd expect.  In particular, we don't
  # fire any keyboard or mouse events.  If you want to ensure keyboard events are
  # fired, consider using #send_keys with the backspace key. To ensure you get a change event,
  # consider following with a call to #send_keys with the tab key.
  def clear; end

  # Click this element. If this causes a new page to load, this method will
  # attempt to block until the page has loaded.  At this point, you should
  # discard all references to this element and any further operations
  # performed on this element will raise a StaleElementReferenceError
  # unless you know that the element and the page will still be present. If
  # click() causes a new page to be loaded via an event or is done by
  # sending a native event then the method will *not* wait for it to be
  # loaded and the caller should verify that a new page has been loaded.
  #
  # There are some preconditions for an element to be clicked.  The element
  # must be visible and it must have a height and width greater then 0.
  #
  # Equivalent to:
  #   driver.action.click(element)
  #
  # @example Click on a button
  #
  #   driver.find_element(tag_name: "button").click
  # @raise [StaleElementReferenceError] if the element no longer exists as
  #   defined
  def click; end

  # Get the value of the given CSS property
  #
  # Note that shorthand CSS properties (e.g. background, font, border, border-top, margin,
  # margin-top, padding, padding-top, list-style, outline, pause, cue) are not returned,
  # in accordance with the DOM CSS2 specification - you should directly access the longhand
  # properties (e.g. background-color) to access the desired values.
  #
  # @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration
  def css_value(prop); end

  # Is the element displayed?
  #
  # @return [Boolean]
  def displayed?; end

  # Is the element enabled?
  #
  # @return [Boolean]
  def enabled?; end

  def eql?(other); end

  # element.first(id: 'foo')
  def first(*args); end

  def hash; end
  def inspect; end

  # Get the location of this element.
  #
  # @return [WebDriver::Point]
  def location; end

  # Determine an element's location on the screen once it has been scrolled into view.
  #
  # @return [WebDriver::Point]
  def location_once_scrolled_into_view; end

  # Get the value of a the given property with the same name of the element. If the value is not
  # set, nil is returned.
  #
  # @param name [String] property name
  # @return [String, nil] property value
  def property(name); end

  # Get the dimensions and coordinates of this element.
  #
  # @return [WebDriver::Rectangle]
  def rect; end

  # for SearchContext and execute_script
  #
  # @api private
  def ref; end

  # Is the element selected?
  #
  # @return [Boolean]
  def selected?; end

  # Send keystrokes to this element
  #
  # Examples:
  #
  #     element.send_keys "foo"                     #=> value: 'foo'
  #     element.send_keys "tet", :arrow_left, "s"   #=> value: 'test'
  #     element.send_keys [:control, 'a'], :space   #=> value: ' '
  #
  # @param args [String, Symbol, Array] keystrokes to send
  # @see Keys::KEYS
  def send_key(*args); end

  # Send keystrokes to this element
  #
  # Examples:
  #
  #     element.send_keys "foo"                     #=> value: 'foo'
  #     element.send_keys "tet", :arrow_left, "s"   #=> value: 'test'
  #     element.send_keys [:control, 'a'], :space   #=> value: ' '
  #
  # @param args [String, Symbol, Array] keystrokes to send
  # @see Keys::KEYS
  def send_keys(*args); end

  # Get the size of this element
  #
  # @return [WebDriver::Dimension]
  def size; end

  # Get the value of the given CSS property
  #
  # Note that shorthand CSS properties (e.g. background, font, border, border-top, margin,
  # margin-top, padding, padding-top, list-style, outline, pause, cue) are not returned,
  # in accordance with the DOM CSS2 specification - you should directly access the longhand
  # properties (e.g. background-color) to access the desired values.
  #
  # @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration
  def style(prop); end

  # Submit this element
  def submit; end

  # Get the tag name of the element.
  #
  # @example Get the tagname of an INPUT element(returns "input")
  #
  #   driver.find_element(xpath: "//input").tag_name
  # @return [String] The tag name of this element.
  def tag_name; end

  # Get the text content of this element
  #
  # @return [String]
  def text; end

  # Convert to a WebElement JSON Object for transmission over the wire.
  #
  # @api private
  # @see https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#basic-terms-and-concepts
  def to_json(*_arg0); end

  private

  # Returns the value of attribute bridge.
  def bridge; end

  # @return [Boolean]
  def selectable?; end
end

module Selenium::WebDriver::Error
  class << self
    def const_missing(const_name); end

    # Returns exception from code (Integer - OSS, String - W3C).
    #
    # @param code [Integer, String, nil]
    def for_code(code); end
  end
end

Selenium::WebDriver::Error::DEPRECATED_ERRORS = T.let(T.unsafe(nil), Hash)

# @api private
Selenium::WebDriver::Error::ERRORS = T.let(T.unsafe(nil), Hash)

# The Element Click command could not be completed because the element receiving the events
# is obscuring the element that was requested clicked.
class Selenium::WebDriver::Error::ElementClickInterceptedError < ::Selenium::WebDriver::Error::WebDriverError; end

Selenium::WebDriver::Error::ElementNotDisplayedError = Selenium::WebDriver::Error::ElementNotInteractableError

# A command could not be completed because the element is not pointer or keyboard
# interactable.
class Selenium::WebDriver::Error::ElementNotInteractableError < ::Selenium::WebDriver::Error::WebDriverError; end

# An attempt was made to select an element that cannot be selected.
Selenium::WebDriver::Error::ElementNotSelectableError = Selenium::WebDriver::Error::ElementNotInteractableError

# Raised to indicate that although an element is present on the DOM, it is not visible, and
# so is not able to be interacted with.
Selenium::WebDriver::Error::ElementNotVisibleError = Selenium::WebDriver::Error::ElementNotInteractableError

# 13
Selenium::WebDriver::Error::ExpectedError = Selenium::WebDriver::Error::WebDriverError

# Indicates that activating an IME engine has failed.
Selenium::WebDriver::Error::IMEEngineActivationFailedError = Selenium::WebDriver::Error::WebDriverError

# Indicates that IME support is not available. This exception is rasied for every IME-related
# method call if IME support is not available on the machine.
Selenium::WebDriver::Error::IMENotAvailableError = Selenium::WebDriver::Error::WebDriverError

# 1
Selenium::WebDriver::Error::IndexOutOfBoundsError = Selenium::WebDriver::Error::WebDriverError

# A command could not be completed because TLS certificate is expired
# or invalid.
class Selenium::WebDriver::Error::InsecureCertificateError < ::Selenium::WebDriver::Error::WebDriverError; end

# The arguments passed to a command are either invalid or malformed.
class Selenium::WebDriver::Error::InvalidArgumentError < ::Selenium::WebDriver::Error::WebDriverError; end

# An illegal attempt was made to set a cookie under a different domain than the current page.
class Selenium::WebDriver::Error::InvalidCookieDomainError < ::Selenium::WebDriver::Error::WebDriverError; end

# The coordinates provided to an interactions operation are invalid.
Selenium::WebDriver::Error::InvalidElementCoordinatesError = Selenium::WebDriver::Error::WebDriverError

# The target element is in an invalid state, rendering it impossible to interact with, for
# example if you click a disabled element.
Selenium::WebDriver::Error::InvalidElementStateError = Selenium::WebDriver::Error::ElementNotInteractableError

# Argument was an invalid selector.
class Selenium::WebDriver::Error::InvalidSelectorError < ::Selenium::WebDriver::Error::WebDriverError; end

# Occurs if the given session id is not in the list of active sessions, meaning the session
# either does not exist or that it's not active.
class Selenium::WebDriver::Error::InvalidSessionIdError < ::Selenium::WebDriver::Error::WebDriverError; end

# Indicates that the XPath selector is invalid
Selenium::WebDriver::Error::InvalidXpathSelectorError = Selenium::WebDriver::Error::InvalidSelectorError

Selenium::WebDriver::Error::InvalidXpathSelectorReturnTyperError = Selenium::WebDriver::Error::InvalidSelectorError

# An error occurred while executing JavaScript supplied by the user.
class Selenium::WebDriver::Error::JavascriptError < ::Selenium::WebDriver::Error::WebDriverError; end

# The target for mouse interaction is not in the browser's viewport and cannot be brought
# into that viewport.
class Selenium::WebDriver::Error::MoveTargetOutOfBoundsError < ::Selenium::WebDriver::Error::WebDriverError; end

Selenium::WebDriver::Error::NoAlertOpenError = Selenium::WebDriver::Error::NoSuchAlertError

# 27
Selenium::WebDriver::Error::NoAlertPresentError = Selenium::WebDriver::Error::NoSuchAlertError

# 2
Selenium::WebDriver::Error::NoCollectionError = Selenium::WebDriver::Error::WebDriverError

# 17
Selenium::WebDriver::Error::NoScriptResultError = Selenium::WebDriver::Error::WebDriverError

# 3
Selenium::WebDriver::Error::NoStringError = Selenium::WebDriver::Error::WebDriverError

# 4
Selenium::WebDriver::Error::NoStringLengthError = Selenium::WebDriver::Error::WebDriverError

# 5
Selenium::WebDriver::Error::NoStringWrapperError = Selenium::WebDriver::Error::WebDriverError

# An attempt was made to operate on a modal dialog when one was not open:
#
#   * W3C dialect is NoSuchAlertError
#   * OSS dialect is NoAlertPresentError
#
# We want to allow clients to rescue NoSuchAlertError as a superclass for
# dialect-agnostic implementation, so NoAlertPresentError should inherit from it.
class Selenium::WebDriver::Error::NoSuchAlertError < ::Selenium::WebDriver::Error::WebDriverError; end

# 19
Selenium::WebDriver::Error::NoSuchCollectionError = Selenium::WebDriver::Error::WebDriverError

# No cookie matching the given path name was found amongst the associated cookies of the
# current browsing context's active document.
class Selenium::WebDriver::Error::NoSuchCookieError < ::Selenium::WebDriver::Error::WebDriverError; end

# 15
Selenium::WebDriver::Error::NoSuchDocumentError = Selenium::WebDriver::Error::WebDriverError

# 6
Selenium::WebDriver::Error::NoSuchDriverError = Selenium::WebDriver::Error::WebDriverError

# An element could not be located on the page using the given search parameters.
class Selenium::WebDriver::Error::NoSuchElementError < ::Selenium::WebDriver::Error::WebDriverError; end

# A command to switch to a frame could not be satisfied because the frame could not be found.
class Selenium::WebDriver::Error::NoSuchFrameError < ::Selenium::WebDriver::Error::WebDriverError; end

# 22
class Selenium::WebDriver::Error::NoSuchWindowError < ::Selenium::WebDriver::Error::WebDriverError; end

# 21
class Selenium::WebDriver::Error::NullPointerError < ::Selenium::WebDriver::Error::WebDriverError; end

# Aliases for backwards compatibility.
Selenium::WebDriver::Error::ObsoleteElementError = Selenium::WebDriver::Error::StaleElementReferenceError

# A script did not complete before its timeout expired.
Selenium::WebDriver::Error::ScriptTimeOutError = Selenium::WebDriver::Error::ScriptTimeoutError

# Aliases for OSS dialect.
class Selenium::WebDriver::Error::ScriptTimeoutError < ::Selenium::WebDriver::Error::WebDriverError; end

class Selenium::WebDriver::Error::ServerError < ::StandardError
  # @return [ServerError] a new instance of ServerError
  def initialize(response); end
end

# A new session could not be created.
class Selenium::WebDriver::Error::SessionNotCreatedError < ::Selenium::WebDriver::Error::WebDriverError; end

# A command failed because the referenced element is no longer attached to the DOM.
class Selenium::WebDriver::Error::StaleElementReferenceError < ::Selenium::WebDriver::Error::WebDriverError; end

# An operation did not complete before its timeout expired.
Selenium::WebDriver::Error::TimeOutError = Selenium::WebDriver::Error::TimeoutError

class Selenium::WebDriver::Error::TimeoutError < ::Selenium::WebDriver::Error::WebDriverError; end

# A screen capture was made impossible.
class Selenium::WebDriver::Error::UnableToCaptureScreenError < ::Selenium::WebDriver::Error::WebDriverError; end

# A command to set a cookie's value could not be satisfied.
class Selenium::WebDriver::Error::UnableToSetCookieError < ::Selenium::WebDriver::Error::WebDriverError; end

# A modal dialog was open, blocking this operation.
class Selenium::WebDriver::Error::UnexpectedAlertOpenError < ::Selenium::WebDriver::Error::WebDriverError; end

Selenium::WebDriver::Error::UnexpectedJavascriptError = Selenium::WebDriver::Error::JavascriptError

# Raised when an alert dialog is present that has not been dealt with.
Selenium::WebDriver::Error::UnhandledAlertError = Selenium::WebDriver::Error::UnexpectedAlertOpenError

Selenium::WebDriver::Error::UnhandledError = Selenium::WebDriver::Error::UnknownError

# A command could not be executed because the remote end is not aware of it.
class Selenium::WebDriver::Error::UnknownCommandError < ::Selenium::WebDriver::Error::WebDriverError; end

# An unknown error occurred in the remote end while processing the command.
class Selenium::WebDriver::Error::UnknownError < ::Selenium::WebDriver::Error::WebDriverError; end

# The requested command matched a known URL but did not match an method for that URL.
class Selenium::WebDriver::Error::UnknownMethodError < ::Selenium::WebDriver::Error::WebDriverError; end

# Indicates that a command that should have executed properly cannot be supported for some
# reason.
class Selenium::WebDriver::Error::UnsupportedOperationError < ::Selenium::WebDriver::Error::WebDriverError; end

class Selenium::WebDriver::Error::WebDriverError < ::StandardError; end

# An error occurred while searching for an element by XPath.
Selenium::WebDriver::Error::XPathLookupError = Selenium::WebDriver::Error::InvalidSelectorError

# @api private
module Selenium::WebDriver::FileReaper
  class << self
    # @api private
    def <<(file); end

    # @api private
    # @raise [Error::WebDriverError]
    def reap(file); end

    # @api private
    def reap!; end

    # @api private
    def reap=(_arg0); end

    # @api private
    # @return [Boolean]
    def reap?; end

    # @api private
    def tmp_files; end
  end
end

module Selenium::WebDriver::Firefox
  class << self
    def driver_path; end
    def driver_path=(path); end
    def path=(path); end
  end
end

# @api private
class Selenium::WebDriver::Firefox::Binary
  # @api private
  def quit; end

  # @api private
  def start_with(profile, profile_path, *args); end

  # @api private
  def wait; end

  private

  # @api private
  def execute(*extra_args); end

  # @api private
  def modify_link_library_path(profile_path); end

  class << self
    # @api private
    def path; end

    # @api private
    # @see Firefox.path=
    def path=(path); end

    # @api private
    def reset_path!; end

    # @api private
    def version; end

    private

    # @api private
    def macosx_path; end

    # @api private
    def windows_path; end

    # @api private
    def windows_registry_path; end
  end
end

# @api private
Selenium::WebDriver::Firefox::Binary::NO_FOCUS_LIBRARIES = T.let(T.unsafe(nil), Array)

# @api private
Selenium::WebDriver::Firefox::Binary::NO_FOCUS_LIBRARY_NAME = T.let(T.unsafe(nil), String)

# @api private
Selenium::WebDriver::Firefox::Binary::QUIT_TIMEOUT = T.let(T.unsafe(nil), Integer)

# @api private
Selenium::WebDriver::Firefox::Binary::WAIT_TIMEOUT = T.let(T.unsafe(nil), Integer)

Selenium::WebDriver::Firefox::DEFAULT_ASSUME_UNTRUSTED_ISSUER = T.let(T.unsafe(nil), TrueClass)
Selenium::WebDriver::Firefox::DEFAULT_PORT = T.let(T.unsafe(nil), Integer)

module Selenium::WebDriver::Firefox::Driver
  class << self
    # Instantiates correct Firefox driver implementation
    #
    # @return [Marionette::Driver, Legacy::Driver]
    def new(**opts); end

    private

    # @return [Boolean]
    def marionette?(opts); end
  end
end

# @api private
class Selenium::WebDriver::Firefox::Extension
  # @api private
  # @raise [Error::WebDriverError]
  # @return [Extension] a new instance of Extension
  def initialize(path); end

  # @api private
  def write_to(extensions_dir); end

  private

  # @api private
  def create_root; end

  # @api private
  def read_id(directory); end

  # @api private
  # @raise [Error::WebDriverError]
  def read_id_from_install_rdf(directory); end

  # @api private
  def read_id_from_manifest_json(directory); end
end

# @api private
Selenium::WebDriver::Firefox::Extension::NAMESPACE = T.let(T.unsafe(nil), String)

# @api private
class Selenium::WebDriver::Firefox::Launcher
  # @api private
  # @raise [Error::WebDriverError]
  # @return [Launcher] a new instance of Launcher
  def initialize(binary, port, profile = T.unsafe(nil)); end

  # @api private
  # @raise [Error::WebDriverError]
  def assert_profile; end

  # @api private
  # @raise [Error::WebDriverError]
  def connect_until_stable; end

  # @api private
  def create_profile; end

  # @api private
  def fetch_profile; end

  # @api private
  def find_free_port; end

  # @api private
  def launch; end

  # @api private
  def quit; end

  # @api private
  def socket_lock; end

  # @api private
  def start; end

  # @api private
  def url; end
end

# @api private
Selenium::WebDriver::Firefox::Launcher::SOCKET_LOCK_TIMEOUT = T.let(T.unsafe(nil), Integer)

# @api private
Selenium::WebDriver::Firefox::Launcher::STABLE_CONNECTION_TIMEOUT = T.let(T.unsafe(nil), Integer)

module Selenium::WebDriver::Firefox::Legacy; end

# Driver implementation for Firefox using legacy extension.
#
# @api private
class Selenium::WebDriver::Firefox::Legacy::Driver < ::Selenium::WebDriver::Driver
  include ::Selenium::WebDriver::DriverExtensions::TakesScreenshot

  # @api private
  # @return [Driver] a new instance of Driver
  def initialize(opts = T.unsafe(nil)); end

  # @api private
  def browser; end

  # @api private
  def quit; end
end

module Selenium::WebDriver::Firefox::Marionette; end

module Selenium::WebDriver::Firefox::Marionette::Bridge
  def commands(command); end
  def install_addon(path, temporary); end
  def uninstall_addon(id); end
end

Selenium::WebDriver::Firefox::Marionette::Bridge::COMMANDS = T.let(T.unsafe(nil), Hash)

# Driver implementation for Firefox using GeckoDriver.
#
# @api private
class Selenium::WebDriver::Firefox::Marionette::Driver < ::Selenium::WebDriver::Driver
  include ::Selenium::WebDriver::DriverExtensions::HasAddons
  include ::Selenium::WebDriver::DriverExtensions::HasWebStorage
  include ::Selenium::WebDriver::DriverExtensions::TakesScreenshot

  # @api private
  # @return [Driver] a new instance of Driver
  def initialize(opts = T.unsafe(nil)); end

  # @api private
  def browser; end

  # @api private
  def quit; end

  private

  # @api private
  def create_capabilities(opts); end
end

class Selenium::WebDriver::Firefox::Options < ::Selenium::WebDriver::Common::Options
  # Create a new Options instance, only for W3C-capable versions of Firefox.
  #
  # @example
  #   options = Selenium::WebDriver::Firefox::Options.new(args: ['--host=127.0.0.1'])
  #   driver = Selenium::WebDriver.for :firefox, options: options
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @param opts [Hash] the pre-defined options to create the Firefox::Options with
  # @return [Options] a new instance of Options
  def initialize(**opts); end

  # Add a command-line argument to use when starting Firefox.
  #
  # @example Start geckodriver on a specific host
  #   options = Selenium::WebDriver::Firefox::Options.new
  #   options.add_argument('--host=127.0.0.1')
  # @param arg [String] The command-line argument to add
  def add_argument(arg); end

  # Add a new option not yet handled by these bindings.
  #
  # @example
  #   options = Selenium::WebDriver::Firefox::Options.new
  #   options.add_option(:foo, 'bar')
  # @param name [String, Symbol] Name of the option
  # @param value [Boolean, String, Integer] Value of the option
  def add_option(name, value); end

  # Add a preference that is only applied to the user profile in use.
  #
  # @example Set the default homepage
  #   options = Selenium::WebDriver::Firefox::Options.new
  #   options.add_preference('browser.startup.homepage', 'http://www.seleniumhq.com/')
  # @param name [String] Key of the preference
  # @param value [Boolean, String, Integer] Value of the preference
  def add_preference(name, value); end

  # Returns the value of attribute args.
  def args; end

  # @api private
  def as_json(*_arg0); end

  # Returns the value of attribute binary.
  def binary; end

  # Sets the attribute binary
  #
  # @param value the value to set the attribute binary to.
  def binary=(_arg0); end

  # Run Firefox in headless mode.
  #
  # @example Enable headless mode
  #   options = Selenium::WebDriver::Firefox::Options.new
  #   options.headless!
  def headless!; end

  # Returns the value of attribute log_level.
  def log_level; end

  # Sets the attribute log_level
  #
  # @param value the value to set the attribute log_level to.
  def log_level=(_arg0); end

  # Returns the value of attribute options.
  def options; end

  # Returns the value of attribute prefs.
  def prefs; end

  # Returns the value of attribute profile.
  def profile; end

  # Sets Firefox profile.
  #
  # @example Set the custom profile
  #   profile = Selenium::WebDriver::Firefox::Profile.new
  #   options = Selenium::WebDriver::Firefox::Options.new
  #   options.profile = profile
  # @example Use existing profile
  #   options = Selenium::WebDriver::Firefox::Options.new
  #   options.profile = 'myprofile'
  # @param profile [Profile, String] Profile to be used
  def profile=(profile); end

  private

  def process_profile(profile); end
end

Selenium::WebDriver::Firefox::Options::KEY = T.let(T.unsafe(nil), String)

class Selenium::WebDriver::Firefox::Profile
  include ::Selenium::WebDriver::ProfileHelper
  extend ::Selenium::WebDriver::ProfileHelper::ClassMethods

  # Create a new Profile instance
  #
  # @example User configured profile
  #
  #   profile = Selenium::WebDriver::Firefox::Profile.new
  #   profile['network.proxy.http'] = 'localhost'
  #   profile['network.proxy.http_port'] = 9090
  #
  #   driver = Selenium::WebDriver.for :firefox, :profile => profile
  # @return [Profile] a new instance of Profile
  def initialize(model = T.unsafe(nil)); end

  # Set a preference for this particular profile.
  #
  # @see http://kb.mozillazine.org/About:config_entries
  # @see http://preferential.mozdev.org/preferences.html
  def []=(key, value); end

  # Add the extension (directory, .zip or .xpi) at the given path to the profile.
  def add_extension(path, name = T.unsafe(nil)); end

  def add_webdriver_extension; end
  def assume_untrusted_certificate_issuer=(bool); end

  # @return [Boolean]
  def assume_untrusted_certificate_issuer?; end

  def encoded; end
  def layout_on_disk; end

  # Sets the attribute load_no_focus_lib
  #
  # @param value the value to set the attribute load_no_focus_lib to.
  def load_no_focus_lib=(_arg0); end

  # @return [Boolean]
  def load_no_focus_lib?; end

  # Returns the value of attribute log_file.
  def log_file; end

  def log_file=(file); end

  # Returns the value of attribute name.
  def name; end

  # Sets the attribute native_events
  #
  # @param value the value to set the attribute native_events to.
  def native_events=(_arg0); end

  # @return [Boolean]
  def native_events?; end

  def port=(port); end

  # @raise [TypeError]
  def proxy=(proxy); end

  # Sets the attribute secure_ssl
  #
  # @param value the value to set the attribute secure_ssl to.
  def secure_ssl=(_arg0); end

  # @return [Boolean]
  def secure_ssl?; end

  private

  def delete_extensions_cache(directory); end
  def delete_lock_files(directory); end
  def extension_name_for(path); end
  def install_extensions(directory); end
  def read_model_prefs; end
  def read_user_prefs(path); end
  def set_manual_proxy_preference(key, value); end
  def update_user_prefs_in(directory); end
  def write_prefs(prefs, path); end

  class << self
    def default_preferences; end

    # @raise [Error::WebDriverError]
    def from_name(name); end

    def ini; end
  end
end

Selenium::WebDriver::Firefox::Profile::VALID_PREFERENCE_TYPES = T.let(T.unsafe(nil), Array)
Selenium::WebDriver::Firefox::Profile::WEBDRIVER_EXTENSION_PATH = T.let(T.unsafe(nil), String)
Selenium::WebDriver::Firefox::Profile::WEBDRIVER_PREFS = T.let(T.unsafe(nil), Hash)

# @api private
class Selenium::WebDriver::Firefox::ProfilesIni
  # @api private
  # @return [ProfilesIni] a new instance of ProfilesIni
  def initialize; end

  # @api private
  def [](name); end

  # @api private
  def refresh; end

  private

  # @api private
  def parse; end

  # @api private
  def path_for(name, is_relative, path); end
end

# @api private
class Selenium::WebDriver::Firefox::Service < ::Selenium::WebDriver::Service
  private

  # Note: This processing is deprecated
  #
  # @api private
  def extract_service_args(driver_opts); end
end

# @api private
module Selenium::WebDriver::Firefox::Util
  private

  # @api private
  def app_data_path; end

  # @api private
  def stringified?(str); end

  class << self
    # @api private
    def app_data_path; end

    # @api private
    # @return [Boolean]
    def stringified?(str); end
  end
end

module Selenium::WebDriver::HTML5; end

class Selenium::WebDriver::HTML5::LocalStorage
  include ::Enumerable
  include ::Selenium::WebDriver::HTML5::SharedWebStorage

  # @api private
  # @return [LocalStorage] a new instance of LocalStorage
  def initialize(bridge); end

  def [](key); end
  def []=(key, value); end
  def clear; end
  def delete(key); end
  def keys; end
  def size; end
end

class Selenium::WebDriver::HTML5::SessionStorage
  include ::Enumerable
  include ::Selenium::WebDriver::HTML5::SharedWebStorage

  # @api private
  # @return [SessionStorage] a new instance of SessionStorage
  def initialize(bridge); end

  def [](key); end
  def []=(key, value); end
  def clear; end
  def delete(key); end
  def keys; end
  def size; end
end

module Selenium::WebDriver::HTML5::SharedWebStorage
  include ::Enumerable

  def each; end

  # @return [Boolean]
  def empty?; end

  # @raise [KeyError]
  def fetch(key); end

  # @return [Boolean]
  def has_key?(key); end

  # @return [Boolean]
  def key?(key); end

  # @return [Boolean]
  def member?(key); end
end

module Selenium::WebDriver::IE
  class << self
    def driver_path; end
    def driver_path=(path); end
  end
end

# Driver implementation for Internet Explorer supporting
# both OSS and W3C dialects of JSON wire protocol.
#
# @api private
class Selenium::WebDriver::IE::Driver < ::Selenium::WebDriver::Driver
  include ::Selenium::WebDriver::DriverExtensions::HasWebStorage
  include ::Selenium::WebDriver::DriverExtensions::TakesScreenshot

  # @api private
  # @return [Driver] a new instance of Driver
  def initialize(opts = T.unsafe(nil)); end

  # @api private
  def browser; end

  # @api private
  def quit; end

  private

  # @api private
  def create_capabilities(opts); end
end

class Selenium::WebDriver::IE::Options < ::Selenium::WebDriver::Common::Options
  # Create a new Options instance
  #
  # @example
  #   options = Selenium::WebDriver::IE::Options.new(args: ['--host=127.0.0.1'])
  #   driver = Selenium::WebDriver.for(:ie, options: options)
  # @example
  #   options = Selenium::WebDriver::IE::Options.new
  #   options.element_scroll_behavior = Selenium::WebDriver::IE::Options::SCROLL_BOTTOM
  #   driver = Selenium::WebDriver.for(:ie, options: options)
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @param opts [Hash] the pre-defined options
  # @return [Options] a new instance of Options
  def initialize(**opts); end

  # Add a command-line argument to use when starting Internet Explorer.
  #
  # @param arg [String] The command-line argument to add
  def add_argument(arg); end

  # Add a new option not yet handled by these bindings.
  #
  # @example
  #   options = Selenium::WebDriver::IE::Options.new
  #   options.add_option(:foo, 'bar')
  # @param name [String, Symbol] Name of the option
  # @param value [Boolean, String, Integer] Value of the option
  def add_option(name, value); end

  # Returns the value of attribute args.
  def args; end

  # @api private
  def as_json(*_arg0); end

  def browser_attach_timeout; end
  def browser_attach_timeout=(value); end
  def element_scroll_behavior; end
  def element_scroll_behavior=(value); end
  def ensure_clean_session; end
  def ensure_clean_session=(value); end
  def file_upload_dialog_timeout; end
  def file_upload_dialog_timeout=(value); end
  def force_create_process_api; end
  def force_create_process_api=(value); end
  def force_shell_windows_api; end
  def force_shell_windows_api=(value); end
  def full_page_screenshot; end
  def full_page_screenshot=(value); end
  def ignore_protected_mode_settings; end
  def ignore_protected_mode_settings=(value); end
  def ignore_zoom_level; end
  def ignore_zoom_level=(value); end
  def initial_browser_url; end
  def initial_browser_url=(value); end
  def native_events; end
  def native_events=(value); end

  # Returns the value of attribute options.
  def options; end

  def persistent_hover; end
  def persistent_hover=(value); end
  def require_window_focus; end
  def require_window_focus=(value); end
  def use_per_process_proxy; end
  def use_per_process_proxy=(value); end
  def validate_cookie_document_type; end
  def validate_cookie_document_type=(value); end
end

Selenium::WebDriver::IE::Options::CAPABILITIES = T.let(T.unsafe(nil), Hash)
Selenium::WebDriver::IE::Options::KEY = T.let(T.unsafe(nil), String)
Selenium::WebDriver::IE::Options::SCROLL_BOTTOM = T.let(T.unsafe(nil), Integer)
Selenium::WebDriver::IE::Options::SCROLL_TOP = T.let(T.unsafe(nil), Integer)

# @api private
class Selenium::WebDriver::IE::Service < ::Selenium::WebDriver::Service
  private

  # Note: This processing is deprecated
  #
  # @api private
  def extract_service_args(driver_opts); end
end

module Selenium::WebDriver::Interactions
  class << self
    def key(name); end
    def none(name = T.unsafe(nil)); end
    def pointer(kind, **kwargs); end
  end
end

class Selenium::WebDriver::Interactions::InputDevice
  # @return [InputDevice] a new instance of InputDevice
  def initialize(name = T.unsafe(nil)); end

  # Returns the value of attribute actions.
  def actions; end

  # @raise [TypeError]
  def add_action(action); end

  def clear_actions; end
  def create_pause(duration = T.unsafe(nil)); end

  # Returns the value of attribute name.
  def name; end

  # Determine if only pauses are present
  #
  # @return [Boolean]
  def no_actions?; end
end

class Selenium::WebDriver::Interactions::Interaction
  # @raise [TypeError]
  # @return [Interaction] a new instance of Interaction
  def initialize(source); end

  # Returns the value of attribute source.
  def source; end
end

Selenium::WebDriver::Interactions::Interaction::PAUSE = T.let(T.unsafe(nil), Symbol)
Selenium::WebDriver::Interactions::KEY = T.let(T.unsafe(nil), Symbol)

class Selenium::WebDriver::Interactions::KeyInput < ::Selenium::WebDriver::Interactions::InputDevice
  def create_key_down(key); end
  def create_key_up(key); end
  def encode; end
  def type; end
end

Selenium::WebDriver::Interactions::KeyInput::SUBTYPES = T.let(T.unsafe(nil), Hash)

class Selenium::WebDriver::Interactions::KeyInput::TypingInteraction < ::Selenium::WebDriver::Interactions::Interaction
  # @return [TypingInteraction] a new instance of TypingInteraction
  def initialize(source, type, key); end

  # @raise [TypeError]
  def assert_type(type); end

  def encode; end

  # Returns the value of attribute type.
  def type; end
end

Selenium::WebDriver::Interactions::NONE = T.let(T.unsafe(nil), Symbol)

class Selenium::WebDriver::Interactions::NoneInput < ::Selenium::WebDriver::Interactions::InputDevice
  def encode; end
  def type; end
end

Selenium::WebDriver::Interactions::POINTER = T.let(T.unsafe(nil), Symbol)

class Selenium::WebDriver::Interactions::Pause < ::Selenium::WebDriver::Interactions::Interaction
  # @return [Pause] a new instance of Pause
  def initialize(source, duration = T.unsafe(nil)); end

  def encode; end
  def type; end
end

# Move
class Selenium::WebDriver::Interactions::PointerCancel < ::Selenium::WebDriver::Interactions::Interaction
  def encode; end
  def type; end
end

class Selenium::WebDriver::Interactions::PointerInput < ::Selenium::WebDriver::Interactions::InputDevice
  # @return [PointerInput] a new instance of PointerInput
  def initialize(kind, name: T.unsafe(nil)); end

  # @raise [TypeError]
  def assert_kind(pointer); end

  def create_pointer_cancel; end
  def create_pointer_down(button); end
  def create_pointer_move(duration: T.unsafe(nil), x: T.unsafe(nil), y: T.unsafe(nil), element: T.unsafe(nil), origin: T.unsafe(nil)); end
  def create_pointer_up(button); end
  def encode; end

  # Returns the value of attribute kind.
  def kind; end

  def type; end
end

Selenium::WebDriver::Interactions::PointerInput::KIND = T.let(T.unsafe(nil), Hash)

# PointerPress
class Selenium::WebDriver::Interactions::PointerMove < ::Selenium::WebDriver::Interactions::Interaction
  # @return [PointerMove] a new instance of PointerMove
  def initialize(source, duration, x, y, element: T.unsafe(nil), origin: T.unsafe(nil)); end

  def encode; end
  def type; end
end

Selenium::WebDriver::Interactions::PointerMove::ORIGINS = T.let(T.unsafe(nil), Array)
Selenium::WebDriver::Interactions::PointerMove::POINTER = T.let(T.unsafe(nil), Symbol)
Selenium::WebDriver::Interactions::PointerMove::VIEWPORT = T.let(T.unsafe(nil), Symbol)

# PointerInput
class Selenium::WebDriver::Interactions::PointerPress < ::Selenium::WebDriver::Interactions::Interaction
  # @return [PointerPress] a new instance of PointerPress
  def initialize(source, direction, button); end

  # @raise [ArgumentError]
  def assert_button(button); end

  # @raise [TypeError]
  def assert_direction(direction); end

  def encode; end
  def type; end
end

Selenium::WebDriver::Interactions::PointerPress::BUTTONS = T.let(T.unsafe(nil), Hash)
Selenium::WebDriver::Interactions::PointerPress::DIRECTIONS = T.let(T.unsafe(nil), Hash)
Selenium::WebDriver::Interactions::SOURCE_TYPES = T.let(T.unsafe(nil), Array)

module Selenium::WebDriver::KeyActions
  # Performs a key press. Does not release the key - subsequent interactions may assume it's kept pressed.
  # Note that the key is never released implicitly - either W3CActionBuilder#key_up(key) or W3CActionBuilder#release_actions
  # must be called to release the key.
  #
  # @example Press a key
  #
  #   driver.action.key_down(:control).perform
  # @example Press a key on an element
  #
  #   el = driver.find_element(id: "some_id")
  #   driver.action.key_down(el, :shift).perform
  # @overload key_down
  # @overload key_down
  # @return [W3CActionBuilder] A self reference
  def key_down(*args, device: T.unsafe(nil)); end

  # Performs a key release.
  # Releasing a non-depressed key will yield undefined behaviour.
  #
  # @example Release a key
  #
  #   driver.action.key_up(:shift).perform
  # @example Release a key from an element
  #
  #   el = driver.find_element(id: "some_id")
  #   driver.action.key_up(el, :alt).perform
  # @overload key_up
  # @overload key_up
  # @return [W3CActionBuilder] A self reference
  def key_up(*args, device: T.unsafe(nil)); end

  # Sends keys to the active element. This differs from calling
  # Element#send_keys(keys) on the active element in two ways:
  #
  # * The modifier keys included in this call are not released.
  # * There is no attempt to re-focus the element - so send_keys(:tab) for switching elements should work.
  #
  # @example Send the text "help" to an element
  #
  #   el = driver.find_element(id: "some_id")
  #   driver.action.send_keys(el, "help").perform
  # @example Send the text "help" to the currently focused element
  #
  #   driver.action.send_keys("help").perform
  # @overload send_keys
  # @overload send_keys
  # @return [W3CActionBuilder] A self reference
  def send_keys(*args, device: T.unsafe(nil)); end

  private

  # @api private
  # @option args
  # @option args
  # @overload key_down
  # @overload key_down
  # @param args [Array]
  # @param action [Symbol] The name of the key action to perform
  # @param device [Symbol, String] optional name of the KeyInput device to press the key on
  # @return [W3CActionBuilder] A self reference
  def key_action(*args, action: T.unsafe(nil), device: T.unsafe(nil)); end
end

# @api private
# @see ActionBuilder
class Selenium::WebDriver::Keyboard
  # @api private
  # @return [Keyboard] a new instance of Keyboard
  def initialize(bridge); end

  # Press a modifier key
  #
  # @api private
  # @see Selenium::WebDriver::Keys
  def press(key); end

  # Release a modifier key
  #
  # @api private
  # @see Selenium::WebDriver::Keys
  def release(key); end

  # @api private
  def send_keys(*keys); end

  private

  # @api private
  # @raise [ArgumentError]
  def assert_modifier(key); end
end

# @api private
Selenium::WebDriver::Keyboard::MODIFIERS = T.let(T.unsafe(nil), Array)

module Selenium::WebDriver::Keys
  class << self
    # @api private
    # @raise [Error::UnsupportedOperationError]
    def [](key); end

    # @api private
    def encode(keys); end

    # @api private
    def encode_key(key); end
  end
end

# @see Element#send_keys
# @see http://www.google.com.au/search?&q=unicode+pua&btnK=Search
Selenium::WebDriver::Keys::KEYS = T.let(T.unsafe(nil), Hash)

class Selenium::WebDriver::Location < ::Struct
  # Returns the value of attribute altitude
  #
  # @return [Object] the current value of altitude
  def altitude; end

  # Sets the attribute altitude
  #
  # @param value [Object] the value to set the attribute altitude to.
  # @return [Object] the newly set value
  def altitude=(_); end

  # Returns the value of attribute latitude
  #
  # @return [Object] the current value of latitude
  def latitude; end

  # Sets the attribute latitude
  #
  # @param value [Object] the value to set the attribute latitude to.
  # @return [Object] the newly set value
  def latitude=(_); end

  # Returns the value of attribute longitude
  #
  # @return [Object] the current value of longitude
  def longitude; end

  # Sets the attribute longitude
  #
  # @param value [Object] the value to set the attribute longitude to.
  # @return [Object] the newly set value
  def longitude=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class Selenium::WebDriver::LogEntry
  # @return [LogEntry] a new instance of LogEntry
  def initialize(level, timestamp, message); end

  def as_json(*_arg0); end

  # Returns the value of attribute level.
  def level; end

  # Returns the value of attribute message.
  def message; end

  def time; end

  # Returns the value of attribute timestamp.
  def timestamp; end

  def to_s; end
end

# @example Enable full logging
#   Selenium::WebDriver.logger.level = :debug
# @example Log to file
#   Selenium::WebDriver.logger.output = 'selenium.log'
# @example Use logger manually
#   Selenium::WebDriver.logger.info('This is info message')
#   Selenium::WebDriver.logger.warn('This is warning message')
class Selenium::WebDriver::Logger
  extend ::Forwardable

  # @return [Logger] a new instance of Logger
  def initialize; end

  def close(*args, &block); end
  def debug(*args, &block); end
  def debug?(*args, &block); end

  # Marks code as deprecated with/without replacement.
  #
  # @param old [String]
  # @param new [String, nil]
  def deprecate(old, new = T.unsafe(nil)); end

  def error(*args, &block); end
  def error?(*args, &block); end
  def fatal(*args, &block); end
  def fatal?(*args, &block); end
  def info(*args, &block); end
  def info?(*args, &block); end

  # Returns IO object used by logger internally.
  #
  # Normally, we would have never needed it, but we want to
  # use it as IO object for all child processes to ensure their
  # output is redirected there.
  #
  # It is only used in debug level, in other cases output is suppressed.
  #
  # @api private
  def io; end

  def level(*args, &block); end
  def level=(*args, &block); end

  # Changes logger output to a new IO.
  #
  # @param io [String]
  def output=(io); end

  def warn(*args, &block); end
  def warn?(*args, &block); end

  private

  def create_logger(output); end
  def default_level; end
end

class Selenium::WebDriver::Logs
  # @api private
  # @return [Logs] a new instance of Logs
  def initialize(bridge); end

  def available_types; end
  def get(type); end
end

class Selenium::WebDriver::Manager
  # @api private
  # @return [Manager] a new instance of Manager
  def initialize(bridge); end

  # Add a cookie to the browser
  #
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @param opts [Hash] the options to create a cookie with.
  # @raise [ArgumentError] if :name or :value is not specified
  def add_cookie(opts = T.unsafe(nil)); end

  # Get all cookies
  #
  # @return [Array<Hash>] list of cookies
  def all_cookies; end

  # Get the cookie with the given name
  #
  # @param name [String] the name of the cookie
  # @return [Hash, nil] the cookie, or nil if it wasn't found.
  def cookie_named(name); end

  # Delete all cookies
  def delete_all_cookies; end

  # Delete the cookie with the given name
  #
  # @param name [String] the name of the cookie to delete
  def delete_cookie(name); end

  # @api beta This API may be changed or removed in a future release.
  def logs; end

  # Create a new top-level browsing context
  # https://w3c.github.io/webdriver/#new-window
  #
  # @param type [Symbol] Supports two values: :tab and :window.
  #   Use :tab if you'd like the new window to share an OS-level window
  #   with the current browsing context.
  #   Use :window otherwise
  # @return [String] The value of the window handle
  def new_window(type = T.unsafe(nil)); end

  def timeouts; end

  # @api beta This API may be changed or removed in a future release.
  def window; end

  private

  def convert_cookie(cookie); end
  def datetime_at(int); end
  def seconds_from(obj); end
  def strip_port(str); end
end

Selenium::WebDriver::Manager::SECONDS_PER_DAY = T.let(T.unsafe(nil), Float)

# @api private
# @see ActionBuilder
class Selenium::WebDriver::Mouse
  # @api private
  # @return [Mouse] a new instance of Mouse
  def initialize(bridge); end

  # @api private
  def click(element = T.unsafe(nil)); end

  # @api private
  def context_click(element = T.unsafe(nil)); end

  # @api private
  def double_click(element = T.unsafe(nil)); end

  # @api private
  def down(element = T.unsafe(nil)); end

  # @api private
  def move_by(right_by, down_by); end

  # Move the mouse.
  #
  # Examples:
  #
  #   driver.mouse.move_to(element)
  #   driver.mouse.move_to(element, 5, 5)
  #
  # @api private
  def move_to(element, right_by = T.unsafe(nil), down_by = T.unsafe(nil)); end

  # @api private
  def up(element = T.unsafe(nil)); end

  private

  # @api private
  # @raise [TypeError]
  def assert_element(element); end

  # @api private
  def move_if_needed(element); end
end

class Selenium::WebDriver::Navigation
  # @return [Navigation] a new instance of Navigation
  def initialize(bridge); end

  # Move back a single entry in the browser's history.
  def back; end

  # Move forward a single entry in the browser's history.
  def forward; end

  # Refresh the current page.
  def refresh; end

  # Navigate to the given URL
  def to(url); end
end

# @api private
module Selenium::WebDriver::Platform
  private

  # @api private
  def assert_executable(path); end

  # @api private
  def assert_file(path); end

  # @api private
  def bitsize; end

  # @api private
  def ci; end

  # @api private
  def cygwin?; end

  # @api private
  def cygwin_path(path, **opts); end

  # @api private
  def engine; end

  # @api private
  def exit_hook; end

  # @api private
  def find_binary(*binary_names); end

  # @api private
  def find_in_program_files(*binary_names); end

  # @api private
  def home; end

  # @api private
  def interfaces; end

  # @api private
  def ip; end

  # @api private
  def jruby?; end

  # @api private
  def linux?; end

  # @api private
  def localhost; end

  # @api private
  def mac?; end

  # @api private
  def make_writable(file); end

  # @api private
  def null_device; end

  # @api private
  def os; end

  # @api private
  def ruby_version; end

  # @api private
  def unix_path(path); end

  # @api private
  def windows?; end

  # @api private
  def windows_path(path); end

  # @api private
  def wrap_in_quotes_if_necessary(str); end

  # @api private
  def wsl?; end

  class << self
    # @api private
    # @raise [Error::WebDriverError]
    def assert_executable(path); end

    # @api private
    # @raise [Error::WebDriverError]
    def assert_file(path); end

    # @api private
    def bitsize; end

    # @api private
    def ci; end

    # @api private
    # @return [Boolean]
    def cygwin?; end

    # @api private
    def cygwin_path(path, **opts); end

    # @api private
    def engine; end

    # @api private
    def exit_hook; end

    # @api private
    def find_binary(*binary_names); end

    # @api private
    def find_in_program_files(*binary_names); end

    # @api private
    def home; end

    # @api private
    def interfaces; end

    # @api private
    def ip; end

    # @api private
    # @return [Boolean]
    def jruby?; end

    # @api private
    # @return [Boolean]
    def linux?; end

    # @api private
    # @raise [Error::WebDriverError]
    def localhost; end

    # @api private
    # @return [Boolean]
    def mac?; end

    # @api private
    def make_writable(file); end

    # @api private
    def null_device; end

    # @api private
    def os; end

    # @api private
    def ruby_version; end

    # @api private
    def unix_path(path); end

    # @api private
    # @return [Boolean]
    def windows?; end

    # @api private
    def windows_path(path); end

    # @api private
    def wrap_in_quotes_if_necessary(str); end

    # @api private
    # @return [Boolean]
    def wsl?; end
  end
end

class Selenium::WebDriver::Point < ::Struct
  # Returns the value of attribute x
  #
  # @return [Object] the current value of x
  def x; end

  # Sets the attribute x
  #
  # @param value [Object] the value to set the attribute x to.
  # @return [Object] the newly set value
  def x=(_); end

  # Returns the value of attribute y
  #
  # @return [Object] the current value of y
  def y; end

  # Sets the attribute y
  #
  # @param value [Object] the value to set the attribute y to.
  # @return [Object] the newly set value
  def y=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

module Selenium::WebDriver::PointerActions
  # Clicks in the middle of the given element. Equivalent to:
  #
  #   driver.action.move_to(element).click
  #
  # When no element is passed, the current mouse position will be clicked.
  #
  # @example Clicking on an element
  #
  #   el = driver.find_element(id: "some_id")
  #   driver.action.click(el).perform
  # @example Clicking at the current mouse position
  #
  #   driver.action.click.perform
  # @param element [Selenium::WebDriver::Element] An optional element to click.
  # @param device [Symbol || String] optional name of the PointerInput device with the button
  #   that will be clicked
  # @return [W3CActionBuilder] A self reference.
  def click(element = T.unsafe(nil), device: T.unsafe(nil)); end

  # Clicks (without releasing) in the middle of the given element. This is
  # equivalent to:
  #
  #   driver.action.move_to(element).click_and_hold
  #
  # @example Clicking and holding on some element
  #
  #   el = driver.find_element(id: "some_id")
  #   driver.action.click_and_hold(el).perform
  # @param element [Selenium::WebDriver::Element] the element to move to and click.
  # @param device [Symbol || String] optional name of the PointerInput device to click with
  # @return [W3CActionBuilder] A self reference.
  def click_and_hold(element = T.unsafe(nil), device: T.unsafe(nil)); end

  # Performs a context-click at middle of the given element. First performs
  # a move_to to the location of the element.
  #
  # When no element is passed, the current mouse position will be context-clicked.
  #
  # @example Context-click at middle of given element
  #
  #   el = driver.find_element(id: "some_id")
  #   driver.action.context_click(el).perform
  # @example Context-clicking at the current mouse position
  #
  #   driver.action.context_click.perform
  # @param element [Selenium::WebDriver::Element] An element to context click.
  # @param device [Symbol || String] optional name of the PointerInput device with the button
  #   that will be context-clicked
  # @return [W3CActionBuilder] A self reference.
  def context_click(element = T.unsafe(nil), device: T.unsafe(nil)); end

  # The overridable duration for movement used by methods in this module
  def default_move_duration; end

  # Sets the attribute default_move_duration
  #
  # @param value the value to set the attribute default_move_duration to.
  def default_move_duration=(_arg0); end

  # Performs a double-click at middle of the given element. Equivalent to:
  #
  #   driver.action.move_to(element).double_click
  #
  # When no element is passed, the current mouse position will be double-clicked.
  #
  # @example Double-click an element
  #
  #   el = driver.find_element(id: "some_id")
  #   driver.action.double_click(el).perform
  # @example Double-clicking at the current mouse position
  #
  #   driver.action.double_click.perform
  # @param element [Selenium::WebDriver::Element] An optional element to move to.
  # @param device [Symbol || String] optional name of the PointerInput device with the button
  #   that will be double-clicked
  # @return [W3CActionBuilder] A self reference.
  def double_click(element = T.unsafe(nil), device: T.unsafe(nil)); end

  # A convenience method that performs click-and-hold at the location of the
  # source element, moves to the location of the target element, then
  # releases the mouse.
  #
  # @example Drag and drop one element onto another
  #
  #   el1 = driver.find_element(id: "some_id1")
  #   el2 = driver.find_element(id: "some_id2")
  #   driver.action.drag_and_drop(el1, el2).perform
  # @param source [Selenium::WebDriver::Element] element to emulate button down at.
  # @param target [Selenium::WebDriver::Element] element to move to and release the
  #   mouse at.
  # @param device [Symbol || String] optional name of the PointerInput device with the button
  #   that will perform the drag and drop
  # @return [W3CActionBuilder] A self reference.
  def drag_and_drop(source, target, device: T.unsafe(nil)); end

  # A convenience method that performs click-and-hold at the location of
  # the source element, moves by a given offset, then releases the mouse.
  #
  # @example Drag and drop an element by offset
  #
  #   el = driver.find_element(id: "some_id1")
  #   driver.action.drag_and_drop_by(el, 100, 100).perform
  # @param source [Selenium::WebDriver::Element] Element to emulate button down at.
  # @param right_by [Integer] horizontal move offset.
  # @param down_by [Integer] vertical move offset.
  # @param device [Symbol || String] optional name of the PointerInput device with the button
  #   that will perform the drag and drop
  # @return [W3CActionBuilder] A self reference.
  def drag_and_drop_by(source, right_by, down_by, device: T.unsafe(nil)); end

  # Moves the mouse from its current position by the given offset.
  # If the coordinates provided are outside the viewport (the mouse will
  # end up outside the browser window) then the viewport is scrolled to
  # match.
  #
  # @example Move the mouse to a certain offset from its current position
  #
  #   driver.action.move_by(100, 100).perform
  # @param right_by [Integer] horizontal offset. A negative value means moving the mouse left.
  # @param down_by [Integer] vertical offset. A negative value means moving the mouse up.
  # @param device [Symbol || String] optional name of the PointerInput device to move
  # @raise [MoveTargetOutOfBoundsError] if the provided offset is outside the document's boundaries.
  # @return [W3CActionBuilder] A self reference.
  def move_by(right_by, down_by, device: T.unsafe(nil)); end

  # Moves the mouse to the middle of the given element. The element is scrolled into
  # view and its location is calculated using getBoundingClientRect.  Then the
  # mouse is moved to optional offset coordinates from the element.
  #
  # This is adapted to be backward compatible from non-W3C actions. W3C calculates offset from the center point
  # of the element
  #
  # Note that when using offsets, both coordinates need to be passed.
  #
  # @example Scroll element into view and move the mouse to it
  #
  #   el = driver.find_element(id: "some_id")
  #   driver.action.move_to(el).perform
  # @example
  #
  #   el = driver.find_element(id: "some_id")
  #   driver.action.move_to(el, 100, 100).perform
  # @param element [Selenium::WebDriver::Element] to move to.
  # @param right_by [Integer] Optional offset from the top-left corner. A negative value means
  #   coordinates to the left of the element.
  # @param down_by [Integer] Optional offset from the top-left corner. A negative value means
  #   coordinates above the element.
  # @param device [Symbol || String] optional name of the PointerInput device to move.
  # @return [W3CActionBuilder] A self reference.
  def move_to(element, right_by = T.unsafe(nil), down_by = T.unsafe(nil), device: T.unsafe(nil)); end

  # Moves the mouse to a given location in the viewport.
  # If the coordinates provided are outside the viewport (the mouse will
  # end up outside the browser window) then the viewport is scrolled to
  # match.
  #
  # @example Move the mouse to a certain position in the viewport
  #
  #   driver.action.move_to_location(100, 100).perform
  # @param x [Integer] horizontal position. Equivalent to a css 'left' value.
  # @param y [Integer] vertical position. Equivalent to a css 'top' value.
  # @param device [Symbol || String] optional name of the PointerInput device to move
  # @raise [MoveTargetOutOfBoundsError] if the provided x or y value is outside the document's boundaries.
  # @return [W3CActionBuilder] A self reference.
  def move_to_location(x, y, device: T.unsafe(nil)); end

  # Presses (without releasing) at the current location of the PointerInput device. This is equivalent to:
  #
  #   driver.action.click_and_hold(nil)
  #
  # @example Clicking and holding at the current location
  #
  #   driver.action.pointer_down(:left).perform
  # @param button [Selenium::WebDriver::Interactions::PointerPress::BUTTONS] the button to press.
  # @param device [Symbol || String] optional name of the PointerInput device with the button
  #   that will be pressed
  # @return [W3CActionBuilder] A self reference.
  def pointer_down(button, device: T.unsafe(nil)); end

  # Releases the pressed mouse button at the current mouse location of the PointerInput device.
  #
  # @example Releasing a button after clicking and holding
  #
  #   driver.action.pointer_down(:left).pointer_up(:left).perform
  # @param button [Selenium::WebDriver::Interactions::PointerPress::BUTTONS] the button to release.
  # @param device [Symbol || String] optional name of the PointerInput device with the button that will
  #   be released
  # @return [W3CActionBuilder] A self reference.
  def pointer_up(button, device: T.unsafe(nil)); end

  # Releases the depressed left mouse button at the current mouse location.
  #
  # @example Releasing an element after clicking and holding it
  #
  #   el = driver.find_element(id: "some_id")
  #   driver.action.click_and_hold(el).release.perform
  # @param device [Symbol || String] optional name of the PointerInput device with the button
  #   that will be released
  # @return [W3CActionBuilder] A self reference.
  def release(device: T.unsafe(nil)); end

  private

  def button_action(button, action: T.unsafe(nil), device: T.unsafe(nil)); end
  def get_pointer(device = T.unsafe(nil)); end
end

class Selenium::WebDriver::PortProber
  class << self
    def above(port); end

    # @return [Boolean]
    def free?(port); end
  end
end

Selenium::WebDriver::PortProber::IGNORED_ERRORS = T.let(T.unsafe(nil), Array)

# Common methods for Chrome::Profile and Firefox::Profile
# Includers must implement #layout_on_disk
#
# @api private
module Selenium::WebDriver::ProfileHelper
  mixes_in_class_methods ::Selenium::WebDriver::ProfileHelper::ClassMethods

  # @api private
  def as_json(*_arg0); end

  # @api private
  def to_json(*_arg0); end

  private

  # @api private
  def create_tmp_copy(directory); end

  # @api private
  # @raise [Errno::ENOENT]
  def verify_model(model); end

  class << self
    # @api private
    # @private
    def included(base); end
  end
end

# @api private
module Selenium::WebDriver::ProfileHelper::ClassMethods
  # @api private
  def from_json(json); end
end

class Selenium::WebDriver::Proxy
  # @raise [ArgumentError]
  # @return [Proxy] a new instance of Proxy
  def initialize(opts = T.unsafe(nil)); end

  def ==(other); end
  def as_json(*_arg0); end
  def auto_detect; end
  def auto_detect=(bool); end
  def eql?(other); end
  def ftp; end
  def ftp=(value); end
  def http; end
  def http=(value); end
  def no_proxy; end
  def no_proxy=(value); end
  def pac; end
  def pac=(url); end
  def socks; end
  def socks=(value); end
  def socks_password; end
  def socks_password=(value); end
  def socks_username; end
  def socks_username=(value); end
  def socks_version; end
  def socks_version=(value); end
  def ssl; end
  def ssl=(value); end
  def to_json(*_arg0); end
  def type; end

  # @raise [ArgumentError]
  def type=(type); end

  class << self
    def json_create(data); end
  end
end

Selenium::WebDriver::Proxy::ALLOWED = T.let(T.unsafe(nil), Hash)
Selenium::WebDriver::Proxy::TYPES = T.let(T.unsafe(nil), Hash)

class Selenium::WebDriver::Rectangle < ::Struct
  # Returns the value of attribute height
  #
  # @return [Object] the current value of height
  def height; end

  # Sets the attribute height
  #
  # @param value [Object] the value to set the attribute height to.
  # @return [Object] the newly set value
  def height=(_); end

  # Returns the value of attribute width
  #
  # @return [Object] the current value of width
  def width; end

  # Sets the attribute width
  #
  # @param value [Object] the value to set the attribute width to.
  # @return [Object] the newly set value
  def width=(_); end

  # Returns the value of attribute x
  #
  # @return [Object] the current value of x
  def x; end

  # Sets the attribute x
  #
  # @param value [Object] the value to set the attribute x to.
  # @return [Object] the newly set value
  def x=(_); end

  # Returns the value of attribute y
  #
  # @return [Object] the current value of y
  def y; end

  # Sets the attribute y
  #
  # @param value [Object] the value to set the attribute y to.
  # @return [Object] the newly set value
  def y=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

module Selenium::WebDriver::Remote; end

class Selenium::WebDriver::Remote::Bridge
  include ::Selenium::WebDriver::Atoms
  include ::Selenium::WebDriver::BridgeHelper

  # Initializes the bridge with the given server URL
  #
  # @api private
  # @option opts
  # @option opts
  # @option opts
  # @param opts [Hash] options for the driver
  # @return [Bridge] a new instance of Bridge
  def initialize(opts = T.unsafe(nil)); end

  def browser; end

  # Returns the value of attribute capabilities.
  def capabilities; end

  # Returns the value of attribute context.
  def context; end

  # Sets the attribute context
  #
  # @param value the value to set the attribute context to.
  def context=(_arg0); end

  # Creates session handling both OSS and W3C dialects.
  #
  # @raise [Error::WebDriverError]
  def create_session(desired_capabilities, options = T.unsafe(nil)); end

  # Returns the value of attribute dialect.
  def dialect; end

  # Returns the value of attribute file_detector.
  def file_detector; end

  # Sets the attribute file_detector
  #
  # @param value the value to set the attribute file_detector to.
  def file_detector=(_arg0); end

  # Returns the value of attribute http.
  def http; end

  # Sets the attribute http
  #
  # @param value the value to set the attribute http to.
  def http=(_arg0); end

  # Returns the current session ID.
  def session_id; end

  private

  # @raise [NotImplementedError]
  def commands(command); end

  def escaper; end

  # executes a command on the remote server.
  #
  # @return [WebDriver::Remote::Response]
  def execute(command, opts = T.unsafe(nil), command_hash = T.unsafe(nil)); end

  def merged_capabilities(oss_capabilities, options = T.unsafe(nil)); end

  class << self
    # Implements protocol handshake which:
    #
    #   1. Creates session with driver.
    #   2. Sniffs response.
    #   3. Based on the response, understands which dialect we should use.
    #
    # @return [OSS:Bridge, W3C::Bridge]
    def handshake(**opts); end
  end
end

Selenium::WebDriver::Remote::Bridge::COMMANDS = T.let(T.unsafe(nil), Hash)
Selenium::WebDriver::Remote::Bridge::PORT = T.let(T.unsafe(nil), Integer)

# Specification of the desired and/or actual capabilities of the browser that the
# server is being asked to create.
class Selenium::WebDriver::Remote::Capabilities
  # @api public
  # @option :browser_name
  # @option :version
  # @option :platform
  # @option :javascript_enabled
  # @option :css_selectors_enabled
  # @option :takes_screenshot
  # @option :native_events
  # @option :proxy
  # @param :browser_name [Hash] a customizable set of options
  # @param :version [Hash] a customizable set of options
  # @param :platform [Hash] a customizable set of options
  # @param :javascript_enabled [Hash] a customizable set of options
  # @param :css_selectors_enabled [Hash] a customizable set of options
  # @param :takes_screenshot [Hash] a customizable set of options
  # @param :native_events [Hash] a customizable set of options
  # @param :proxy [Hash] a customizable set of options
  # @return [Capabilities] a new instance of Capabilities
  def initialize(opts = T.unsafe(nil)); end

  def ==(other); end
  def [](key); end

  # Allows setting arbitrary capabilities.
  def []=(key, value); end

  # @api private
  def as_json(*_arg0); end

  def browser_name; end
  def browser_name=(value); end
  def css_selectors_enabled; end
  def css_selectors_enabled=(value); end
  def css_selectors_enabled?; end
  def eql?(other); end
  def firefox_profile; end
  def firefox_profile=(value); end

  # Returns javascript_enabled capability.
  # It is true if not set explicitly.
  def javascript_enabled; end

  def javascript_enabled=(value); end

  # Returns javascript_enabled capability.
  # It is true if not set explicitly.
  def javascript_enabled?; end

  def merge!(other); end
  def native_events; end
  def native_events=(value); end
  def native_events?; end
  def platform; end
  def platform=(value); end
  def proxy; end
  def proxy=(proxy); end
  def rotatable; end
  def rotatable=(value); end
  def rotatable?; end
  def takes_screenshot; end
  def takes_screenshot=(value); end
  def takes_screenshot?; end
  def to_json(*_arg0); end
  def version; end
  def version=(value); end

  protected

  # Returns the value of attribute capabilities.
  def capabilities; end

  private

  def camel_case(str); end

  class << self
    def chrome(opts = T.unsafe(nil)); end
    def edge(opts = T.unsafe(nil)); end
    def firefox(opts = T.unsafe(nil)); end
    def firefox_legacy(opts = T.unsafe(nil)); end
    def htmlunit(opts = T.unsafe(nil)); end
    def htmlunitwithjs(opts = T.unsafe(nil)); end
    def ie(opts = T.unsafe(nil)); end
    def internet_explorer(opts = T.unsafe(nil)); end

    # @api private
    def json_create(data); end

    def phantomjs(opts = T.unsafe(nil)); end
    def safari(opts = T.unsafe(nil)); end
  end
end

Selenium::WebDriver::Remote::Capabilities::DEFAULTS = T.let(T.unsafe(nil), Hash)

# Driver implementation for remote server.
#
# @api private
class Selenium::WebDriver::Remote::Driver < ::Selenium::WebDriver::Driver
  include ::Selenium::WebDriver::DriverExtensions::UploadsFiles
  include ::Selenium::WebDriver::DriverExtensions::TakesScreenshot
  include ::Selenium::WebDriver::DriverExtensions::HasSessionId
  include ::Selenium::WebDriver::DriverExtensions::Rotatable
  include ::Selenium::WebDriver::DriverExtensions::HasRemoteStatus
  include ::Selenium::WebDriver::DriverExtensions::HasWebStorage

  # @api private
  # @return [Driver] a new instance of Driver
  def initialize(opts = T.unsafe(nil)); end
end

module Selenium::WebDriver::Remote::Http; end

class Selenium::WebDriver::Remote::Http::Common
  # @return [Common] a new instance of Common
  def initialize; end

  def call(verb, url, command_hash); end
  def close; end
  def quit_errors; end

  # Sets the attribute server_url
  #
  # @param value the value to set the attribute server_url to.
  def server_url=(_arg0); end

  # Returns the value of attribute timeout.
  def timeout; end

  # Sets the attribute timeout
  #
  # @param value the value to set the attribute timeout to.
  def timeout=(_arg0); end

  private

  def create_response(code, body, content_type); end

  # @raise [NotImplementedError]
  def request(*_arg0); end

  # @raise [Error::WebDriverError]
  def server_url; end
end

Selenium::WebDriver::Remote::Http::Common::CONTENT_TYPE = T.let(T.unsafe(nil), String)
Selenium::WebDriver::Remote::Http::Common::DEFAULT_HEADERS = T.let(T.unsafe(nil), Hash)

# same as chromium/gecko
Selenium::WebDriver::Remote::Http::Common::MAX_REDIRECTS = T.let(T.unsafe(nil), Integer)

# @api private
class Selenium::WebDriver::Remote::Http::Default < ::Selenium::WebDriver::Remote::Http::Common
  # Initializes object.
  # Warning: Setting {#open_timeout} to non-nil values will cause a separate thread to spawn.
  # Debuggers that freeze the process will not be able to evaluate any operations if that happens.
  #
  # @api private
  # @param open_timeout [Numeric] - Open timeout to apply to HTTP client.
  # @param read_timeout [Numeric] - Read timeout (seconds) to apply to HTTP client.
  # @return [Default] a new instance of Default
  def initialize(open_timeout: T.unsafe(nil), read_timeout: T.unsafe(nil)); end

  # @api private
  def close; end

  # @api private
  def open_timeout; end

  # @api private
  def open_timeout=(_arg0); end

  # @api private
  def proxy=(_arg0); end

  # @api private
  def read_timeout; end

  # @api private
  def read_timeout=(_arg0); end

  # Maintaining backward compatibility.
  #
  # @api private
  # @deprecated Please set the specific desired timeout {#read_timeout} or {#open_timeout} directly.
  # @param value [Numeric] - Timeout in seconds to apply to both open timeout and read timeouts.
  def timeout=(value); end

  private

  # @api private
  def http; end

  # @api private
  def new_http_client; end

  # @api private
  def new_request_for(verb, url, headers, payload); end

  # @api private
  def proxy; end

  # @api private
  def request(verb, url, headers, payload, redirects = T.unsafe(nil)); end

  # @api private
  def response_for(request); end

  # @api private
  # @return [Boolean]
  def use_proxy?; end
end

# @api private
Selenium::WebDriver::Remote::Http::Default::MAX_RETRIES = T.let(T.unsafe(nil), Integer)

module Selenium::WebDriver::Remote::OSS; end

# https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#command-reference
#
# @api private
class Selenium::WebDriver::Remote::OSS::Bridge < ::Selenium::WebDriver::Remote::Bridge
  # @api private
  # @return [Bridge] a new instance of Bridge
  def initialize(capabilities, session_id, **opts); end

  # alerts
  #
  # @api private
  def accept_alert; end

  # @api public
  # @return [ActionBuilder]
  def action; end

  # finding elements
  #
  # @api private
  def active_element; end

  # @api private
  def add_cookie(cookie); end

  # @api private
  def alert=(keys); end

  # @api private
  def alert_text; end

  # @api private
  def authentication(credentials); end

  # logs
  #
  # @api private
  def available_log_types; end

  # @api private
  def clear_element(element); end

  # @api private
  def clear_local_storage; end

  # @api private
  def clear_session_storage; end

  # @api private
  def click; end

  # @api private
  def click_element(element); end

  # @api private
  def close; end

  # @api private
  def commands(command); end

  # @api private
  def context_click; end

  # @api private
  def cookies; end

  # @api private
  def delete_all_cookies; end

  # @api private
  def delete_cookie(name); end

  # @api private
  def dialect; end

  # @api private
  def dismiss_alert; end

  # @api private
  def double_click; end

  # @api private
  def drag_element(element, right_by, down_by); end

  # @api private
  def element_attribute(element, name); end

  # @api private
  # @return [Boolean]
  def element_displayed?(element); end

  # @api private
  # @return [Boolean]
  def element_enabled?(element); end

  # @api private
  def element_location(element); end

  # @api private
  def element_location_once_scrolled_into_view(element); end

  # Backwards compatibility for w3c
  #
  # @api private
  def element_property(element, name); end

  # @api private
  def element_rect(element); end

  # @api private
  # @return [Boolean]
  def element_selected?(element); end

  # @api private
  def element_size(element); end

  # element properties
  #
  # @api private
  def element_tag_name(element); end

  # @api private
  def element_text(element); end

  # @api private
  def element_value(element); end

  # @api private
  def element_value_of_css_property(element, prop); end

  # @api private
  def execute_async_script(script, *args); end

  # javascript execution
  #
  # @api private
  def execute_script(script, *args); end

  # @api private
  def find_element_by(how, what, parent = T.unsafe(nil)); end

  # @api private
  def find_elements_by(how, what, parent = T.unsafe(nil)); end

  # @api private
  def get(url); end

  # navigation
  #
  # @api private
  def go_back; end

  # @api private
  def go_forward; end

  # @api private
  def implicit_wait_timeout=(milliseconds); end

  # @api private
  def keyboard; end

  # HTML 5
  #
  # @api private
  def local_storage_item(key, value = T.unsafe(nil)); end

  # @api private
  def local_storage_keys; end

  # @api private
  def local_storage_size; end

  # @api private
  def location; end

  # @api private
  def log(type); end

  # cookies
  #
  # @api private
  def manage; end

  # @api private
  def maximize_window(handle = T.unsafe(nil)); end

  # @api private
  def mouse; end

  # @api private
  def mouse_down; end

  # @api private
  def mouse_move_to(element, x = T.unsafe(nil), y = T.unsafe(nil)); end

  # @api private
  def mouse_up; end

  # @api private
  def network_connection; end

  # @api private
  def network_connection=(type); end

  # @api private
  def page_source; end

  # @api private
  def quit; end

  # @api private
  def refresh; end

  # @api private
  def remove_local_storage_item(key); end

  # @api private
  def remove_session_storage_item(key); end

  # @api private
  def reposition_window(x, y, handle = T.unsafe(nil)); end

  # @api private
  def resize_window(width, height, handle = T.unsafe(nil)); end

  # @api private
  def screen_orientation; end

  # @api private
  def screen_orientation=(orientation); end

  # @api private
  def screenshot; end

  # @api private
  def script_timeout=(milliseconds); end

  # @api private
  def send_keys_to_active_element(key); end

  # @api private
  def send_keys_to_element(element, keys); end

  # @api private
  def session_capabilities; end

  # @api private
  def session_storage_item(key, value = T.unsafe(nil)); end

  # @api private
  def session_storage_keys; end

  # @api private
  def session_storage_size; end

  # @api private
  def set_location(lat, lon, alt); end

  # @api private
  def status; end

  # @api private
  def submit_element(element); end

  # finding elements
  #
  # @api private
  def switch_to_active_element; end

  # @api private
  def switch_to_default_content; end

  # @api private
  def switch_to_frame(id); end

  # @api private
  def switch_to_parent_frame; end

  # @api private
  def switch_to_window(name); end

  # @api private
  def timeout(type, milliseconds); end

  # @api private
  def title; end

  # @api private
  def touch_double_tap(element); end

  # @api private
  def touch_down(x, y); end

  # @api private
  def touch_element_flick(element, right_by, down_by, speed); end

  # @api private
  def touch_flick(xspeed, yspeed); end

  # @api private
  def touch_long_press(element); end

  # @api private
  def touch_move(x, y); end

  # @api private
  def touch_scroll(element, x, y); end

  # @api private
  def touch_single_tap(element); end

  # @api private
  def touch_up(x, y); end

  # @api private
  def upload(local_file); end

  # @api private
  def url; end

  # @api private
  def window_handle; end

  # window handling
  #
  # @api private
  def window_handles; end

  # @api private
  def window_position(handle = T.unsafe(nil)); end

  # @api private
  def window_size(handle = T.unsafe(nil)); end

  private

  # @api private
  # @raise [Error::UnsupportedOperationError]
  def assert_javascript_enabled; end

  # executes a command on the remote server.
  #
  # Returns the 'value' of the returned payload
  #
  # @api private
  def execute(*args); end
end

# @api private
Selenium::WebDriver::Remote::OSS::Bridge::COMMANDS = T.let(T.unsafe(nil), Hash)

# @api private
class Selenium::WebDriver::Remote::Response
  # @api private
  # @return [Response] a new instance of Response
  def initialize(code, payload = T.unsafe(nil)); end

  # @api private
  def [](key); end

  # @api private
  def code; end

  # @api private
  def error; end

  # @api private
  def error_message; end

  # @api private
  def payload; end

  # @api private
  def payload=(_arg0); end

  private

  # @api private
  def add_backtrace(ex); end

  # @api private
  # @raise [Error::ServerError]
  def assert_ok; end

  # @api private
  def backtrace_from_remote(server_trace); end

  # @api private
  def error_payload; end

  # @api private
  def status; end

  # @api private
  def value; end
end

# @api private
Selenium::WebDriver::Remote::Response::STACKTRACE_KEY = T.let(T.unsafe(nil), String)

module Selenium::WebDriver::Remote::W3C; end

# http://www.w3.org/TR/2015/WD-webdriver-20150918/#list-of-endpoints
#
# @api private
class Selenium::WebDriver::Remote::W3C::Bridge < ::Selenium::WebDriver::Remote::Bridge
  # @api private
  # @return [Bridge] a new instance of Bridge
  def initialize(capabilities, session_id, **opts); end

  # alerts
  #
  # @api private
  def accept_alert; end

  # actions
  #
  # @api private
  def action(async = T.unsafe(nil)); end

  # actions
  #
  # @api private
  def actions(async = T.unsafe(nil)); end

  # finding elements
  #
  # @api private
  def active_element; end

  # @api private
  def add_cookie(cookie); end

  # @api private
  def alert=(keys); end

  # @api private
  def alert_text; end

  # @api private
  def clear_element(element); end

  # @api private
  def clear_local_storage; end

  # @api private
  def clear_session_storage; end

  # @api private
  def click_element(element); end

  # @api private
  def close; end

  # @api private
  def commands(command); end

  # @api private
  def cookie(name); end

  # @api private
  def cookies; end

  # @api private
  def delete_all_cookies; end

  # @api private
  def delete_cookie(name); end

  # @api private
  def dialect; end

  # @api private
  def dismiss_alert; end

  # @api private
  def drag_element(element, right_by, down_by); end

  # @api private
  def element_attribute(element, name); end

  # @api private
  # @return [Boolean]
  def element_displayed?(element); end

  # @api private
  # @return [Boolean]
  def element_enabled?(element); end

  # @api private
  def element_location(element); end

  # @api private
  def element_location_once_scrolled_into_view(element); end

  # @api private
  def element_property(element, name); end

  # @api private
  def element_rect(element); end

  # @api private
  # @return [Boolean]
  def element_selected?(element); end

  # @api private
  def element_size(element); end

  # element properties
  #
  # @api private
  def element_tag_name(element); end

  # @api private
  def element_text(element); end

  # @api private
  def element_value(element); end

  # @api private
  def element_value_of_css_property(element, prop); end

  # @api private
  def execute_async_script(script, *args); end

  # javascript execution
  #
  # @api private
  def execute_script(script, *args); end

  # @api private
  def find_element_by(how, what, parent = T.unsafe(nil)); end

  # @api private
  def find_elements_by(how, what, parent = T.unsafe(nil)); end

  # @api private
  def full_screen_window; end

  # @api private
  def get(url); end

  # navigation
  #
  # @api private
  def go_back; end

  # @api private
  def go_forward; end

  # @api private
  def implicit_wait_timeout=(milliseconds); end

  # @api private
  # @raise [Error::UnsupportedOperationError]
  def keyboard; end

  # HTML 5
  #
  # @api private
  def local_storage_item(key, value = T.unsafe(nil)); end

  # @api private
  def local_storage_keys; end

  # @api private
  def local_storage_size; end

  # @api private
  # @raise [Error::UnsupportedOperationError]
  def location; end

  # cookies
  #
  # @api private
  def manage; end

  # @api private
  # @raise [Error::UnsupportedOperationError]
  def maximize_window(handle = T.unsafe(nil)); end

  # @api private
  def minimize_window; end

  # @api private
  # @raise [Error::UnsupportedOperationError]
  def mouse; end

  # @api private
  # @raise [Error::UnsupportedOperationError]
  def network_connection; end

  # @api private
  # @raise [Error::UnsupportedOperationError]
  def network_connection=(_type); end

  # Create a new top-level browsing context
  # https://w3c.github.io/webdriver/#new-window
  #
  # @api private
  # @param type [String] Supports two values: 'tab' and 'window'.
  #   Use 'tab' if you'd like the new window to share an OS-level window
  #   with the current browsing context.
  #   Use 'window' otherwise
  # @return [Hash] Containing 'handle' with the value of the window handle
  #   and 'type' with the value of the created window type
  def new_window(type); end

  # @api private
  def page_source; end

  # @api private
  def quit; end

  # @api private
  def refresh; end

  # @api private
  def release_actions; end

  # @api private
  def remove_local_storage_item(key); end

  # @api private
  def remove_session_storage_item(key); end

  # @api private
  def reposition_window(x, y); end

  # @api private
  # @raise [Error::WebDriverError]
  def resize_window(width, height, handle = T.unsafe(nil)); end

  # @api private
  def screen_orientation; end

  # @api private
  def screen_orientation=(orientation); end

  # @api private
  def screenshot; end

  # @api private
  def script_timeout=(milliseconds); end

  # @api private
  def send_actions(data); end

  # @api private
  def send_keys_to_element(element, keys); end

  # @api private
  def session_storage_item(key, value = T.unsafe(nil)); end

  # @api private
  def session_storage_keys; end

  # @api private
  def session_storage_size; end

  # @api private
  # @raise [Error::UnsupportedOperationError]
  def set_location(_lat, _lon, _alt); end

  # @api private
  def set_window_rect(x: T.unsafe(nil), y: T.unsafe(nil), width: T.unsafe(nil), height: T.unsafe(nil)); end

  # @api private
  def status; end

  # @api private
  def submit_element(element); end

  # finding elements
  #
  # @api private
  def switch_to_active_element; end

  # @api private
  def switch_to_default_content; end

  # @api private
  def switch_to_frame(id); end

  # @api private
  def switch_to_parent_frame; end

  # @api private
  def switch_to_window(name); end

  # @api private
  def timeout(type, milliseconds); end

  # @api private
  def title; end

  # @api private
  def touch_double_tap(element); end

  # @api private
  def touch_down(x, y); end

  # @api private
  def touch_element_flick(element, right_by, down_by, speed); end

  # @api private
  def touch_flick(xspeed, yspeed); end

  # @api private
  def touch_long_press(element); end

  # @api private
  def touch_move(x, y); end

  # @api private
  def touch_scroll(element, x, y); end

  # @api private
  def touch_single_tap(element); end

  # @api private
  def touch_up(x, y); end

  # @api private
  def upload(local_file); end

  # @api private
  def url; end

  # @api private
  def window_handle; end

  # window handling
  #
  # @api private
  def window_handles; end

  # @api private
  def window_position; end

  # @api private
  def window_rect; end

  # @api private
  # @raise [Error::UnsupportedOperationError]
  def window_size(handle = T.unsafe(nil)); end

  private

  # @api private
  def convert_locators(how, what); end

  # Escapes invalid characters in CSS selector.
  #
  # @api private
  # @see https://mathiasbynens.be/notes/css-escapes
  def escape_css(string); end

  # @api private
  def execute(*_arg0); end
end

# @api private
Selenium::WebDriver::Remote::W3C::Bridge::COMMANDS = T.let(T.unsafe(nil), Hash)

# @api private
Selenium::WebDriver::Remote::W3C::Bridge::ESCAPE_CSS_REGEXP = T.let(T.unsafe(nil), Regexp)

# @api private
Selenium::WebDriver::Remote::W3C::Bridge::QUIT_ERRORS = T.let(T.unsafe(nil), Array)

# @api private
Selenium::WebDriver::Remote::W3C::Bridge::UNICODE_CODE_POINT = T.let(T.unsafe(nil), Integer)

# Specification of the desired and/or actual capabilities of the browser that the
# server is being asked to create.
#
# @api private
class Selenium::WebDriver::Remote::W3C::Capabilities
  # @api public
  # @option :browser_name
  # @option :browser_version
  # @option :platform_name
  # @option :accept_insecure_certs
  # @option :proxy
  # @param opts [Hash]
  # @param :browser_name [Hash] a customizable set of options
  # @param :browser_version [Hash] a customizable set of options
  # @param :platform_name [Hash] a customizable set of options
  # @param :accept_insecure_certs [Hash] a customizable set of options
  # @param :proxy [Hash] a customizable set of options
  # @return [Capabilities] a new instance of Capabilities
  def initialize(opts = T.unsafe(nil)); end

  # @api private
  def ==(other); end

  # @api private
  def [](key); end

  # Allows setting arbitrary capabilities.
  #
  # @api private
  def []=(key, value); end

  def accept_insecure_certs; end
  def accept_insecure_certs=(value); end
  def accessibility_checks; end
  def accessibility_checks=(value); end

  # @api private
  def as_json(*_arg0); end

  def browser_name; end
  def browser_name=(value); end
  def browser_version; end
  def browser_version=(value); end
  def device; end
  def device=(value); end

  # @api private
  def eql?(other); end

  def implicit_timeout; end
  def implicit_timeout=(value); end

  # @api private
  def merge!(other); end

  def page_load_strategy; end
  def page_load_strategy=(value); end
  def page_load_timeout; end
  def page_load_timeout=(value); end

  # @api private
  def platform; end

  # @api private
  def platform=(value); end

  def platform_name; end
  def platform_name=(value); end
  def proxy; end

  # @api private
  def proxy=(proxy); end

  def remote_session_id; end
  def remote_session_id=(value); end
  def script_timeout; end
  def script_timeout=(value); end
  def set_window_rect; end
  def set_window_rect=(value); end
  def strict_file_interactability; end
  def strict_file_interactability=(value); end
  def timeouts; end
  def timeouts=(value); end

  # @api private
  def to_json(*_arg0); end

  def unhandled_prompt_behavior; end
  def unhandled_prompt_behavior=(value); end

  # Backward compatibility
  #
  # @api private
  def version; end

  # @api private
  def version=(value); end

  protected

  # @api private
  def capabilities; end

  private

  # @api private
  def camel_case(str); end

  class << self
    # @api private
    def edge(opts = T.unsafe(nil)); end

    # @api private
    def ff(opts = T.unsafe(nil)); end

    # @api private
    def firefox(opts = T.unsafe(nil)); end

    # Creates W3C compliant capabilities from OSS ones.
    #
    # @api private
    # @param oss_capabilities [Hash, Remote::Capabilities]
    def from_oss(oss_capabilities); end

    # @api private
    def json_create(data); end
  end
end

# @api private
Selenium::WebDriver::Remote::W3C::Capabilities::EXTENSION_CAPABILITY_PATTERN = T.let(T.unsafe(nil), Regexp)

# @api private
Selenium::WebDriver::Remote::W3C::Capabilities::KNOWN = T.let(T.unsafe(nil), Array)

module Selenium::WebDriver::Safari
  class << self
    def driver_path; end
    def driver_path=(path); end

    # @raise [Error::WebDriverError]
    def path; end

    def path=(path); end
    def technology_preview; end
    def technology_preview!; end
  end
end

module Selenium::WebDriver::Safari::Bridge
  def attach_debugger; end
  def commands(command); end
  def permissions; end
  def permissions=(permissions); end
end

# https://developer.apple.com/library/content/documentation/NetworkingInternetWeb/Conceptual/WebDriverEndpointDoc/Commands/Commands.html
Selenium::WebDriver::Safari::Bridge::COMMANDS = T.let(T.unsafe(nil), Hash)

# Driver implementation for Safari.
#
# @api private
class Selenium::WebDriver::Safari::Driver < ::Selenium::WebDriver::Driver
  include ::Selenium::WebDriver::DriverExtensions::HasDebugger
  include ::Selenium::WebDriver::DriverExtensions::HasPermissions
  include ::Selenium::WebDriver::DriverExtensions::TakesScreenshot

  # @api private
  # @return [Driver] a new instance of Driver
  def initialize(opts = T.unsafe(nil)); end

  # @api private
  def browser; end

  # @api private
  def quit; end

  private

  # @api private
  def create_capabilities(opts = T.unsafe(nil)); end
end

class Selenium::WebDriver::Safari::Options
  # Create a new Options instance for W3C-capable versions of Safari.
  #
  # @example
  #   options = Selenium::WebDriver::Safari::Options.new(automatic_inspection: true)
  #   driver = Selenium::WebDriver.for :safari, options: options
  # @option opts
  # @option opts
  # @param opts [Hash] the pre-defined options to create the Safari::Options with
  # @return [Options] a new instance of Options
  # @see https://developer.apple.com/documentation/webkit/about_webdriver_for_safari
  def initialize(**opts); end

  # @api private
  def as_json(*_arg0); end

  # Returns the value of attribute automatic_inspection.
  def automatic_inspection; end

  # Sets the attribute automatic_inspection
  #
  # @param value the value to set the attribute automatic_inspection to.
  def automatic_inspection=(_arg0); end

  # Returns the value of attribute automatic_profiling.
  def automatic_profiling; end

  # Sets the attribute automatic_profiling
  #
  # @param value the value to set the attribute automatic_profiling to.
  def automatic_profiling=(_arg0); end
end

# @api private
class Selenium::WebDriver::Safari::Service < ::Selenium::WebDriver::Service; end

module Selenium::WebDriver::SearchContext
  # Find the first element matching the given arguments
  #
  # When using Element#find_element with :xpath, be aware that webdriver
  # follows standard conventions: a search prefixed with "//" will search
  # the entire document, not just the children of this current node. Use
  # ".//" to limit your search to the children of the receiving Element.
  #
  # @overload find_element
  # @overload find_element
  # @raise [Error::NoSuchElementError] if the element doesn't exist
  # @return [Element]
  def find_element(*args); end

  # Find all elements matching the given arguments
  #
  # @see SearchContext#find_element
  def find_elements(*args); end

  private

  def extract_args(args); end
end

# @api private
Selenium::WebDriver::SearchContext::FINDERS = T.let(T.unsafe(nil), Hash)

# Base class implementing default behavior of service object,
# responsible for starting and stopping driver implementations.
class Selenium::WebDriver::Service
  # End users should use a class method for the desired driver, rather than using this directly.
  #
  # @api private
  # @raise [Error::WebDriverError]
  # @return [Service] a new instance of Service
  def initialize(path: T.unsafe(nil), port: T.unsafe(nil), args: T.unsafe(nil)); end

  # Returns the value of attribute executable_path.
  def executable_path; end

  # Returns the value of attribute host.
  def host; end

  # Sets the attribute host
  #
  # @param value the value to set the attribute host to.
  def host=(_arg0); end

  def start; end
  def stop; end
  def uri; end

  protected

  def extract_service_args(driver_opts); end

  private

  # @raise [Error::WebDriverError]
  def binary_path(path = T.unsafe(nil)); end

  def build_process(*command); end
  def cannot_connect_error_text; end
  def connect_to_server; end

  # @raise [Error::WebDriverError]
  def connect_until_stable; end

  def find_free_port; end

  # @return [Boolean]
  def process_exited?; end

  # @return [Boolean]
  def process_running?; end

  def socket_lock; end
  def start_process; end
  def stop_process; end
  def stop_server; end

  class << self
    def chrome(**opts); end

    # Returns the value of attribute default_port.
    def default_port; end

    # Returns the value of attribute driver_path.
    def driver_path; end

    def driver_path=(path); end
    def edge(**opts); end

    # Returns the value of attribute executable.
    def executable; end

    def firefox(**opts); end
    def ie(**opts); end
    def internet_explorer(**opts); end

    # Returns the value of attribute missing_text.
    def missing_text; end

    def safari(**opts); end

    # Returns the value of attribute shutdown_supported.
    def shutdown_supported; end
  end
end

Selenium::WebDriver::Service::SOCKET_LOCK_TIMEOUT = T.let(T.unsafe(nil), Integer)
Selenium::WebDriver::Service::START_TIMEOUT = T.let(T.unsafe(nil), Integer)
Selenium::WebDriver::Service::STOP_TIMEOUT = T.let(T.unsafe(nil), Integer)

# @api private
class Selenium::WebDriver::SocketLock
  # @api private
  # @return [SocketLock] a new instance of SocketLock
  def initialize(port, timeout); end

  # Attempt to acquire a lock on the given port. Control is yielded to an
  # execution block if the lock could be successfully obtained.
  #
  # @api private
  def locked; end

  private

  # @api private
  # @return [Boolean]
  def can_lock?; end

  # @api private
  def current_time; end

  # @api private
  # @return [Boolean]
  def did_lock?; end

  # @api private
  # @raise [Error::WebDriverError]
  def lock; end

  # @api private
  def release; end
end

class Selenium::WebDriver::SocketPoller
  # @return [SocketPoller] a new instance of SocketPoller
  def initialize(host, port, timeout = T.unsafe(nil), interval = T.unsafe(nil)); end

  # Returns true if the server has stopped listening within the given timeout,
  # false otherwise.
  #
  # @return [Boolean]
  def closed?; end

  # Returns true if the server is listening within the given timeout,
  # false otherwise.
  #
  # @return [Boolean]
  def connected?; end

  private

  # @return [Boolean]
  def conn_completed?(sock); end

  def current_time; end

  # we use a plain TCPSocket here since JRuby has issues select()ing on a connecting socket
  # see http://jira.codehaus.org/browse/JRUBY-5165
  #
  # @return [Boolean]
  def listening?; end

  # @return [Boolean]
  def socket_writable?(sock); end

  def with_timeout; end
end

Selenium::WebDriver::SocketPoller::CONNECTED_ERRORS = T.let(T.unsafe(nil), Array)
Selenium::WebDriver::SocketPoller::CONNECT_TIMEOUT = T.let(T.unsafe(nil), Integer)
Selenium::WebDriver::SocketPoller::NOT_CONNECTED_ERRORS = T.let(T.unsafe(nil), Array)
module Selenium::WebDriver::Support; end

# Subclass and override methods from this class
# to implement your own event listener.
#
# @example
#
#   class NavigationListener < Selenium::WebDriver::Support::AbstractEventListener
#   def initialize(log)
#   @log = log
#   end
#
#   def before_navigate_to(url, driver)
#   @log.info "navigating to #{url}"
#   end
#
#   def after_navigate_to(url, driver)
#   @log.info "done navigating to #{url}"
#   end
#   end
#
#   listener = NavigationListener.new(logger)
#   driver = Selenium::WebDriver.for :firefox, :listener => listener
class Selenium::WebDriver::Support::AbstractEventListener
  def after_change_value_of(element, driver); end
  def after_click(element, driver); end
  def after_close(driver); end
  def after_execute_script(script, driver); end
  def after_find(by, what, driver); end
  def after_navigate_back(driver); end
  def after_navigate_forward(driver); end
  def after_navigate_to(url, driver); end
  def after_quit(driver); end
  def before_change_value_of(element, driver); end
  def before_click(element, driver); end
  def before_close(driver); end
  def before_execute_script(script, driver); end
  def before_find(by, what, driver); end
  def before_navigate_back(driver); end
  def before_navigate_forward(driver); end
  def before_navigate_to(url, driver); end
  def before_quit(driver); end
end

class Selenium::WebDriver::Support::BlockEventListener
  # @return [BlockEventListener] a new instance of BlockEventListener
  def initialize(callback); end

  def method_missing(meth, *args); end
end

class Selenium::WebDriver::Support::Color
  # @return [Color] a new instance of Color
  def initialize(red, green, blue, alpha = T.unsafe(nil)); end

  def ==(other); end

  # Returns the value of attribute alpha.
  def alpha; end

  # Returns the value of attribute blue.
  def blue; end

  def eql?(other); end

  # Returns the value of attribute green.
  def green; end

  def hash; end
  def hex; end

  # Returns the value of attribute red.
  def red; end

  def rgb; end
  def rgba; end

  class << self
    def from_hsl(h, s, l, a); end
    def from_string(str); end
    def hue_to_rgb(lum1, lum2, hue); end
  end
end

Selenium::WebDriver::Support::Color::HEX3_PATTERN = T.let(T.unsafe(nil), Regexp)
Selenium::WebDriver::Support::Color::HEX_PATTERN = T.let(T.unsafe(nil), Regexp)
Selenium::WebDriver::Support::Color::HSLA_PATTERN = T.let(T.unsafe(nil), Regexp)
Selenium::WebDriver::Support::Color::HSL_PATTERN = T.let(T.unsafe(nil), Regexp)
Selenium::WebDriver::Support::Color::RGBA_PATTERN = T.let(T.unsafe(nil), Regexp)
Selenium::WebDriver::Support::Color::RGBA_PCT_PATTERN = T.let(T.unsafe(nil), Regexp)
Selenium::WebDriver::Support::Color::RGB_PATTERN = T.let(T.unsafe(nil), Regexp)
Selenium::WebDriver::Support::Color::RGB_PCT_PATTERN = T.let(T.unsafe(nil), Regexp)

module Selenium::WebDriver::Support::Escaper
  class << self
    def escape(str); end
  end
end

# @api private
class Selenium::WebDriver::Support::EventFiringBridge
  # @api private
  # @return [EventFiringBridge] a new instance of EventFiringBridge
  def initialize(delegate, listener); end

  # @api private
  def clear_element(ref); end

  # @api private
  def click_element(ref); end

  # @api private
  def close; end

  # @api private
  def execute_script(script, *args); end

  # @api private
  def find_element_by(how, what, parent = T.unsafe(nil)); end

  # @api private
  def find_elements_by(how, what, parent = T.unsafe(nil)); end

  # @api private
  def get(url); end

  # @api private
  def go_back; end

  # @api private
  def go_forward; end

  # @api private
  def quit; end

  # @api private
  def send_keys_to_element(ref, keys); end

  private

  # @api private
  def create_element(ref); end

  # @api private
  def dispatch(name, *args); end

  # @api private
  def driver; end

  # @api private
  def method_missing(meth, *args, &blk); end
end

class Selenium::WebDriver::Support::Select
  # @param element [Element] The select element to use
  # @raise [ArgumentError]
  # @return [Select] a new instance of Select
  def initialize(element); end

  # Deselect all selected options. Only valid if the element supports multiple selections.
  #
  # @raise [Error::UnsupportedOperationError] if the element does not support multiple selections.
  def deselect_all; end

  # Deselect options by visible text, index or value.
  #
  # @param how [:text, :index, :value] How to find the option
  # @param what [String] What value to find the option by.
  # @raise [Error::UnsupportedOperationError] if the element does not support multiple selections.
  # @see Select#select_by
  def deselect_by(how, what); end

  # Get the first selected option in this select element
  #
  # @raise [Error::NoSuchElementError] if no options are selected
  # @return [Element]
  def first_selected_option; end

  # Does this select element support selecting multiple options?
  #
  # @return [Boolean]
  def multiple?; end

  # Get all options for this select element
  #
  # @return [Array<Element>]
  def options; end

  # Select all unselected options. Only valid if the element supports multiple selections.
  #
  # @raise [Error::UnsupportedOperationError] if the element does not support multiple selections.
  def select_all; end

  # Select options by visible text, index or value.
  #
  # When selecting by :text, selects options that display text matching the argument. That is, when given "Bar" this
  # would select an option like:
  #
  #     <option value="foo">Bar</option>
  #
  # When slecting by :value, selects all options that have a value matching the argument. That is, when given "foo" this
  # would select an option like:
  #
  #     <option value="foo">Bar</option>
  #
  # When selecting by :index, selects the option at the given index. This is done by examining the "index" attribute of an
  # element, and not merely by counting.
  #
  # @param how [:text, :index, :value] How to find the option
  # @param what [String] What value to find the option by.
  def select_by(how, what); end

  # Get all selected options for this select element
  #
  # @return [Array<Element>]
  def selected_options; end

  private

  # @raise [Error::UnsupportedOperationError]
  def deselect_by_index(index); end

  # @raise [Error::UnsupportedOperationError]
  def deselect_by_text(text); end

  # @raise [Error::UnsupportedOperationError]
  def deselect_by_value(value); end

  def deselect_option(option); end
  def deselect_options(opts); end
  def find_by_index(index); end
  def find_by_text(text); end
  def find_by_value(value); end

  # @raise [Error::NoSuchElementError]
  def select_by_index(index); end

  # @raise [Error::NoSuchElementError]
  def select_by_text(text); end

  # @raise [Error::NoSuchElementError]
  def select_by_value(value); end

  def select_option(option); end
  def select_options(opts); end
end

class Selenium::WebDriver::TargetLocator
  # @api private
  # @return [TargetLocator] a new instance of TargetLocator
  def initialize(bridge); end

  # get the active element
  #
  # @return [WebDriver::Element]
  def active_element; end

  # switches to the currently active modal dialog for this particular driver instance
  def alert; end

  # selects either the first frame on the page, or the main document when a page contains iframes.
  def default_content; end

  # switch to the frame with the given id
  def frame(id); end

  # switch to the parent frame
  def parent_frame; end

  # switch to the given window handle
  #
  # If given a block, this method will switch back to the original window after
  # block execution.
  #
  # @param id A window handle, obtained through Driver#window_handles
  def window(id); end
end

class Selenium::WebDriver::Timeouts
  # @return [Timeouts] a new instance of Timeouts
  def initialize(bridge); end

  # Set the amount of time the driver should wait when searching for elements.
  def implicit_wait=(seconds); end

  # Sets the amount of time to wait for a page load to complete before throwing an error.
  # If the timeout is negative, page loads can be indefinite.
  def page_load=(seconds); end

  # Sets the amount of time to wait for an asynchronous script to finish
  # execution before throwing an error. If the timeout is negative, then the
  # script will be allowed to run indefinitely.
  def script_timeout=(seconds); end
end

class Selenium::WebDriver::TouchActionBuilder < ::Selenium::WebDriver::ActionBuilder
  # @api private
  # @return [TouchActionBuilder] a new instance of TouchActionBuilder
  def initialize(mouse, keyboard, touch_screen); end

  def double_tap(element); end
  def down(x, y = T.unsafe(nil)); end

  # @raise [ArgumentError]
  def flick(*args); end

  def long_press(element); end
  def move(x, y = T.unsafe(nil)); end

  # @raise [ArgumentError]
  def scroll(*args); end

  def single_tap(element); end
  def up(x, y = T.unsafe(nil)); end
end

class Selenium::WebDriver::TouchScreen
  # @api private
  # @return [TouchScreen] a new instance of TouchScreen
  def initialize(bridge); end

  def double_tap(element); end
  def down(x, y = T.unsafe(nil)); end
  def flick(*args); end
  def long_press(element); end
  def move(x, y = T.unsafe(nil)); end
  def scroll(*args); end
  def single_tap(element); end
  def up(x, y = T.unsafe(nil)); end

  private

  # @raise [TypeError]
  def assert_element(element); end

  def coords_from(x, y); end
end

Selenium::WebDriver::TouchScreen::FLICK_SPEED = T.let(T.unsafe(nil), Hash)
Selenium::WebDriver::VERSION = T.let(T.unsafe(nil), String)

class Selenium::WebDriver::W3CActionBuilder
  include ::Selenium::WebDriver::KeyActions
  include ::Selenium::WebDriver::PointerActions

  # Initialize a W3C Action Builder. Differs from previous by requiring a bridge and allowing asynchronous actions.
  # The W3C implementation allows asynchronous actions per device. e.g. A key can be pressed at the same time that
  # the mouse is moving. Keep in mind that pauses must be added for other devices in order to line up the actions
  # correctly when using asynchronous.
  #
  # @param bridge [Selenium::WebDriver::Remote::W3CBridge] the bridge for the current driver instance
  # @param mouse [Selenium::WebDriver::Interactions::PointerInput] PointerInput for the mouse.
  # @param keyboard [Selenium::WebDriver::Interactions::KeyInput] KeyInput for the keyboard.
  # @param async [Boolean] Whether to perform the actions asynchronously per device. Defaults to false for
  #   backwards compatibility.
  # @return [W3CActionBuilder] A self reference.
  def initialize(bridge, mouse, keyboard, async = T.unsafe(nil)); end

  # Adds a KeyInput device
  #
  # @example Add a key input device
  #
  #   builder = device.action
  #   builder.add_key_input('keyboard2')
  # @param name [String] name for the device
  # @return [Interactions::KeyInput] The key input added
  def add_key_input(name); end

  # Adds a PointerInput device of the given kind
  #
  # @example Add a touch pointer input device
  #
  #   builder = device.action
  #   builder.add_pointer_input('touch', :touch)
  # @param name [String] name for the device
  # @param kind [Symbol] kind of pointer device to create
  # @return [Interactions::PointerInput] The pointer input added
  def add_pointer_input(kind, name); end

  # Clears all actions from the builder.
  def clear_all_actions; end

  # Returns the value of attribute devices.
  def devices; end

  # Retrieves the input device for the given name
  #
  # @param name [String] name of the input device
  # @return [Selenium::WebDriver::Interactions::InputDevice] input device with given name
  def get_device(name); end

  # Retrieves the current KeyInput device
  #
  # @return [Selenium::WebDriver::Interactions::InputDevice] current KeyInput device
  def key_inputs; end

  # Creates a pause for the given device of the given duration. If no duration is given, the pause will only wait
  # for all actions to complete in that tick.
  #
  # @example Send keys to an element
  #
  #   action_builder = driver.action
  #   keyboard = action_builder.key_input
  #   el = driver.find_element(id: "some_id")
  #   driver.action.click(el).pause(keyboard).pause(keyboard).pause(keyboard).send_keys('keys').perform
  # @param device [InputDevice] Input device to pause
  # @param duration [Float] Duration to pause
  # @return [W3CActionBuilder] A self reference.
  def pause(device, duration = T.unsafe(nil)); end

  # Creates multiple pauses for the given device of the given duration.
  #
  # @example Send keys to an element
  #
  #   action_builder = driver.action
  #   keyboard = action_builder.key_input
  #   el = driver.find_element(id: "some_id")
  #   driver.action.click(el).pauses(keyboard, 3).send_keys('keys').perform
  # @param device [InputDevice] Input device to pause
  # @param number [Integer] of pauses to add for the device
  # @param duration [Float] Duration to pause
  # @return [W3CActionBuilder] A self reference.
  def pauses(device, number, duration = T.unsafe(nil)); end

  # Executes the actions added to the builder.
  def perform; end

  # Retrieves the current PointerInput devices
  #
  # @return [Array] array of current PointerInput devices
  def pointer_inputs; end

  # Releases all action states from the browser.
  def release_actions; end

  private

  # Adds an InputDevice
  def add_input(device); end

  # Adds pauses for all devices but the given devices
  #
  # @param action_devices [Array[InputDevice]] Array of Input Devices performing an action in this tick.
  def tick(*action_devices); end
end

class Selenium::WebDriver::W3CManager < ::Selenium::WebDriver::Manager
  # Get the cookie with the given name
  #
  # @param name [String] the name of the cookie
  # @return [Hash, nil] the cookie, or nil if it wasn't found.
  def cookie_named(name); end

  # Delete all cookies
  def delete_all_cookies; end
end

class Selenium::WebDriver::Wait
  # Create a new Wait instance
  #
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @param opts [Hash] Options for this instance
  # @return [Wait] a new instance of Wait
  def initialize(opts = T.unsafe(nil)); end

  # Wait until the given block returns a true value.
  #
  # @raise [Error::TimeoutError]
  # @return [Object] the result of the block
  def until; end

  private

  def current_time; end
end

Selenium::WebDriver::Wait::DEFAULT_INTERVAL = T.let(T.unsafe(nil), Float)
Selenium::WebDriver::Wait::DEFAULT_TIMEOUT = T.let(T.unsafe(nil), Integer)

# @api beta This API may be changed or removed in a future release.
class Selenium::WebDriver::Window
  # @api private
  # @return [Window] a new instance of Window
  def initialize(bridge); end

  # Make current window full screen
  #
  # @api beta This API may be changed or removed in a future release.
  def full_screen; end

  # Maximize the current window
  #
  # @api beta This API may be changed or removed in a future release.
  def maximize; end

  # Minimize the current window
  #
  # @api beta This API may be changed or removed in a future release.
  def minimize; end

  # Equivalent to #position=, but accepts x and y arguments.
  #
  # @api beta This API may be changed or removed in a future release.
  # @example
  #
  #   driver.manage.window.move_to(300, 400)
  def move_to(x, y); end

  # Get the position of the current window.
  #
  # @api beta This API may be changed or removed in a future release.
  # @return [Selenium::WebDriver::Point] The position.
  def position; end

  # Move the current window to the given position.
  #
  # @api beta This API may be changed or removed in a future release.
  # @param point [Selenium::WebDriver::Point, #x and #y] The new position.
  def position=(point); end

  # Get the rect of the current window.
  #
  # @api beta This API may be changed or removed in a future release.
  # @return [Selenium::WebDriver::Rectangle] The rectangle.
  def rect; end

  # Sets the current window rect to the given point and position.
  #
  # @api beta This API may be changed or removed in a future release.
  # @param rectangle [Selenium::WebDriver::Rectangle, #x, #y, #width, #height] The new rect.
  def rect=(rectangle); end

  # Equivalent to #size=, but accepts width and height arguments.
  #
  # @api beta This API may be changed or removed in a future release.
  # @example Maximize the window.
  #
  #   max_width, max_height = driver.execute_script("return [window.screen.availWidth, window.screen.availHeight];")
  #   driver.manage.window.resize_to(max_width, max_height)
  def resize_to(width, height); end

  # Get the size of the current window.
  #
  # @api beta This API may be changed or removed in a future release.
  # @return [Selenium::WebDriver::Dimension] The size.
  def size; end

  # Resize the current window to the given dimension.
  #
  # @api beta This API may be changed or removed in a future release.
  # @param dimension [Selenium::WebDriver::Dimension, #width and #height] The new size.
  def size=(dimension); end
end

# @api private
module Selenium::WebDriver::Zipper
  class << self
    # @api private
    def unzip(path); end

    # @api private
    def zip(path); end

    # @api private
    def zip_file(path); end

    private

    # @api private
    def add_zip_entry(zip, file, entry_name); end

    # @api private
    def with_tmp_zip(&blk); end
  end
end

# @api private
Selenium::WebDriver::Zipper::EXTENSIONS = T.let(T.unsafe(nil), Array)

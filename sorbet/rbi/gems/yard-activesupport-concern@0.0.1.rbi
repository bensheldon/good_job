# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `yard-activesupport-concern` gem.
# Please instead update this file by running `bin/tapioca gem yard-activesupport-concern`.

# Gem::YARDoc provides methods to generate YARDoc and yri data for installed gems
# upon gem installation.
#
# This file is automatically required by RubyGems 1.9 and newer.
module YARD
  class << self
    # Loads gems that match the name 'yard-*' (recommended) or 'yard_*' except
    # those listed in +~/.yard/ignored_plugins+. This is called immediately
    # after YARD is loaded to allow plugin support.
    #
    # @deprecated Use {Config.load_plugins}
    # @return [Boolean] true if all plugins loaded successfully, false otherwise.
    def load_plugins; end

    # An alias to {Parser::SourceParser}'s parsing method
    #
    # @example Parse a glob of files
    #   YARD.parse('lib/**/*.rb')
    # @see Parser::SourceParser.parse
    def parse(*args); end

    # An alias to {Parser::SourceParser}'s parsing method
    #
    # @example Parse a string of input
    #   YARD.parse_string('class Foo; end')
    # @see Parser::SourceParser.parse_string
    def parse_string(*args); end

    # @return [Boolean] whether YARD is being run in Ruby 1.8 mode
    def ruby18?; end

    # @return [Boolean] whether YARD is being run in Ruby 1.9 mode
    def ruby19?; end

    # @return [Boolean] whether YARD is being run in Ruby 2.0
    def ruby2?; end

    # @return [Boolean] whether YARD is being run in Ruby 3.0
    def ruby3?; end

    # @return [Boolean] whether YARD is being run inside of Windows
    def windows?; end
  end
end

module YARD::ActiveSupport; end
module YARD::ActiveSupport::Concern; end

class YARD::ActiveSupport::Concern::ClassMethodsHandler < ::YARD::Handlers::Ruby::Base
  # Process any found `class_methods` block within a "namespace" scope
  # (class or module).
  def process; end
end

class YARD::ActiveSupport::Concern::IncludedHandler < ::YARD::Handlers::Ruby::Base
  # Process any found `included` block within a "namespace" scope (class
  # or module).
  def process; end
end

YARD::ActiveSupport::Concern::VERSION = T.let(T.unsafe(nil), String)

# @deprecated Use {Config::CONFIG_DIR}
YARD::CONFIG_DIR = T.let(T.unsafe(nil), String)

# The root path for YARD source libraries
YARD::ROOT = T.let(T.unsafe(nil), String)

# The root path for YARD builtin templates
YARD::TEMPLATE_ROOT = T.let(T.unsafe(nil), String)

YARD::VERSION = T.let(T.unsafe(nil), String)

# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/github_changelog_generator/all/github_changelog_generator.rbi
#
# github_changelog_generator-1.16.4

module GitHubChangelogGenerator
end
module GitHubChangelogGenerator::Helper
  def self.log; end
  def self.test?; end
end
class GitHubChangelogGenerator::Options < SimpleDelegator
  def []=(key, val); end
  def add_sections?; end
  def censored_values; end
  def configure_sections?; end
  def initialize(values); end
  def load_custom_ruby_files; end
  def print_options; end
  def supported_option?(key); end
  def to_hash; end
  def unsupported_options; end
  def values; end
  def write_to_file?; end
end
class GitHubChangelogGenerator::Options::UnsupportedOptionError < ArgumentError
end
class GitHubChangelogGenerator::ArgvParser
  def initialize(options = nil); end
  def options; end
  def parse!(argv); end
  def parser; end
  def self.banner; end
end
class GitHubChangelogGenerator::ParserError < StandardError
end
class GitHubChangelogGenerator::FileParserChooser
  def initialize(options); end
  def parse!(_argv); end
  def resolve_path; end
end
class GitHubChangelogGenerator::ParserFile
  def convert_value(value, option_name); end
  def extract_pair(line); end
  def initialize(options, io = nil); end
  def non_configuration_line?(line); end
  def option_key_for(option_name); end
  def parse!; end
  def parse_line!(line, line_number); end
end
class GitHubChangelogGenerator::Parser
  def self.abort_if_user_and_project_not_given!(options); end
  def self.default_options; end
  def self.parse_options(argv = nil); end
end
class GitHubChangelogGenerator::OctoFetcher
  def calculate_pages(client, method, request_options); end
  def check_github_response; end
  def client; end
  def client_options; end
  def closed_pr_options; end
  def commits; end
  def commits_in_branch(name); end
  def commits_in_tag(sha, shas = nil); end
  def connection_options; end
  def default_branch; end
  def fail_with_message(error, message); end
  def fetch_closed_issues_and_pr; end
  def fetch_closed_pull_requests; end
  def fetch_comments_async(prs); end
  def fetch_commit(commit_id); end
  def fetch_date_of_tag(tag); end
  def fetch_events_async(issues); end
  def fetch_github_token; end
  def fetch_tag_shas(tags); end
  def get_all_tags; end
  def github_fetch_tags; end
  def initialize(options = nil); end
  def iterate_pages(client, method, *arguments, parent: nil, **options); end
  def middleware; end
  def oldest_commit; end
  def print_empty_line; end
  def print_in_same_line(log_string); end
  def querystring_as_hash(uri); end
  def stringify_keys_deep(indata); end
  def sys_abort(msg); end
  def user_project; end
end
class GitHubChangelogGenerator::OctoFetcher::MovedPermanentlyError < RuntimeError
end
class GitHubChangelogGenerator::Generator
  def add_first_occurring_tag_to_prs(tags, prs); end
  def apply_exclude_tags(all_tags); end
  def apply_exclude_tags_regex(all_tags); end
  def associate_rebase_comment_prs(tags, prs_left, total); end
  def associate_release_branch_prs(prs_left, total); end
  def associate_tagged_prs(tags, prs, total); end
  def build_tag_section_mapping(section_tags, filtered_tags); end
  def compound_changelog; end
  def delete_by_time(issues, hash_key = nil, older_tag = nil, newer_tag = nil); end
  def detect_actual_closed_dates(issues); end
  def detect_link_tag_time(newer_tag); end
  def due_tag; end
  def ensure_older_tag(older_tag, newer_tag); end
  def exclude_issues_by_labels(issues); end
  def exclude_issues_without_labels(issues); end
  def fetch_and_filter_tags; end
  def fetch_events_for_issues_and_pr; end
  def fetch_issues_and_pr; end
  def fetch_tags_dates(tags); end
  def filter_array_by_labels(all_issues); end
  def filter_by_include_labels(issues); end
  def filter_by_milestone(filtered_issues, tag_name, all_issues); end
  def filter_by_tag(issues, newer_tag = nil); end
  def filter_due_tag(all_tags); end
  def filter_exact_tags(all_tags); end
  def filter_excluded_tags(all_tags); end
  def filter_included_tags(all_tags); end
  def filter_issues_for_tags(newer_tag, older_tag); end
  def filter_merged_pull_requests(pull_requests); end
  def filter_since_tag(all_tags); end
  def filter_tags_with_regex(all_tags, regex, regex_option_name); end
  def filter_wo_labels(items); end
  def filtered_tags; end
  def filtered_tags=(arg0); end
  def find_closed_date_by_commit(issue); end
  def find_issues_to_add(all_issues, tag_name); end
  def generate_entries_for_all_tags; end
  def generate_entry_between_tags(older_tag, newer_tag); end
  def generate_unreleased_entry; end
  def get_filtered_issues(issues); end
  def get_filtered_pull_requests(pull_requests); end
  def get_filtered_tags(all_tags); end
  def get_time_of_tag(tag_name); end
  def include_issues_by_labels(issues); end
  def initialize(options = nil); end
  def insert_fixed_string(log); end
  def options; end
  def options=(arg0); end
  def remove_issues_in_milestones(filtered_issues); end
  def remove_old_fixed_string(log); end
  def set_date_from_event(event, issue); end
  def sha_in_release_branch?(sha); end
  def since_tag; end
  def sort_tags_by_date(tags); end
  def sorted_tags; end
  def sorted_tags=(arg0); end
  def tag_newer_old_tag?(older_tag_time, time); end
  def tag_older_new_tag?(newer_tag_time, time); end
  def tag_section_mapping; end
  def tag_section_mapping=(arg0); end
  def version_of_first_item; end
  def warn_if_nonmatching_regex(all_tags, regex, regex_option_name); end
  def warn_if_tag_not_found(all_tags, tag); end
end
class GitHubChangelogGenerator::Section
  def body_only; end
  def body_till_first_break(body); end
  def encapsulate_string(string); end
  def generate_content; end
  def get_string_for_issue(issue); end
  def initialize(opts = nil); end
  def issue_line_with_body(line, issue); end
  def issue_line_with_user(line, issue); end
  def issues; end
  def labels; end
  def name; end
  def name=(arg0); end
  def options; end
  def prefix; end
end
class GitHubChangelogGenerator::Entry
  def add_unmapped_section(issues); end
  def content; end
  def create_sections; end
  def default_sections; end
  def generate_body(pull_requests, issues); end
  def generate_entry_for_tag(pull_requests, issues, newer_tag_name, newer_tag_link, newer_tag_time, older_tag_name); end
  def generate_header(newer_tag_name, newer_tag_link, newer_tag_time, older_tag_name, project_url); end
  def initialize(options = nil); end
  def line_labels_for(issue); end
  def parse_sections(sections_desc); end
  def sort_into_sections(pull_requests, issues); end
  def sort_labeled_issues(issues); end
end
class GitHubChangelogGenerator::ChangelogGeneratorError < StandardError
end
class GitHubChangelogGenerator::Reader
  def initialize(options = nil); end
  def parse(data); end
  def parse_heading(heading); end
  def read(file_path); end
end
class GitHubChangelogGenerator::ChangelogGenerator
  def initialize; end
  def run; end
end

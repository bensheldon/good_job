# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `cuprite` gem.
# Please instead update this file by running `bin/tapioca gem cuprite`.


# source://cuprite//lib/capybara/cuprite/driver.rb#7
module Capybara
  extend ::Capybara::DSLRSpecProxyInstaller
end

# source://cuprite//lib/capybara/cuprite/driver.rb#8
module Capybara::Cuprite; end

# source://cuprite//lib/capybara/cuprite/browser.rb#7
class Capybara::Cuprite::Browser < ::Ferrum::Browser
  # @return [Browser] a new instance of Browser
  #
  # source://cuprite//lib/capybara/cuprite/browser.rb#14
  def initialize(options = T.unsafe(nil)); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#10
  def accept_confirm(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#10
  def accept_prompt(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#130
  def active_element; end

  # source://cuprite//lib/capybara/cuprite/browser.rb#217
  def all_text(node); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#193
  def attribute(node, name); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#188
  def attributes(node); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#10
  def before_click(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#134
  def browser_error; end

  # @raise [Ferrum::NoSuchPageError]
  #
  # source://cuprite//lib/capybara/cuprite/browser.rb#121
  def close_window(target_id); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#23
  def command(*_arg0, **_arg1, &_arg2); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#184
  def delete_text(node); end

  # @return [Boolean]
  #
  # source://cuprite//lib/capybara/cuprite/browser.rb#205
  def disabled?(node); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#10
  def dismiss_confirm(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#10
  def dismiss_prompt(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#142
  def drag(node, other, steps, delay = T.unsafe(nil), scroll = T.unsafe(nil)); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#157
  def drag_by(node, dx, dy, steps, delay = T.unsafe(nil), scroll = T.unsafe(nil)); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#82
  def find(method, selector); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#10
  def find_modal(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#90
  def find_within(node, method, selector); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#10
  def hover(*args, **_arg1, &block); end

  # @return [Boolean]
  #
  # source://cuprite//lib/capybara/cuprite/browser.rb#213
  def obscured?(node); end

  # @raise [Ferrum::NoSuchPageError]
  #
  # source://cuprite//lib/capybara/cuprite/browser.rb#30
  def page; end

  # source://cuprite//lib/capybara/cuprite/browser.rb#176
  def parents(node); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#209
  def path(node); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#86
  def property(node, name); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#42
  def quit; end

  # source://cuprite//lib/capybara/cuprite/browser.rb#36
  def reset; end

  # source://cuprite//lib/capybara/cuprite/browser.rb#10
  def reset_modals(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#47
  def resize(**options); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#10
  def select(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#172
  def select_file(node, value); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#10
  def send_keys(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#10
  def set(*args, **_arg1, &block); end

  # @raise [NotImplementedError]
  #
  # source://cuprite//lib/capybara/cuprite/browser.rb#138
  def source; end

  # source://cuprite//lib/capybara/cuprite/browser.rb#78
  def status_code; end

  # source://cuprite//lib/capybara/cuprite/browser.rb#10
  def switch_to_frame(*args, **_arg1, &block); end

  # @raise [Ferrum::NoSuchPageError]
  #
  # source://cuprite//lib/capybara/cuprite/browser.rb#114
  def switch_to_window(target_id); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#10
  def trigger(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#55
  def url_allowlist; end

  # source://cuprite//lib/capybara/cuprite/browser.rb#61
  def url_allowlist=(patterns); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#63
  def url_blacklist; end

  # source://cuprite//lib/capybara/cuprite/browser.rb#68
  def url_blacklist=(patterns); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#66
  def url_blocklist; end

  # source://cuprite//lib/capybara/cuprite/browser.rb#72
  def url_blocklist=(patterns); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#52
  def url_whitelist; end

  # source://cuprite//lib/capybara/cuprite/browser.rb#57
  def url_whitelist=(patterns); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#197
  def value(node); end

  # @return [Boolean]
  #
  # source://cuprite//lib/capybara/cuprite/browser.rb#201
  def visible?(node); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#180
  def visible_text(node); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#74
  def visit(*args); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#96
  def window_handle; end

  # source://cuprite//lib/capybara/cuprite/browser.rb#100
  def window_handles; end

  # source://cuprite//lib/capybara/cuprite/browser.rb#104
  def within_window(locator = T.unsafe(nil)); end

  private

  # source://cuprite//lib/capybara/cuprite/browser.rb#255
  def attach_page(target_id = T.unsafe(nil)); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#223
  def find_all(method, selector, within = T.unsafe(nil)); end

  # source://cuprite//lib/capybara/cuprite/browser.rb#237
  def prepare_wildcards(patterns); end
end

# source://cuprite//lib/capybara/cuprite/errors.rb#7
class Capybara::Cuprite::ClientError < ::Capybara::Cuprite::Error
  # @return [ClientError] a new instance of ClientError
  #
  # source://cuprite//lib/capybara/cuprite/errors.rb#10
  def initialize(response); end

  # Returns the value of attribute response.
  #
  # source://cuprite//lib/capybara/cuprite/errors.rb#8
  def response; end
end

# source://cuprite//lib/capybara/cuprite/page.rb#7
class Capybara::Cuprite::ClosedPage
  # @return [Boolean]
  #
  # source://cuprite//lib/capybara/cuprite/page.rb#8
  def closed?; end
end

# source://cuprite//lib/capybara/cuprite/driver.rb#9
class Capybara::Cuprite::Driver < ::Capybara::Driver::Base
  extend ::Forwardable

  # @return [Driver] a new instance of Driver
  #
  # source://cuprite//lib/capybara/cuprite/driver.rb#26
  def initialize(app, options = T.unsafe(nil)); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#329
  def accept_modal(type, options = T.unsafe(nil)); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#72
  def active_element; end

  # source://cuprite//lib/capybara/cuprite/driver.rb#232
  def add_header(name, value, permanent: T.unsafe(nil)); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#228
  def add_headers(headers); end

  # Returns the value of attribute app.
  #
  # source://cuprite//lib/capybara/cuprite/driver.rb#24
  def app; end

  # source://cuprite//lib/capybara/cuprite/driver.rb#275
  def authorize(user, password); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#15
  def back(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#270
  def basic_authorize(user, password); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#15
  def body(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#51
  def browser; end

  # source://cuprite//lib/capybara/cuprite/driver.rb#258
  def clear_cookies; end

  # source://cuprite//lib/capybara/cuprite/driver.rb#266
  def clear_memory_cache; end

  # source://cuprite//lib/capybara/cuprite/driver.rb#212
  def clear_network_traffic; end

  # source://cuprite//lib/capybara/cuprite/driver.rb#88
  def click(x, y); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#15
  def close_window(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#240
  def cookies; end

  # source://cuprite//lib/capybara/cuprite/driver.rb#15
  def current_url(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#20
  def current_window_handle(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#277
  def debug(*_arg0, **_arg1, &_arg2); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#15
  def device_pixel_ratio(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#342
  def dismiss_modal(type, options = T.unsafe(nil)); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#97
  def evaluate_async_script(script, *args); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#92
  def evaluate_script(script, *args); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#102
  def execute_script(script, *args); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#84
  def find(method, selector); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#80
  def find_css(selector); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#76
  def find_xpath(selector); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#15
  def forward(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#68
  def frame_title; end

  # source://cuprite//lib/capybara/cuprite/driver.rb#60
  def frame_url; end

  # source://cuprite//lib/capybara/cuprite/driver.rb#188
  def fullscreen_window(handle); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#21
  def go_back(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#22
  def go_forward(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#220
  def headers; end

  # source://cuprite//lib/capybara/cuprite/driver.rb#224
  def headers=(headers); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#19
  def html(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#321
  def invalid_element_errors; end

  # source://cuprite//lib/capybara/cuprite/driver.rb#178
  def maximize_window(handle); end

  # @return [Boolean]
  #
  # source://cuprite//lib/capybara/cuprite/driver.rb#47
  def needs_server?; end

  # source://cuprite//lib/capybara/cuprite/driver.rb#198
  def network_traffic(type = T.unsafe(nil)); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#125
  def no_such_window_error; end

  # source://cuprite//lib/capybara/cuprite/driver.rb#118
  def open_new_window; end

  # Returns the value of attribute options.
  #
  # source://cuprite//lib/capybara/cuprite/driver.rb#24
  def options; end

  # Sets the attribute paper_size
  #
  # @param value the value to set the attribute paper_size to.
  #
  # source://cuprite//lib/capybara/cuprite/driver.rb#165
  def paper_size=(_arg0); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#281
  def pause; end

  # source://cuprite//lib/capybara/cuprite/driver.rb#15
  def quit(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#15
  def refresh(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#252
  def remove_cookie(name, **options); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#149
  def render(path, options = T.unsafe(nil)); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#151
  def render_base64(format = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#129
  def reset!; end

  # source://cuprite//lib/capybara/cuprite/driver.rb#167
  def resize(width, height); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#170
  def resize_window(width, height); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#172
  def resize_window_to(handle, width, height); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#236
  def response_headers; end

  # source://cuprite//lib/capybara/cuprite/driver.rb#15
  def restart(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#138
  def save_screenshot(path, options = T.unsafe(nil)); end

  # Returns the value of attribute screen_size.
  #
  # source://cuprite//lib/capybara/cuprite/driver.rb#24
  def screen_size; end

  # source://cuprite//lib/capybara/cuprite/driver.rb#194
  def scroll_to(left, top); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#18
  def send_keys(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#244
  def set_cookie(name, value, options = T.unsafe(nil)); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#216
  def set_proxy(host, port, user = T.unsafe(nil), password = T.unsafe(nil), bypass = T.unsafe(nil)); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#64
  def source; end

  # source://cuprite//lib/capybara/cuprite/driver.rb#15
  def status_code(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#107
  def switch_to_frame(locator); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#15
  def switch_to_window(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#15
  def timeout(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#15
  def timeout=(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#15
  def title(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#15
  def viewport_size(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#55
  def visit(url); end

  # @return [Boolean]
  #
  # source://cuprite//lib/capybara/cuprite/driver.rb#317
  def wait?; end

  # source://cuprite//lib/capybara/cuprite/driver.rb#262
  def wait_for_network_idle(**options); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#15
  def wait_for_reload(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#15
  def window_handle(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#15
  def window_handles(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#182
  def window_size(handle); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#15
  def within_window(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#161
  def zoom_factor=(value); end

  private

  # source://cuprite//lib/capybara/cuprite/driver.rb#381
  def default_cookie_host; end

  # source://cuprite//lib/capybara/cuprite/driver.rb#357
  def default_domain; end

  # source://cuprite//lib/capybara/cuprite/driver.rb#365
  def native_args(args); end

  # @return [Boolean]
  #
  # source://cuprite//lib/capybara/cuprite/driver.rb#402
  def pdf?(path, options); end

  # source://cuprite//lib/capybara/cuprite/driver.rb#369
  def session_wait_time; end

  # source://cuprite//lib/capybara/cuprite/driver.rb#389
  def unwrap_script_result(arg); end
end

# source://cuprite//lib/capybara/cuprite/driver.rb#10
Capybara::Cuprite::Driver::DEFAULT_MAXIMIZE_SCREEN_SIZE = T.let(T.unsafe(nil), Array)

# source://cuprite//lib/capybara/cuprite/driver.rb#11
Capybara::Cuprite::Driver::EXTENSION = T.let(T.unsafe(nil), String)

# source://cuprite//lib/capybara/cuprite/errors.rb#5
class Capybara::Cuprite::Error < ::StandardError; end

# source://cuprite//lib/capybara/cuprite/errors.rb#16
class Capybara::Cuprite::InvalidSelector < ::Capybara::Cuprite::ClientError
  # @return [InvalidSelector] a new instance of InvalidSelector
  #
  # source://cuprite//lib/capybara/cuprite/errors.rb#17
  def initialize(response, method, selector); end

  # source://cuprite//lib/capybara/cuprite/errors.rb#23
  def message; end
end

# source://cuprite//lib/capybara/cuprite/errors.rb#28
class Capybara::Cuprite::MouseEventFailed < ::Capybara::Cuprite::ClientError
  # @return [MouseEventFailed] a new instance of MouseEventFailed
  #
  # source://cuprite//lib/capybara/cuprite/errors.rb#31
  def initialize(*_arg0); end

  # source://cuprite//lib/capybara/cuprite/errors.rb#38
  def message; end

  # Returns the value of attribute name.
  #
  # source://cuprite//lib/capybara/cuprite/errors.rb#29
  def name; end

  # Returns the value of attribute position.
  #
  # source://cuprite//lib/capybara/cuprite/errors.rb#29
  def position; end

  # Returns the value of attribute selector.
  #
  # source://cuprite//lib/capybara/cuprite/errors.rb#29
  def selector; end
end

# source://cuprite//lib/capybara/cuprite/node.rb#7
class Capybara::Cuprite::Node < ::Capybara::Driver::Node
  extend ::Forwardable

  # @return [Node] a new instance of Node
  #
  # source://cuprite//lib/capybara/cuprite/node.rb#15
  def initialize(driver, node); end

  # source://cuprite//lib/capybara/cuprite/node.rb#203
  def ==(other); end

  # source://cuprite//lib/capybara/cuprite/node.rb#69
  def [](name); end

  # source://cuprite//lib/capybara/cuprite/node.rb#53
  def all_text; end

  # @api private
  #
  # source://cuprite//lib/capybara/cuprite/node.rb#230
  def as_json(*_arg0); end

  # source://cuprite//lib/capybara/cuprite/node.rb#84
  def attributes; end

  # source://cuprite//lib/capybara/cuprite/node.rb#13
  def browser(*args, **_arg1, &block); end

  # @return [Boolean]
  #
  # source://cuprite//lib/capybara/cuprite/node.rb#134
  def checked?; end

  # source://cuprite//lib/capybara/cuprite/node.rb#146
  def click(keys = T.unsafe(nil), **options); end

  # source://cuprite//lib/capybara/cuprite/node.rb#20
  def command(name, *args); end

  # source://cuprite//lib/capybara/cuprite/node.rb#12
  def description(*args, **_arg1, &block); end

  # @return [Boolean]
  #
  # source://cuprite//lib/capybara/cuprite/node.rb#142
  def disabled?; end

  # source://cuprite//lib/capybara/cuprite/node.rb#154
  def double_click(keys = T.unsafe(nil), **options); end

  # source://cuprite//lib/capybara/cuprite/node.rb#169
  def drag_by(x, y, **options); end

  # source://cuprite//lib/capybara/cuprite/node.rb#162
  def drag_to(other, **options); end

  # source://cuprite//lib/capybara/cuprite/node.rb#47
  def find(method, selector); end

  # source://cuprite//lib/capybara/cuprite/node.rb#43
  def find_css(selector); end

  # source://cuprite//lib/capybara/cuprite/node.rb#39
  def find_xpath(selector); end

  # source://cuprite//lib/capybara/cuprite/node.rb#158
  def hover; end

  # source://cuprite//lib/capybara/cuprite/node.rb#220
  def inspect; end

  # Returns the value of attribute node.
  #
  # source://cuprite//lib/capybara/cuprite/node.rb#8
  def node; end

  # @return [Boolean]
  #
  # source://cuprite//lib/capybara/cuprite/node.rb#216
  def obscured?; end

  # source://cuprite//lib/capybara/cuprite/node.rb#33
  def parents; end

  # source://cuprite//lib/capybara/cuprite/node.rb#212
  def path; end

  # source://cuprite//lib/capybara/cuprite/node.rb#65
  def property(name); end

  # source://cuprite//lib/capybara/cuprite/node.rb#150
  def right_click(keys = T.unsafe(nil), **options); end

  # source://cuprite//lib/capybara/cuprite/node.rb#191
  def scroll_by(x, y); end

  # source://cuprite//lib/capybara/cuprite/node.rb#180
  def scroll_to(element, location, position = T.unsafe(nil)); end

  # source://cuprite//lib/capybara/cuprite/node.rb#117
  def select_option; end

  # @return [Boolean]
  #
  # source://cuprite//lib/capybara/cuprite/node.rb#138
  def selected?; end

  # source://cuprite//lib/capybara/cuprite/node.rb#210
  def send_key(*keys); end

  # source://cuprite//lib/capybara/cuprite/node.rb#207
  def send_keys(*keys); end

  # source://cuprite//lib/capybara/cuprite/node.rb#92
  def set(value, options = T.unsafe(nil)); end

  # source://cuprite//lib/capybara/cuprite/node.rb#126
  def tag_name; end

  # @api private
  #
  # source://cuprite//lib/capybara/cuprite/node.rb#225
  def to_json(*_arg0); end

  # source://cuprite//lib/capybara/cuprite/node.rb#176
  def trigger(event); end

  # source://cuprite//lib/capybara/cuprite/node.rb#121
  def unselect_option; end

  # source://cuprite//lib/capybara/cuprite/node.rb#88
  def value; end

  # @return [Boolean]
  #
  # source://cuprite//lib/capybara/cuprite/node.rb#130
  def visible?; end

  # source://cuprite//lib/capybara/cuprite/node.rb#57
  def visible_text; end

  private

  # source://cuprite//lib/capybara/cuprite/node.rb#245
  def filter_text(text); end

  # source://cuprite//lib/capybara/cuprite/node.rb#237
  def prepare_and_click(mode, name, keys, options); end

  # source://cuprite//lib/capybara/cuprite/node.rb#253
  def scroll_element_to_location(element, location); end

  # source://cuprite//lib/capybara/cuprite/node.rb#283
  def scroll_to_coords(x, y); end

  # source://cuprite//lib/capybara/cuprite/node.rb#269
  def scroll_to_location(location); end
end

# source://cuprite//lib/capybara/cuprite/errors.rb#46
class Capybara::Cuprite::ObsoleteNode < ::Capybara::Cuprite::ClientError
  # @return [ObsoleteNode] a new instance of ObsoleteNode
  #
  # source://cuprite//lib/capybara/cuprite/errors.rb#49
  def initialize(node, response); end

  # source://cuprite//lib/capybara/cuprite/errors.rb#54
  def message; end

  # Returns the value of attribute node.
  #
  # source://cuprite//lib/capybara/cuprite/errors.rb#47
  def node; end
end

# source://cuprite//lib/capybara/cuprite/page.rb#13
class Capybara::Cuprite::Page < ::Ferrum::Page
  # @return [Page] a new instance of Page
  #
  # source://cuprite//lib/capybara/cuprite/page.rb#22
  def initialize(*_arg0, **_arg1, &_arg2); end

  # source://cuprite//lib/capybara/cuprite/page.rb#60
  def accept_confirm; end

  # source://cuprite//lib/capybara/cuprite/page.rb#68
  def accept_prompt(modal_response); end

  # source://cuprite//lib/capybara/cuprite/page.rb#18
  def at_css(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/page.rb#18
  def at_xpath(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/page.rb#104
  def before_click(node, name, _keys = T.unsafe(nil), offset = T.unsafe(nil)); end

  # source://cuprite//lib/capybara/cuprite/page.rb#18
  def body(*args, **_arg1, &block); end

  # @return [Boolean]
  #
  # source://cuprite//lib/capybara/cuprite/page.rb#137
  def closed?; end

  # source://cuprite//lib/capybara/cuprite/page.rb#18
  def css(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/page.rb#18
  def current_title(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/page.rb#18
  def current_url(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/page.rb#64
  def dismiss_confirm; end

  # source://cuprite//lib/capybara/cuprite/page.rb#73
  def dismiss_prompt; end

  # source://cuprite//lib/capybara/cuprite/page.rb#18
  def evaluate(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/page.rb#18
  def evaluate_async(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/page.rb#18
  def evaluate_on(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/page.rb#18
  def execute(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/page.rb#18
  def execution_id(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/page.rb#18
  def execution_id!(*args, **_arg1, &block); end

  # source://cuprite//lib/capybara/cuprite/page.rb#77
  def find_modal(options); end

  # source://cuprite//lib/capybara/cuprite/page.rb#129
  def frame_name; end

  # source://cuprite//lib/capybara/cuprite/page.rb#45
  def hover(node); end

  # source://cuprite//lib/capybara/cuprite/page.rb#98
  def reset_modals; end

  # source://cuprite//lib/capybara/cuprite/page.rb#35
  def select(node, value); end

  # source://cuprite//lib/capybara/cuprite/page.rb#51
  def send_keys(node, keys); end

  # source://cuprite//lib/capybara/cuprite/page.rb#30
  def set(node, value); end

  # source://cuprite//lib/capybara/cuprite/page.rb#118
  def switch_to_frame(handle); end

  # source://cuprite//lib/capybara/cuprite/page.rb#133
  def title; end

  # source://cuprite//lib/capybara/cuprite/page.rb#39
  def trigger(node, event); end

  # source://cuprite//lib/capybara/cuprite/page.rb#18
  def xpath(*args, **_arg1, &block); end

  private

  # source://cuprite//lib/capybara/cuprite/page.rb#184
  def active_frame; end

  # source://cuprite//lib/capybara/cuprite/page.rb#176
  def find_position(node, **options); end

  # source://cuprite//lib/capybara/cuprite/page.rb#143
  def prepare_page; end
end

# source://cuprite//lib/capybara/cuprite/page.rb#14
Capybara::Cuprite::Page::MODAL_WAIT = T.let(T.unsafe(nil), Float)

# source://cuprite//lib/capybara/cuprite/page.rb#15
Capybara::Cuprite::Page::TRIGGER_CLICK_WAIT = T.let(T.unsafe(nil), Float)

# source://cuprite//lib/capybara/cuprite/options.rb#3
module Ferrum; end

# source://cuprite//lib/capybara/cuprite/options.rb#4
class Ferrum::Browser; end

# source://cuprite//lib/capybara/cuprite/options.rb#5
class Ferrum::Browser::Options
  # source://cuprite//lib/capybara/cuprite/options.rb#9
  def reset_window_size; end

  # Returns the value of attribute url_blacklist.
  #
  # source://cuprite//lib/capybara/cuprite/options.rb#7
  def url_blacklist; end

  # Sets the attribute url_blacklist
  #
  # @param value the value to set the attribute url_blacklist to.
  #
  # source://cuprite//lib/capybara/cuprite/options.rb#7
  def url_blacklist=(_arg0); end

  # Returns the value of attribute url_whitelist.
  #
  # source://cuprite//lib/capybara/cuprite/options.rb#7
  def url_whitelist; end

  # Sets the attribute url_whitelist
  #
  # @param value the value to set the attribute url_whitelist to.
  #
  # source://cuprite//lib/capybara/cuprite/options.rb#7
  def url_whitelist=(_arg0); end

  # Sets the attribute window_size
  #
  # @param value the value to set the attribute window_size to.
  #
  # source://cuprite//lib/capybara/cuprite/options.rb#6
  def window_size=(_arg0); end
end

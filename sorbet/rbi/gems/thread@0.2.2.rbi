# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `thread` gem.
# Please instead update this file by running `bin/tapioca gem thread`.

class Thread
  class << self
    # Helper to create a pool.
    def pool(*args, &block); end
  end
end

# A pool is a container of a limited amount of threads to which you can add
# tasks to run.
#
# This is usually more performant and less memory intensive than creating a
# new thread for every task.
class Thread::Pool
  # Create the pool with minimum and maximum threads.
  #
  # The pool will start with the minimum amount of threads created and will
  # spawn new threads until the max is reached in case of need.
  #
  # A default block can be passed, which will be used to {#process} the passed
  # data.
  #
  # @return [Pool] a new instance of Pool
  def initialize(min, max = T.unsafe(nil), &block); end

  # Add a task to the pool which will execute the block with the given
  # argument.
  #
  # If no block is passed the default block will be used if present, an
  # ArgumentError will be raised otherwise.
  def <<(*args, &block); end

  # Enable auto trimming, unneeded threads will be deleted until the minimum
  # is reached.
  def auto_trim!; end

  # Check if auto trimming is enabled.
  #
  # @return [Boolean]
  def auto_trim?; end

  # Get the amount of tasks that still have to be run.
  def backlog; end

  # Are all tasks consumed?
  #
  # @return [Boolean]
  def done?; end

  # Check if there are idle workers.
  #
  # @return [Boolean]
  def idle?; end

  # Enable idle trimming. Unneeded threads will be deleted after the given number of seconds of inactivity.
  # The minimum number of threads is respeced.
  def idle_trim!(timeout); end

  # Check if idle trimming is enabled.
  #
  # @return [Boolean]
  def idle_trim?; end

  # Returns the value of attribute max.
  def max; end

  # Returns the value of attribute min.
  def min; end

  # Disable auto trimming.
  def no_auto_trim!; end

  # Turn of idle trimming.
  def no_idle_trim!; end

  # Add a task to the pool which will execute the block with the given
  # argument.
  #
  # If no block is passed the default block will be used if present, an
  # ArgumentError will be raised otherwise.
  def process(*args, &block); end

  # Resize the pool with the passed arguments.
  def resize(min, max = T.unsafe(nil)); end

  # Shut down the pool, it will block until all tasks have finished running.
  def shutdown; end

  # Shut down the pool instantly without finishing to execute tasks.
  def shutdown!; end

  # Check if the pool has been shut down.
  #
  # @return [Boolean]
  def shutdown?; end

  # Shutdown the pool after a given amount of time.
  def shutdown_after(timeout); end

  # Returns the value of attribute spawned.
  def spawned; end

  # Trim the unused threads, if forced threads will be trimmed even if there
  # are tasks waiting.
  def trim(force = T.unsafe(nil)); end

  # Force #{trim}.
  def trim!; end

  # Wait until all tasks are consumed. The caller will be blocked until then.
  def wait(what = T.unsafe(nil)); end

  # Returns the value of attribute waiting.
  def waiting; end

  private

  # @return [Boolean]
  def _done?; end

  # @return [Boolean]
  def _idle?; end

  def done!; end
  def spawn_thread; end
  def spawn_timeout_thread; end
  def timeout_for(task, timeout); end
  def wake_up_timeout; end

  class << self
    # If true, tasks will allow raised exceptions to pass through.
    #
    # Similar to Thread.abort_on_exception
    def abort_on_exception; end

    # If true, tasks will allow raised exceptions to pass through.
    #
    # Similar to Thread.abort_on_exception
    def abort_on_exception=(_arg0); end
  end
end

# A task incapsulates a block being ran by the pool and the arguments to pass
# to it.
class Thread::Pool::Task
  # Create a task in the given pool which will pass the arguments to the
  # block.
  #
  # @return [Task] a new instance of Task
  def initialize(pool, *args, &block); end

  # Returns the value of attribute exception.
  def exception; end

  # Execute the task.
  def execute; end

  # @return [Boolean]
  def finished?; end

  # Returns the value of attribute pool.
  def pool; end

  # Raise an exception in the thread used by the task.
  def raise(exception); end

  # Returns the value of attribute result.
  def result; end

  # @return [Boolean]
  def running?; end

  # Returns the value of attribute started_at.
  def started_at; end

  # Terminate the exception with an optionally given exception.
  def terminate!(exception = T.unsafe(nil)); end

  # @return [Boolean]
  def terminated?; end

  # Returns the value of attribute thread.
  def thread; end

  # Returns the value of attribute timeout.
  def timeout; end

  # Force the task to timeout.
  def timeout!; end

  # @return [Boolean]
  def timeout?; end

  # Timeout the task after the given time.
  def timeout_after(time); end
end

class Thread::Pool::Task::Asked < ::Exception; end
class Thread::Pool::Task::Timeout < ::Exception; end

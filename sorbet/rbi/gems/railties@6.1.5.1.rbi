# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `railties` gem.
# Please instead update this file by running `bin/tapioca gem railties`.

module ActionController::Base::HelperMethods
  def alert(*args, &block); end
  def combined_fragment_cache_key(*args, &block); end
  def content_security_policy?(*args, &block); end
  def content_security_policy_nonce(*args, &block); end
  def cookies(*args, &block); end
  def form_authenticity_token(*args, &block); end
  def notice(*args, &block); end
  def protect_against_forgery?(*args, &block); end
  def view_cache_dependencies(*args, &block); end
end

module Rails
  extend ::ActiveSupport::Autoload

  class << self
    # Returns the value of attribute app_class.
    def app_class; end

    # Sets the attribute app_class
    #
    # @param value the value to set the attribute app_class to.
    def app_class=(_arg0); end

    def application; end

    # Sets the attribute application
    #
    # @param value the value to set the attribute application to.
    def application=(_arg0); end

    def autoloaders; end
    def backtrace_cleaner; end

    # Returns the value of attribute cache.
    def cache; end

    # Sets the attribute cache
    #
    # @param value the value to set the attribute cache to.
    def cache=(_arg0); end

    # The Configuration instance used to configure the Rails environment
    def configuration; end

    # Returns the current Rails environment.
    #
    #   Rails.env # => "development"
    #   Rails.env.development? # => true
    #   Rails.env.production? # => false
    def env; end

    # Sets the Rails environment.
    #
    #   Rails.env = "staging" # => "staging"
    def env=(environment); end

    # Returns the version of the currently loaded Rails as a <tt>Gem::Version</tt>
    def gem_version; end

    # Returns all Rails groups for loading based on:
    #
    # * The Rails environment;
    # * The environment variable RAILS_GROUPS;
    # * The optional envs given as argument and the hash with group dependencies;
    #
    #  Rails.groups assets: [:development, :test]
    #  # => [:default, "development", :assets] for Rails.env == "development"
    #  # => [:default, "production"]           for Rails.env == "production"
    def groups(*groups); end

    def initialize!(*_arg0, &_arg1); end
    def initialized?(*_arg0, &_arg1); end

    # Returns the value of attribute logger.
    def logger; end

    # Sets the attribute logger
    #
    # @param value the value to set the attribute logger to.
    def logger=(_arg0); end

    # Returns a Pathname object of the public folder of the current
    # Rails project, otherwise it returns +nil+ if there is no project:
    #
    #   Rails.public_path
    #     # => #<Pathname:/Users/someuser/some/path/project/public>
    def public_path; end

    # Returns a Pathname object of the current Rails project,
    # otherwise it returns +nil+ if there is no project:
    #
    #   Rails.root
    #     # => #<Pathname:/Users/someuser/some/path/project>
    def root; end

    # Returns the version of the currently loaded Rails as a string.
    def version; end
  end
end

# An Engine with the responsibility of coordinating the whole boot process.
#
# == Initialization
#
# Rails::Application is responsible for executing all railties and engines
# initializers. It also executes some bootstrap initializers (check
# Rails::Application::Bootstrap) and finishing initializers, after all the others
# are executed (check Rails::Application::Finisher).
#
# == Configuration
#
# Besides providing the same configuration as Rails::Engine and Rails::Railtie,
# the application object has several specific configurations, for example
# "cache_classes", "consider_all_requests_local", "filter_parameters",
# "logger" and so forth.
#
# Check Rails::Application::Configuration to see them all.
#
# == Routes
#
# The application object is also responsible for holding the routes and reloading routes
# whenever the files change in development.
#
# == Middlewares
#
# The Application is also responsible for building the middleware stack.
#
# == Booting process
#
# The application is also responsible for setting up and executing the booting
# process. From the moment you require "config/application.rb" in your app,
# the booting process goes like this:
#
#   1)  require "config/boot.rb" to set up load paths
#   2)  require railties and engines
#   3)  Define Rails.application as "class MyApp::Application < Rails::Application"
#   4)  Run config.before_configuration callbacks
#   5)  Load config/environments/ENV.rb
#   6)  Run config.before_initialize callbacks
#   7)  Run Railtie#initializer defined by railties, engines and application.
#       One by one, each engine sets up its load paths, routes and runs its config/initializers/* files.
#   8)  Custom Railtie#initializers added by railties, engines and applications are executed
#   9)  Build the middleware stack and run to_prepare callbacks
#   10) Run config.before_eager_load and eager_load! if eager_load is true
#   11) Run config.after_initialize callbacks
#
# == Multiple Applications
#
# If you decide to define multiple applications, then the first application
# that is initialized will be set to +Rails.application+, unless you override
# it with a different application.
#
# To create a new application, you can instantiate a new instance of a class
# that has already been created:
#
#   class Application < Rails::Application
#   end
#
#   first_application  = Application.new
#   second_application = Application.new(config: first_application.config)
#
# In the above example, the configuration from the first application was used
# to initialize the second application. You can also use the +initialize_copy+
# on one of the applications to create a copy of the application which shares
# the configuration.
#
# If you decide to define Rake tasks, runners, or initializers in an
# application other than +Rails.application+, then you must run them manually.
class Rails::Application < ::Rails::Engine
  # @return [Application] a new instance of Application
  def initialize(initial_variable_values = T.unsafe(nil), &block); end

  # Returns the value of attribute assets.
  def assets; end

  # Sets the attribute assets
  #
  # @param value the value to set the attribute assets to.
  def assets=(_arg0); end

  def build_middleware_stack; end
  def config; end

  # Sets the attribute config
  #
  # @param value the value to set the attribute config to.
  def config=(_arg0); end

  # Convenience for loading config/foo.yml for the current Rails env.
  #
  # Examples:
  #
  #     # config/exception_notification.yml:
  #     production:
  #       url: http://127.0.0.1:8080
  #       namespace: my_app_production
  #
  #     development:
  #       url: http://localhost:3001
  #       namespace: my_app_development
  #
  #     # config/environments/production.rb
  #     Rails.application.configure do
  #       config.middleware.use ExceptionNotifier, config_for(:exception_notification)
  #     end
  #
  #     # You can also store configurations in a shared section which will be
  #     # merged with the environment configuration
  #
  #     # config/example.yml
  #     shared:
  #       foo:
  #         bar:
  #           baz: 1
  #
  #     development:
  #       foo:
  #         bar:
  #           qux: 2
  #
  #     # development environment
  #     Rails.application.config_for(:example)[:foo][:bar]
  #     # => { baz: 1, qux: 2 }
  def config_for(name, env: T.unsafe(nil)); end

  # Sends any console called in the instance of a new application up
  # to the +console+ method defined in Rails::Railtie.
  def console(&blk); end

  # Decrypts the credentials hash as kept in +config/credentials.yml.enc+. This file is encrypted with
  # the Rails master key, which is either taken from <tt>ENV["RAILS_MASTER_KEY"]</tt> or from loading
  # +config/master.key+.
  # If specific credentials file exists for current environment, it takes precedence, thus for +production+
  # environment look first for +config/credentials/production.yml.enc+ with master key taken
  # from <tt>ENV["RAILS_MASTER_KEY"]</tt> or from loading +config/credentials/production.key+.
  # Default behavior can be overwritten by setting +config.credentials.content_path+ and +config.credentials.key_path+.
  def credentials; end

  # Sets the attribute credentials
  #
  # @param value the value to set the attribute credentials to.
  def credentials=(_arg0); end

  def default_url_options(*_arg0, &_arg1); end
  def default_url_options=(arg); end

  # Eager loads the application code.
  def eager_load!; end

  # Shorthand to decrypt any encrypted configurations or files.
  #
  # For any file added with <tt>rails encrypted:edit</tt> call +read+ to decrypt
  # the file with the master key.
  # The master key is either stored in +config/master.key+ or <tt>ENV["RAILS_MASTER_KEY"]</tt>.
  #
  #   Rails.application.encrypted("config/mystery_man.txt.enc").read
  #   # => "We've met before, haven't we?"
  #
  # It's also possible to interpret encrypted YAML files with +config+.
  #
  #   Rails.application.encrypted("config/credentials.yml.enc").config
  #   # => { next_guys_line: "I don't think so. Where was it you think we met?" }
  #
  # Any top-level configs are also accessible directly on the return value:
  #
  #   Rails.application.encrypted("config/credentials.yml.enc").next_guys_line
  #   # => "I don't think so. Where was it you think we met?"
  #
  # The files or configs can also be encrypted with a custom key. To decrypt with
  # a key in the +ENV+, use:
  #
  #   Rails.application.encrypted("config/special_tokens.yml.enc", env_key: "SPECIAL_TOKENS")
  #
  # Or to decrypt with a file, that should be version control ignored, relative to +Rails.root+:
  #
  #   Rails.application.encrypted("config/special_tokens.yml.enc", key_path: "config/special_tokens.key")
  def encrypted(path, key_path: T.unsafe(nil), env_key: T.unsafe(nil)); end

  # Stores some of the Rails initial environment parameters which
  # will be used by middlewares and engines to configure themselves.
  def env_config; end

  # Returns the value of attribute executor.
  def executor; end

  # Sends any generators called in the instance of a new application up
  # to the +generators+ method defined in Rails::Railtie.
  def generators(&blk); end

  def helpers_paths; end

  # Initialize the application passing the given group. By default, the
  # group is :default
  def initialize!(group = T.unsafe(nil)); end

  # Returns true if the application is initialized.
  #
  # @return [Boolean]
  def initialized?; end

  # Sends the initializers to the +initializer+ method defined in the
  # Rails::Initializable module. Each Rails::Application class has its own
  # set of initializers, as defined by the Initializable module.
  def initializer(name, opts = T.unsafe(nil), &block); end

  def initializers; end

  # Sends the +isolate_namespace+ method up to the class method.
  def isolate_namespace(mod); end

  # Returns the application's KeyGenerator
  def key_generator; end

  # Returns a message verifier object.
  #
  # This verifier can be used to generate and verify signed messages in the application.
  #
  # It is recommended not to use the same verifier for different things, so you can get different
  # verifiers passing the +verifier_name+ argument.
  #
  # ==== Parameters
  #
  # * +verifier_name+ - the name of the message verifier.
  #
  # ==== Examples
  #
  #     message = Rails.application.message_verifier('sensitive_data').generate('my sensible data')
  #     Rails.application.message_verifier('sensitive_data').verify(message)
  #     # => 'my sensible data'
  #
  # See the +ActiveSupport::MessageVerifier+ documentation for more information.
  def message_verifier(verifier_name); end

  # Return an array of railties respecting the order they're loaded
  # and the order specified by the +railties_order+ config.
  #
  # While running initializers we need engines in reverse order here when
  # copying migrations from railties ; we need them in the order given by
  # +railties_order+.
  def migration_railties; end

  # If you try to define a set of Rake tasks on the instance, these will get
  # passed up to the Rake tasks defined on the application's class.
  def rake_tasks(&block); end

  # Reload application routes regardless if they changed or not.
  def reload_routes!; end

  # Returns the value of attribute reloader.
  def reloader; end

  # Returns the value of attribute reloaders.
  def reloaders; end

  def require_environment!; end
  def routes_reloader; end
  def run_load_hooks!; end

  # Sends any runner called in the instance of a new application up
  # to the +runner+ method defined in Rails::Railtie.
  def runner(&blk); end

  # Returns the value of attribute sandbox.
  def sandbox; end

  # Sets the attribute sandbox
  #
  # @param value the value to set the attribute sandbox to.
  def sandbox=(_arg0); end

  # Returns the value of attribute sandbox.
  def sandbox?; end

  # The secret_key_base is used as the input secret to the application's key generator, which in turn
  # is used to create all MessageVerifiers/MessageEncryptors, including the ones that sign and encrypt cookies.
  #
  # In development and test, this is randomly generated and stored in a
  # temporary file in <tt>tmp/development_secret.txt</tt>.
  #
  # In all other environments, we look for it first in ENV["SECRET_KEY_BASE"],
  # then credentials.secret_key_base, and finally secrets.secret_key_base. For most applications,
  # the correct place to store it is in the encrypted credentials file.
  def secret_key_base; end

  def secrets; end

  # Sets the attribute secrets
  #
  # @param value the value to set the attribute secrets to.
  def secrets=(_arg0); end

  # Sends any server called in the instance of a new application up
  # to the +server+ method defined in Rails::Railtie.
  def server(&blk); end

  def to_app; end

  # Returns an array of file paths appended with a hash of
  # directories-extensions suitable for ActiveSupport::FileUpdateChecker
  # API.
  def watchable_args; end

  protected

  def default_middleware_stack; end

  # Returns the ordered railties for this application considering railties_order.
  def ordered_railties; end

  def railties_initializers(current); end
  def run_console_blocks(app); end
  def run_generators_blocks(app); end
  def run_runner_blocks(app); end
  def run_server_blocks(app); end
  def run_tasks_blocks(app); end
  def validate_secret_key_base(secret_key_base); end

  private

  def build_middleware; end
  def build_request(env); end
  def coerce_same_site_protection(protection); end
  def generate_development_secret; end

  class << self
    # This method is called just after an application inherits from Rails::Application,
    # allowing the developer to load classes in lib and use them during application
    # configuration.
    #
    #   class MyApplication < Rails::Application
    #     require "my_backend" # in lib/my_backend
    #     config.i18n.backend = MyBackend
    #   end
    #
    # Notice this method takes into consideration the default root path. So if you
    # are changing config.root inside your application definition or having a custom
    # Rails application, you will need to add lib to $LOAD_PATH on your own in case
    # you need to load files in lib/ during the application configuration as well.
    def add_lib_to_load_path!(root); end

    def create(initial_variable_values = T.unsafe(nil), &block); end
    def find_root(from); end

    # @private
    def inherited(base); end

    def instance; end
  end
end

module Rails::Application::Bootstrap
  include ::Rails::Initializable
  extend ::Rails::Initializable::ClassMethods
end

class Rails::Application::Configuration < ::Rails::Engine::Configuration
  # @return [Configuration] a new instance of Configuration
  def initialize(*_arg0); end

  # Returns the value of attribute add_autoload_paths_to_load_path.
  def add_autoload_paths_to_load_path; end

  # Sets the attribute add_autoload_paths_to_load_path
  #
  # @param value the value to set the attribute add_autoload_paths_to_load_path to.
  def add_autoload_paths_to_load_path=(_arg0); end

  # Returns the value of attribute allow_concurrency.
  def allow_concurrency; end

  # Sets the attribute allow_concurrency
  #
  # @param value the value to set the attribute allow_concurrency to.
  def allow_concurrency=(_arg0); end

  def annotations; end

  # Returns the value of attribute api_only.
  def api_only; end

  def api_only=(value); end

  # Returns the value of attribute asset_host.
  def asset_host; end

  # Sets the attribute asset_host
  #
  # @param value the value to set the attribute asset_host to.
  def asset_host=(_arg0); end

  # Returns the value of attribute autoflush_log.
  def autoflush_log; end

  # Sets the attribute autoflush_log
  #
  # @param value the value to set the attribute autoflush_log to.
  def autoflush_log=(_arg0); end

  # Returns the value of attribute autoloader.
  def autoloader; end

  def autoloader=(autoloader); end

  # Returns the value of attribute beginning_of_week.
  def beginning_of_week; end

  # Sets the attribute beginning_of_week
  #
  # @param value the value to set the attribute beginning_of_week to.
  def beginning_of_week=(_arg0); end

  # Returns the value of attribute cache_classes.
  def cache_classes; end

  # Sets the attribute cache_classes
  #
  # @param value the value to set the attribute cache_classes to.
  def cache_classes=(_arg0); end

  # Returns the value of attribute cache_store.
  def cache_store; end

  # Sets the attribute cache_store
  #
  # @param value the value to set the attribute cache_store to.
  def cache_store=(_arg0); end

  def colorize_logging; end
  def colorize_logging=(val); end

  # Returns the value of attribute consider_all_requests_local.
  def consider_all_requests_local; end

  # Sets the attribute consider_all_requests_local
  #
  # @param value the value to set the attribute consider_all_requests_local to.
  def consider_all_requests_local=(_arg0); end

  # Returns the value of attribute console.
  def console; end

  # Sets the attribute console
  #
  # @param value the value to set the attribute console to.
  def console=(_arg0); end

  def content_security_policy(&block); end

  # Returns the value of attribute content_security_policy_nonce_directives.
  def content_security_policy_nonce_directives; end

  # Sets the attribute content_security_policy_nonce_directives
  #
  # @param value the value to set the attribute content_security_policy_nonce_directives to.
  def content_security_policy_nonce_directives=(_arg0); end

  # Returns the value of attribute content_security_policy_nonce_generator.
  def content_security_policy_nonce_generator; end

  # Sets the attribute content_security_policy_nonce_generator
  #
  # @param value the value to set the attribute content_security_policy_nonce_generator to.
  def content_security_policy_nonce_generator=(_arg0); end

  # Returns the value of attribute content_security_policy_report_only.
  def content_security_policy_report_only; end

  # Sets the attribute content_security_policy_report_only
  #
  # @param value the value to set the attribute content_security_policy_report_only to.
  def content_security_policy_report_only=(_arg0); end

  # Returns the value of attribute credentials.
  def credentials; end

  # Sets the attribute credentials
  #
  # @param value the value to set the attribute credentials to.
  def credentials=(_arg0); end

  # Loads and returns the entire raw configuration of database from
  # values stored in <tt>config/database.yml</tt>.
  def database_configuration; end

  def debug_exception_response_format; end

  # Sets the attribute debug_exception_response_format
  #
  # @param value the value to set the attribute debug_exception_response_format to.
  def debug_exception_response_format=(_arg0); end

  def default_log_file; end

  # Returns the value of attribute disable_sandbox.
  def disable_sandbox; end

  # Sets the attribute disable_sandbox
  #
  # @param value the value to set the attribute disable_sandbox to.
  def disable_sandbox=(_arg0); end

  # Returns the value of attribute eager_load.
  def eager_load; end

  # Sets the attribute eager_load
  #
  # @param value the value to set the attribute eager_load to.
  def eager_load=(_arg0); end

  # Returns the value of attribute enable_dependency_loading.
  def enable_dependency_loading; end

  # Sets the attribute enable_dependency_loading
  #
  # @param value the value to set the attribute enable_dependency_loading to.
  def enable_dependency_loading=(_arg0); end

  # Returns the value of attribute encoding.
  def encoding; end

  def encoding=(value); end

  # Returns the value of attribute exceptions_app.
  def exceptions_app; end

  # Sets the attribute exceptions_app
  #
  # @param value the value to set the attribute exceptions_app to.
  def exceptions_app=(_arg0); end

  # Returns the value of attribute file_watcher.
  def file_watcher; end

  # Sets the attribute file_watcher
  #
  # @param value the value to set the attribute file_watcher to.
  def file_watcher=(_arg0); end

  # Returns the value of attribute filter_parameters.
  def filter_parameters; end

  # Sets the attribute filter_parameters
  #
  # @param value the value to set the attribute filter_parameters to.
  def filter_parameters=(_arg0); end

  # Returns the value of attribute filter_redirect.
  def filter_redirect; end

  # Sets the attribute filter_redirect
  #
  # @param value the value to set the attribute filter_redirect to.
  def filter_redirect=(_arg0); end

  # Returns the value of attribute force_ssl.
  def force_ssl; end

  # Sets the attribute force_ssl
  #
  # @param value the value to set the attribute force_ssl to.
  def force_ssl=(_arg0); end

  # Returns the value of attribute helpers_paths.
  def helpers_paths; end

  # Sets the attribute helpers_paths
  #
  # @param value the value to set the attribute helpers_paths to.
  def helpers_paths=(_arg0); end

  # Returns the value of attribute host_authorization.
  def host_authorization; end

  # Sets the attribute host_authorization
  #
  # @param value the value to set the attribute host_authorization to.
  def host_authorization=(_arg0); end

  # Returns the value of attribute hosts.
  def hosts; end

  # Sets the attribute hosts
  #
  # @param value the value to set the attribute hosts to.
  def hosts=(_arg0); end

  # Load the database YAML without evaluating ERB. This allows us to
  # create the rake tasks for multiple databases without filling in the
  # configuration values or loading the environment. Do not use this
  # method.
  #
  # This uses a DummyERB custom compiler so YAML can ignore the ERB
  # tags and load the database.yml for the rake tasks.
  def load_database_yaml; end

  # Loads default configurations. See {the result of the method for each version}[https://guides.rubyonrails.org/configuring.html#results-of-config-load-defaults].
  def load_defaults(target_version); end

  # Returns the value of attribute loaded_config_version.
  def loaded_config_version; end

  # Returns the value of attribute log_formatter.
  def log_formatter; end

  # Sets the attribute log_formatter
  #
  # @param value the value to set the attribute log_formatter to.
  def log_formatter=(_arg0); end

  # Returns the value of attribute log_level.
  def log_level; end

  # Sets the attribute log_level
  #
  # @param value the value to set the attribute log_level to.
  def log_level=(_arg0); end

  # Returns the value of attribute log_tags.
  def log_tags; end

  # Sets the attribute log_tags
  #
  # @param value the value to set the attribute log_tags to.
  def log_tags=(_arg0); end

  # Returns the value of attribute logger.
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  def logger=(_arg0); end

  def paths; end
  def permissions_policy(&block); end

  # Returns the value of attribute public_file_server.
  def public_file_server; end

  # Sets the attribute public_file_server
  #
  # @param value the value to set the attribute public_file_server to.
  def public_file_server=(_arg0); end

  # Returns the value of attribute railties_order.
  def railties_order; end

  # Sets the attribute railties_order
  #
  # @param value the value to set the attribute railties_order to.
  def railties_order=(_arg0); end

  # Returns the value of attribute rake_eager_load.
  def rake_eager_load; end

  # Sets the attribute rake_eager_load
  #
  # @param value the value to set the attribute rake_eager_load to.
  def rake_eager_load=(_arg0); end

  # Returns the value of attribute read_encrypted_secrets.
  def read_encrypted_secrets; end

  # Sets the attribute read_encrypted_secrets
  #
  # @param value the value to set the attribute read_encrypted_secrets to.
  def read_encrypted_secrets=(_arg0); end

  # Returns the value of attribute relative_url_root.
  def relative_url_root; end

  # Sets the attribute relative_url_root
  #
  # @param value the value to set the attribute relative_url_root to.
  def relative_url_root=(_arg0); end

  # Returns the value of attribute reload_classes_only_on_change.
  def reload_classes_only_on_change; end

  # Sets the attribute reload_classes_only_on_change
  #
  # @param value the value to set the attribute reload_classes_only_on_change to.
  def reload_classes_only_on_change=(_arg0); end

  # Returns the value of attribute require_master_key.
  def require_master_key; end

  # Sets the attribute require_master_key
  #
  # @param value the value to set the attribute require_master_key to.
  def require_master_key=(_arg0); end

  # Returns the value of attribute secret_key_base.
  def secret_key_base; end

  # Sets the attribute secret_key_base
  #
  # @param value the value to set the attribute secret_key_base to.
  def secret_key_base=(_arg0); end

  # Returns the value of attribute session_options.
  def session_options; end

  # Sets the attribute session_options
  #
  # @param value the value to set the attribute session_options to.
  def session_options=(_arg0); end

  def session_store(new_session_store = T.unsafe(nil), **options); end

  # @return [Boolean]
  def session_store?; end

  # Returns the value of attribute ssl_options.
  def ssl_options; end

  # Sets the attribute ssl_options
  #
  # @param value the value to set the attribute ssl_options to.
  def ssl_options=(_arg0); end

  # Returns the value of attribute time_zone.
  def time_zone; end

  # Sets the attribute time_zone
  #
  # @param value the value to set the attribute time_zone to.
  def time_zone=(_arg0); end

  # Returns the value of attribute x.
  def x; end

  # Sets the attribute x
  #
  # @param value the value to set the attribute x to.
  def x=(_arg0); end

  private

  # @return [Boolean]
  def credentials_available_for_current_env?; end

  def default_credentials_content_path; end
  def default_credentials_key_path; end
end

class Rails::Application::Configuration::Custom
  # @return [Custom] a new instance of Custom
  def initialize; end

  def method_missing(method, *args); end

  private

  # @return [Boolean]
  def respond_to_missing?(symbol, *_arg1); end
end

class Rails::Application::DefaultMiddlewareStack
  # @return [DefaultMiddlewareStack] a new instance of DefaultMiddlewareStack
  def initialize(app, config, paths); end

  # Returns the value of attribute app.
  def app; end

  def build_stack; end

  # Returns the value of attribute config.
  def config; end

  # Returns the value of attribute paths.
  def paths; end

  private

  def load_rack_cache; end
  def show_exceptions_app; end
end

module Rails::Application::Finisher
  include ::Rails::Initializable
  extend ::Rails::Initializable::ClassMethods
end

module Rails::Application::Finisher::InterlockHook
  class << self
    def complete(_state); end
    def run; end
  end
end

class Rails::Application::Finisher::MutexHook
  # @return [MutexHook] a new instance of MutexHook
  def initialize(mutex = T.unsafe(nil)); end

  def complete(_state); end
  def run; end
end

Rails::Application::INITIAL_VARIABLES = T.let(T.unsafe(nil), Array)

class Rails::Application::RoutesReloader
  # @return [RoutesReloader] a new instance of RoutesReloader
  def initialize; end

  # Returns the value of attribute eager_load.
  def eager_load; end

  # Sets the attribute eager_load
  #
  # @param value the value to set the attribute eager_load to.
  def eager_load=(_arg0); end

  def execute(*_arg0, &_arg1); end
  def execute_if_updated(*_arg0, &_arg1); end

  # Returns the value of attribute external_routes.
  def external_routes; end

  # Returns the value of attribute paths.
  def paths; end

  def reload!; end

  # Returns the value of attribute route_sets.
  def route_sets; end

  def updated?(*_arg0, &_arg1); end

  private

  def clear!; end
  def finalize!; end
  def load_paths; end
  def revert; end
  def updater; end
end

class Rails::ApplicationController < ::ActionController::Base
  private

  def _layout(lookup_context, formats); end
  def disable_content_security_policy_nonce!; end

  # @return [Boolean]
  def local_request?; end

  def require_local!; end

  class << self
    def __callbacks; end
    def _layout; end
    def _layout_conditions; end
    def middleware_stack; end
  end
end

module Rails::Autoloaders
  extend ::Enumerable

  class << self
    def each; end
    def log!; end
    def logger=(logger); end
    def main; end
    def once; end

    # @return [Boolean]
    def zeitwerk_enabled?; end
  end
end

module Rails::Configuration; end

class Rails::Configuration::Generators
  # @return [Generators] a new instance of Generators
  def initialize; end

  def after_generate(&block); end

  # Returns the value of attribute after_generate_callbacks.
  def after_generate_callbacks; end

  # Returns the value of attribute aliases.
  def aliases; end

  # Sets the attribute aliases
  #
  # @param value the value to set the attribute aliases to.
  def aliases=(_arg0); end

  # Returns the value of attribute api_only.
  def api_only; end

  # Sets the attribute api_only
  #
  # @param value the value to set the attribute api_only to.
  def api_only=(_arg0); end

  # Returns the value of attribute colorize_logging.
  def colorize_logging; end

  # Sets the attribute colorize_logging
  #
  # @param value the value to set the attribute colorize_logging to.
  def colorize_logging=(_arg0); end

  # Returns the value of attribute fallbacks.
  def fallbacks; end

  # Sets the attribute fallbacks
  #
  # @param value the value to set the attribute fallbacks to.
  def fallbacks=(_arg0); end

  # Returns the value of attribute hidden_namespaces.
  def hidden_namespaces; end

  def hide_namespace(namespace); end
  def method_missing(method, *args); end

  # Returns the value of attribute options.
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  def options=(_arg0); end

  # Returns the value of attribute templates.
  def templates; end

  # Sets the attribute templates
  #
  # @param value the value to set the attribute templates to.
  def templates=(_arg0); end

  private

  def initialize_copy(source); end
end

# MiddlewareStackProxy is a proxy for the Rails middleware stack that allows
# you to configure middlewares in your application. It works basically as a
# command recorder, saving each command to be applied after initialization
# over the default middleware stack, so you can add, swap, or remove any
# middleware in Rails.
#
# You can add your own middlewares by using the +config.middleware.use+ method:
#
#     config.middleware.use Magical::Unicorns
#
# This will put the <tt>Magical::Unicorns</tt> middleware on the end of the stack.
# You can use +insert_before+ if you wish to add a middleware before another:
#
#     config.middleware.insert_before Rack::Head, Magical::Unicorns
#
# There's also +insert_after+ which will insert a middleware after another:
#
#     config.middleware.insert_after Rack::Head, Magical::Unicorns
#
# Middlewares can also be completely swapped out and replaced with others:
#
#     config.middleware.swap ActionDispatch::Flash, Magical::Unicorns
#
# Middlewares can be moved from one place to another:
#
#     config.middleware.move_before ActionDispatch::Flash, Magical::Unicorns
#
# This will move the <tt>Magical::Unicorns</tt> middleware before the
# <tt>ActionDispatch::Flash</tt>. You can also move it after:
#
#     config.middleware.move_after ActionDispatch::Flash, Magical::Unicorns
#
# And finally they can also be removed from the stack completely:
#
#     config.middleware.delete ActionDispatch::Flash
class Rails::Configuration::MiddlewareStackProxy
  # @return [MiddlewareStackProxy] a new instance of MiddlewareStackProxy
  def initialize(operations = T.unsafe(nil), delete_operations = T.unsafe(nil)); end

  def +(other); end
  def delete(*args, &block); end
  def insert(*args, &block); end
  def insert_after(*args, &block); end
  def insert_before(*args, &block); end
  def merge_into(other); end
  def move(*args, &block); end
  def move_after(*args, &block); end
  def move_before(*args, &block); end
  def swap(*args, &block); end
  def unshift(*args, &block); end
  def use(*args, &block); end

  protected

  # Returns the value of attribute delete_operations.
  def delete_operations; end

  # Returns the value of attribute operations.
  def operations; end
end

# <tt>Rails::Engine</tt> allows you to wrap a specific Rails application or subset of
# functionality and share it with other applications or within a larger packaged application.
# Every <tt>Rails::Application</tt> is just an engine, which allows for simple
# feature and application sharing.
#
# Any <tt>Rails::Engine</tt> is also a <tt>Rails::Railtie</tt>, so the same
# methods (like <tt>rake_tasks</tt> and +generators+) and configuration
# options that are available in railties can also be used in engines.
#
# == Creating an Engine
#
# If you want a gem to behave as an engine, you have to specify an +Engine+
# for it somewhere inside your plugin's +lib+ folder (similar to how we
# specify a +Railtie+):
#
#   # lib/my_engine.rb
#   module MyEngine
#     class Engine < Rails::Engine
#     end
#   end
#
# Then ensure that this file is loaded at the top of your <tt>config/application.rb</tt>
# (or in your +Gemfile+) and it will automatically load models, controllers and helpers
# inside +app+, load routes at <tt>config/routes.rb</tt>, load locales at
# <tt>config/locales/*</tt>, and load tasks at <tt>lib/tasks/*</tt>.
#
# == Configuration
#
# Like railties, engines can access a config object which contains configuration shared by
# all railties and the application.
# Additionally, each engine can access <tt>autoload_paths</tt>, <tt>eager_load_paths</tt> and
# <tt>autoload_once_paths</tt> settings which are scoped to that engine.
#
#   class MyEngine < Rails::Engine
#     # Add a load path for this specific Engine
#     config.autoload_paths << File.expand_path("lib/some/path", __dir__)
#
#     initializer "my_engine.add_middleware" do |app|
#       app.middleware.use MyEngine::Middleware
#     end
#   end
#
# == Generators
#
# You can set up generators for engines with <tt>config.generators</tt> method:
#
#   class MyEngine < Rails::Engine
#     config.generators do |g|
#       g.orm             :active_record
#       g.template_engine :erb
#       g.test_framework  :test_unit
#     end
#   end
#
# You can also set generators for an application by using <tt>config.app_generators</tt>:
#
#   class MyEngine < Rails::Engine
#     # note that you can also pass block to app_generators in the same way you
#     # can pass it to generators method
#     config.app_generators.orm :datamapper
#   end
#
# == Paths
#
# Applications and engines have flexible path configuration, meaning that you
# are not required to place your controllers at <tt>app/controllers</tt>, but
# in any place which you find convenient.
#
# For example, let's suppose you want to place your controllers in <tt>lib/controllers</tt>.
# You can set that as an option:
#
#   class MyEngine < Rails::Engine
#     paths["app/controllers"] = "lib/controllers"
#   end
#
# You can also have your controllers loaded from both <tt>app/controllers</tt> and
# <tt>lib/controllers</tt>:
#
#   class MyEngine < Rails::Engine
#     paths["app/controllers"] << "lib/controllers"
#   end
#
# The available paths in an engine are:
#
#   class MyEngine < Rails::Engine
#     paths["app"]                 # => ["app"]
#     paths["app/controllers"]     # => ["app/controllers"]
#     paths["app/helpers"]         # => ["app/helpers"]
#     paths["app/models"]          # => ["app/models"]
#     paths["app/views"]           # => ["app/views"]
#     paths["lib"]                 # => ["lib"]
#     paths["lib/tasks"]           # => ["lib/tasks"]
#     paths["config"]              # => ["config"]
#     paths["config/initializers"] # => ["config/initializers"]
#     paths["config/locales"]      # => ["config/locales"]
#     paths["config/routes.rb"]    # => ["config/routes.rb"]
#   end
#
# The <tt>Application</tt> class adds a couple more paths to this set. And as in your
# <tt>Application</tt>, all folders under +app+ are automatically added to the load path.
# If you have an <tt>app/services</tt> folder for example, it will be added by default.
#
# == Endpoint
#
# An engine can also be a Rack application. It can be useful if you have a Rack application that
# you would like to provide with some of the +Engine+'s features.
#
# To do that, use the +endpoint+ method:
#
#   module MyEngine
#     class Engine < Rails::Engine
#       endpoint MyRackApplication
#     end
#   end
#
# Now you can mount your engine in application's routes:
#
#   Rails.application.routes.draw do
#     mount MyEngine::Engine => "/engine"
#   end
#
# == Middleware stack
#
# As an engine can now be a Rack endpoint, it can also have a middleware
# stack. The usage is exactly the same as in <tt>Application</tt>:
#
#   module MyEngine
#     class Engine < Rails::Engine
#       middleware.use SomeMiddleware
#     end
#   end
#
# == Routes
#
# If you don't specify an endpoint, routes will be used as the default
# endpoint. You can use them just like you use an application's routes:
#
#   # ENGINE/config/routes.rb
#   MyEngine::Engine.routes.draw do
#     get "/" => "posts#index"
#   end
#
# == Mount priority
#
# Note that now there can be more than one router in your application, and it's better to avoid
# passing requests through many routers. Consider this situation:
#
#   Rails.application.routes.draw do
#     mount MyEngine::Engine => "/blog"
#     get "/blog/omg" => "main#omg"
#   end
#
# +MyEngine+ is mounted at <tt>/blog</tt>, and <tt>/blog/omg</tt> points to application's
# controller. In such a situation, requests to <tt>/blog/omg</tt> will go through +MyEngine+,
# and if there is no such route in +Engine+'s routes, it will be dispatched to <tt>main#omg</tt>.
# It's much better to swap that:
#
#   Rails.application.routes.draw do
#     get "/blog/omg" => "main#omg"
#     mount MyEngine::Engine => "/blog"
#   end
#
# Now, +Engine+ will get only requests that were not handled by +Application+.
#
# == Engine name
#
# There are some places where an Engine's name is used:
#
# * routes: when you mount an Engine with <tt>mount(MyEngine::Engine => '/my_engine')</tt>,
#   it's used as default <tt>:as</tt> option
# * rake task for installing migrations <tt>my_engine:install:migrations</tt>
#
# Engine name is set by default based on class name. For <tt>MyEngine::Engine</tt> it will be
# <tt>my_engine_engine</tt>. You can change it manually using the <tt>engine_name</tt> method:
#
#   module MyEngine
#     class Engine < Rails::Engine
#       engine_name "my_engine"
#     end
#   end
#
# == Isolated Engine
#
# Normally when you create controllers, helpers and models inside an engine, they are treated
# as if they were created inside the application itself. This means that all helpers and
# named routes from the application will be available to your engine's controllers as well.
#
# However, sometimes you want to isolate your engine from the application, especially if your engine
# has its own router. To do that, you simply need to call +isolate_namespace+. This method requires
# you to pass a module where all your controllers, helpers and models should be nested to:
#
#   module MyEngine
#     class Engine < Rails::Engine
#       isolate_namespace MyEngine
#     end
#   end
#
# With such an engine, everything that is inside the +MyEngine+ module will be isolated from
# the application.
#
# Consider this controller:
#
#   module MyEngine
#     class FooController < ActionController::Base
#     end
#   end
#
# If the +MyEngine+ engine is marked as isolated, +FooController+ only has
# access to helpers from +MyEngine+, and <tt>url_helpers</tt> from
# <tt>MyEngine::Engine.routes</tt>.
#
# The next thing that changes in isolated engines is the behavior of routes.
# Normally, when you namespace your controllers, you also need to namespace
# the related routes. With an isolated engine, the engine's namespace is
# automatically applied, so you don't need to specify it explicitly in your
# routes:
#
#   MyEngine::Engine.routes.draw do
#     resources :articles
#   end
#
# If +MyEngine+ is isolated, the routes above will point to
# <tt>MyEngine::ArticlesController</tt>. You also don't need to use longer
# URL helpers like +my_engine_articles_path+. Instead, you should simply use
# +articles_path+, like you would do with your main application.
#
# To make this behavior consistent with other parts of the framework,
# isolated engines also have an effect on <tt>ActiveModel::Naming</tt>. In a
# normal Rails app, when you use a namespaced model such as
# <tt>Namespace::Article</tt>, <tt>ActiveModel::Naming</tt> will generate
# names with the prefix "namespace". In an isolated engine, the prefix will
# be omitted in URL helpers and form fields, for convenience.
#
#   polymorphic_url(MyEngine::Article.new)
#   # => "articles_path" # not "my_engine_articles_path"
#
#   form_for(MyEngine::Article.new) do
#     text_field :title # => <input type="text" name="article[title]" id="article_title" />
#   end
#
# Additionally, an isolated engine will set its own name according to its
# namespace, so <tt>MyEngine::Engine.engine_name</tt> will return
# "my_engine". It will also set +MyEngine.table_name_prefix+ to "my_engine_",
# meaning for example that <tt>MyEngine::Article</tt> will use the
# +my_engine_articles+ database table by default.
#
# == Using Engine's routes outside Engine
#
# Since you can now mount an engine inside application's routes, you do not have direct access to +Engine+'s
# <tt>url_helpers</tt> inside +Application+. When you mount an engine in an application's routes, a special helper is
# created to allow you to do that. Consider such a scenario:
#
#   # config/routes.rb
#   Rails.application.routes.draw do
#     mount MyEngine::Engine => "/my_engine", as: "my_engine"
#     get "/foo" => "foo#index"
#   end
#
# Now, you can use the <tt>my_engine</tt> helper inside your application:
#
#   class FooController < ApplicationController
#     def index
#       my_engine.root_url # => /my_engine/
#     end
#   end
#
# There is also a <tt>main_app</tt> helper that gives you access to application's routes inside Engine:
#
#   module MyEngine
#     class BarController
#       def index
#         main_app.foo_path # => /foo
#       end
#     end
#   end
#
# Note that the <tt>:as</tt> option given to mount takes the <tt>engine_name</tt> as default, so most of the time
# you can simply omit it.
#
# Finally, if you want to generate a URL to an engine's route using
# <tt>polymorphic_url</tt>, you also need to pass the engine helper. Let's
# say that you want to create a form pointing to one of the engine's routes.
# All you need to do is pass the helper as the first element in array with
# attributes for URL:
#
#   form_for([my_engine, @user])
#
# This code will use <tt>my_engine.user_path(@user)</tt> to generate the proper route.
#
# == Isolated engine's helpers
#
# Sometimes you may want to isolate engine, but use helpers that are defined for it.
# If you want to share just a few specific helpers you can add them to application's
# helpers in ApplicationController:
#
#   class ApplicationController < ActionController::Base
#     helper MyEngine::SharedEngineHelper
#   end
#
# If you want to include all of the engine's helpers, you can use the #helper method on an engine's
# instance:
#
#   class ApplicationController < ActionController::Base
#     helper MyEngine::Engine.helpers
#   end
#
# It will include all of the helpers from engine's directory. Take into account this does
# not include helpers defined in controllers with helper_method or other similar solutions,
# only helpers defined in the helpers directory will be included.
#
# == Migrations & seed data
#
# Engines can have their own migrations. The default path for migrations is exactly the same
# as in application: <tt>db/migrate</tt>
#
# To use engine's migrations in application you can use the rake task below, which copies them to
# application's dir:
#
#   rake ENGINE_NAME:install:migrations
#
# Note that some of the migrations may be skipped if a migration with the same name already exists
# in application. In such a situation you must decide whether to leave that migration or rename the
# migration in the application and rerun copying migrations.
#
# If your engine has migrations, you may also want to prepare data for the database in
# the <tt>db/seeds.rb</tt> file. You can load that data using the <tt>load_seed</tt> method, e.g.
#
#   MyEngine::Engine.load_seed
#
# == Loading priority
#
# In order to change engine's priority you can use +config.railties_order+ in the main application.
# It will affect the priority of loading views, helpers, assets, and all the other files
# related to engine or application.
#
#   # load Blog::Engine with highest priority, followed by application and other railties
#   config.railties_order = [Blog::Engine, :main_app, :all]
class Rails::Engine < ::Rails::Railtie
  include ::ActiveSupport::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods

  # @return [Engine] a new instance of Engine
  def initialize; end

  def __callbacks; end
  def __callbacks?; end
  def _load_seed_callbacks; end
  def _run_load_seed_callbacks(&block); end

  # Returns the underlying Rack application for this engine.
  def app; end

  # Define the Rack API for this engine.
  def call(env); end

  # Define the configuration object for the engine.
  def config; end

  def eager_load!; end

  # Returns the endpoint for this engine. If none is registered,
  # defaults to an ActionDispatch::Routing::RouteSet.
  def endpoint; end

  def engine_name(*_arg0, &_arg1); end

  # Defines additional Rack env configuration that is added on each call.
  def env_config; end

  # Returns a module with all the helpers defined for the engine.
  def helpers; end

  # Returns all registered helpers paths.
  def helpers_paths; end

  def isolated?(*_arg0, &_arg1); end

  # Load console and invoke the registered hooks.
  # Check <tt>Rails::Railtie.console</tt> for more info.
  def load_console(app = T.unsafe(nil)); end

  # Load Rails generators and invoke the registered hooks.
  # Check <tt>Rails::Railtie.generators</tt> for more info.
  def load_generators(app = T.unsafe(nil)); end

  # Load Rails runner and invoke the registered hooks.
  # Check <tt>Rails::Railtie.runner</tt> for more info.
  def load_runner(app = T.unsafe(nil)); end

  # Load data from db/seeds.rb file. It can be used in to load engines'
  # seeds, e.g.:
  #
  # Blog::Engine.load_seed
  def load_seed; end

  # Invoke the server registered hooks.
  # Check <tt>Rails::Railtie.server</tt> for more info.
  def load_server(app = T.unsafe(nil)); end

  # Load Rake, railties tasks and invoke the registered hooks.
  # Check <tt>Rails::Railtie.rake_tasks</tt> for more info.
  def load_tasks(app = T.unsafe(nil)); end

  def middleware(*_arg0, &_arg1); end
  def paths(*_arg0, &_arg1); end
  def railties; end
  def root(*_arg0, &_arg1); end

  # Defines the routes for this engine. If a block is given to
  # routes, it is appended to the engine.
  def routes(&block); end

  # @return [Boolean]
  def routes?; end

  protected

  def run_tasks_blocks(*_arg0); end

  private

  def _all_autoload_once_paths; end
  def _all_autoload_paths; end
  def _all_load_paths(add_autoload_paths_to_load_path); end
  def build_middleware; end
  def build_request(env); end
  def default_middleware_stack; end

  # @return [Boolean]
  def has_migrations?; end

  def load_config_initializer(initializer); end

  class << self
    def __callbacks; end
    def __callbacks=(value); end
    def __callbacks?; end
    def _load_seed_callbacks; end
    def _load_seed_callbacks=(value); end

    # Returns the value of attribute called_from.
    def called_from; end

    # Sets the attribute called_from
    #
    # @param value the value to set the attribute called_from to.
    def called_from=(_arg0); end

    def eager_load!(*_arg0, &_arg1); end
    def endpoint(endpoint = T.unsafe(nil)); end
    def engine_name(name = T.unsafe(nil)); end

    # Finds engine with given path.
    def find(path); end

    def find_root(from); end
    def find_root_with_flag(flag, root_path, default = T.unsafe(nil)); end

    # @private
    def inherited(base); end

    def isolate_namespace(mod); end

    # Returns the value of attribute isolated.
    def isolated; end

    # Sets the attribute isolated
    #
    # @param value the value to set the attribute isolated to.
    def isolated=(_arg0); end

    # Returns the value of attribute isolated.
    def isolated?; end
  end
end

class Rails::Engine::Configuration < ::Rails::Railtie::Configuration
  # @return [Configuration] a new instance of Configuration
  def initialize(root = T.unsafe(nil)); end

  def autoload_once_paths; end

  # Sets the attribute autoload_once_paths
  #
  # @param value the value to set the attribute autoload_once_paths to.
  def autoload_once_paths=(_arg0); end

  def autoload_paths; end

  # Sets the attribute autoload_paths
  #
  # @param value the value to set the attribute autoload_paths to.
  def autoload_paths=(_arg0); end

  def eager_load_paths; end

  # Sets the attribute eager_load_paths
  #
  # @param value the value to set the attribute eager_load_paths to.
  def eager_load_paths=(_arg0); end

  # Holds generators configuration:
  #
  #   config.generators do |g|
  #     g.orm             :data_mapper, migration: true
  #     g.template_engine :haml
  #     g.test_framework  :rspec
  #   end
  #
  # If you want to disable color in console, do:
  #
  #   config.generators.colorize_logging = false
  #
  # @yield [@generators]
  def generators; end

  # Returns the value of attribute javascript_path.
  def javascript_path; end

  # Sets the attribute javascript_path
  #
  # @param value the value to set the attribute javascript_path to.
  def javascript_path=(_arg0); end

  # Returns the value of attribute middleware.
  def middleware; end

  # Sets the attribute middleware
  #
  # @param value the value to set the attribute middleware to.
  def middleware=(_arg0); end

  def paths; end

  # Returns the value of attribute root.
  def root; end

  def root=(value); end
end

class Rails::Engine::Railties
  include ::Enumerable

  # @return [Railties] a new instance of Railties
  def initialize; end

  def -(others); end

  # Returns the value of attribute _all.
  def _all; end

  def each(*args, &block); end
end

# This module helps build the runtime properties that are displayed in
# Rails::InfoController responses. These include the active Rails version,
# Ruby version, Rack version, and so on.
module Rails::Info
  def properties; end
  def properties=(val); end

  class << self
    def inspect; end
    def properties; end
    def properties=(val); end
    def property(name, value = T.unsafe(nil)); end
    def to_html; end
    def to_s; end
  end
end

class Rails::InfoController < ::Rails::ApplicationController
  def index; end
  def properties; end
  def routes; end

  private

  def _layout(lookup_context, formats); end
  def _layout_from_proc; end
  def match_route; end
  def with_leading_slash(path); end

  class << self
    def __callbacks; end
    def _layout; end
    def _layout_conditions; end
    def middleware_stack; end
  end
end

module Rails::Initializable
  mixes_in_class_methods ::Rails::Initializable::ClassMethods

  def initializers; end
  def run_initializers(group = T.unsafe(nil), *args); end

  class << self
    def included(base); end
  end
end

module Rails::Initializable::ClassMethods
  # @raise [ArgumentError]
  def initializer(name, opts = T.unsafe(nil), &blk); end

  def initializers; end
  def initializers_chain; end
  def initializers_for(binding); end
end

class Rails::Initializable::Collection < ::Array
  include ::TSort

  def +(other); end
  def tsort_each_child(initializer, &block); end
  def tsort_each_node; end
end

class Rails::Initializable::Initializer
  # @return [Initializer] a new instance of Initializer
  def initialize(name, context, options, &block); end

  def after; end
  def before; end

  # @return [Boolean]
  def belongs_to?(group); end

  def bind(context); end

  # Returns the value of attribute block.
  def block; end

  def context_class; end

  # Returns the value of attribute name.
  def name; end

  def run(*args); end
end

class Rails::MailersController < ::Rails::ApplicationController
  def index; end
  def preview; end

  private

  def _layout(lookup_context, formats); end
  def find_part(format); end
  def find_preferred_part(*formats); end
  def find_preview; end
  def locale_query(locale); end
  def part_query(mime_type); end
  def set_locale; end

  # @return [Boolean]
  def show_previews?; end

  class << self
    def __callbacks; end
    def _helper_methods; end
    def middleware_stack; end
  end
end

module Rails::MailersController::HelperMethods
  include ::ActionController::Base::HelperMethods

  def locale_query(*args, &block); end
  def part_query(*args, &block); end
end

module Rails::Paths; end

class Rails::Paths::Path
  include ::Enumerable

  # @return [Path] a new instance of Path
  def initialize(root, current, paths, options = T.unsafe(nil)); end

  def <<(path); end
  def absolute_current; end
  def autoload!; end
  def autoload?; end
  def autoload_once!; end
  def autoload_once?; end
  def children; end
  def concat(paths); end
  def each(&block); end
  def eager_load!; end
  def eager_load?; end

  # Returns all expanded paths but only if they exist in the filesystem.
  def existent; end

  def existent_directories; end

  # Expands all paths against the root and return all unique values.
  def expanded; end

  def extensions; end
  def first; end

  # Returns the value of attribute glob.
  def glob; end

  # Sets the attribute glob
  #
  # @param value the value to set the attribute glob to.
  def glob=(_arg0); end

  def last; end
  def load_path!; end
  def load_path?; end
  def paths; end
  def push(path); end
  def skip_autoload!; end
  def skip_autoload_once!; end
  def skip_eager_load!; end
  def skip_load_path!; end

  # Expands all paths against the root and return all unique values.
  def to_a; end

  def to_ary; end
  def unshift(*paths); end

  private

  def files_in(path); end
end

# This object is an extended hash that behaves as root of the <tt>Rails::Paths</tt> system.
# It allows you to collect information about how you want to structure your application
# paths through a Hash-like API. It requires you to give a physical path on initialization.
#
#   root = Root.new "/rails"
#   root.add "app/controllers", eager_load: true
#
# The above command creates a new root object and adds "app/controllers" as a path.
# This means we can get a <tt>Rails::Paths::Path</tt> object back like below:
#
#   path = root["app/controllers"]
#   path.eager_load?               # => true
#   path.is_a?(Rails::Paths::Path) # => true
#
# The +Path+ object is simply an enumerable and allows you to easily add extra paths:
#
#   path.is_a?(Enumerable) # => true
#   path.to_ary.inspect    # => ["app/controllers"]
#
#   path << "lib/controllers"
#   path.to_ary.inspect    # => ["app/controllers", "lib/controllers"]
#
# Notice that when you add a path using +add+, the path object created already
# contains the path with the same path value given to +add+. In some situations,
# you may not want this behavior, so you can give <tt>:with</tt> as option.
#
#   root.add "config/routes", with: "config/routes.rb"
#   root["config/routes"].inspect # => ["config/routes.rb"]
#
# The +add+ method accepts the following options as arguments:
# eager_load, autoload, autoload_once, and glob.
#
# Finally, the +Path+ object also provides a few helpers:
#
#   root = Root.new "/rails"
#   root.add "app/controllers"
#
#   root["app/controllers"].expanded # => ["/rails/app/controllers"]
#   root["app/controllers"].existent # => ["/rails/app/controllers"]
#
# Check the <tt>Rails::Paths::Path</tt> documentation for more information.
class Rails::Paths::Root
  # @return [Root] a new instance of Root
  def initialize(path); end

  def [](path); end
  def []=(path, value); end
  def add(path, options = T.unsafe(nil)); end
  def all_paths; end
  def autoload_once; end
  def autoload_paths; end
  def eager_load; end
  def keys; end
  def load_paths; end

  # Returns the value of attribute path.
  def path; end

  # Sets the attribute path
  #
  # @param value the value to set the attribute path to.
  def path=(_arg0); end

  def values; end
  def values_at(*list); end

  private

  def filter_by(&block); end
end

module Rails::Rack; end

# Sets log tags, logs the request, calls the app, and flushes the logs.
#
# Log tags (+taggers+) can be an Array containing: methods that the +request+
# object responds to, objects that respond to +to_s+ or Proc objects that accept
# an instance of the +request+ object.
class Rails::Rack::Logger < ::ActiveSupport::LogSubscriber
  # @return [Logger] a new instance of Logger
  def initialize(app, taggers = T.unsafe(nil)); end

  def call(env); end

  private

  def call_app(request, env); end
  def compute_tags(request); end
  def finish(request); end
  def logger; end

  # Started GET "/session/new" for 127.0.0.1 at 2012-09-26 14:51:42 -0700
  def started_request_message(request); end
end

# <tt>Rails::Railtie</tt> is the core of the Rails framework and provides
# several hooks to extend Rails and/or modify the initialization process.
#
# Every major component of Rails (Action Mailer, Action Controller, Active
# Record, etc.) implements a railtie. Each of them is responsible for their
# own initialization. This makes Rails itself absent of any component hooks,
# allowing other components to be used in place of any of the Rails defaults.
#
# Developing a Rails extension does _not_ require implementing a railtie, but
# if you need to interact with the Rails framework during or after boot, then
# a railtie is needed.
#
# For example, an extension doing any of the following would need a railtie:
#
# * creating initializers
# * configuring a Rails framework for the application, like setting a generator
# * adding <tt>config.*</tt> keys to the environment
# * setting up a subscriber with <tt>ActiveSupport::Notifications</tt>
# * adding Rake tasks
#
# == Creating a Railtie
#
# To extend Rails using a railtie, create a subclass of <tt>Rails::Railtie</tt>.
# This class must be loaded during the Rails boot process, and is conventionally
# called <tt>MyNamespace::Railtie</tt>.
#
# The following example demonstrates an extension which can be used with or
# without Rails.
#
#   # lib/my_gem/railtie.rb
#   module MyGem
#     class Railtie < Rails::Railtie
#     end
#   end
#
#   # lib/my_gem.rb
#   require "my_gem/railtie" if defined?(Rails::Railtie)
#
# == Initializers
#
# To add an initialization step to the Rails boot process from your railtie, just
# define the initialization code with the +initializer+ macro:
#
#   class MyRailtie < Rails::Railtie
#     initializer "my_railtie.configure_rails_initialization" do
#       # some initialization behavior
#     end
#   end
#
# If specified, the block can also receive the application object, in case you
# need to access some application-specific configuration, like middleware:
#
#   class MyRailtie < Rails::Railtie
#     initializer "my_railtie.configure_rails_initialization" do |app|
#       app.middleware.use MyRailtie::Middleware
#     end
#   end
#
# Finally, you can also pass <tt>:before</tt> and <tt>:after</tt> as options to
# +initializer+, in case you want to couple it with a specific step in the
# initialization process.
#
# == Configuration
#
# Railties can access a config object which contains configuration shared by all
# railties and the application:
#
#   class MyRailtie < Rails::Railtie
#     # Customize the ORM
#     config.app_generators.orm :my_railtie_orm
#
#     # Add a to_prepare block which is executed once in production
#     # and before each request in development.
#     config.to_prepare do
#       MyRailtie.setup!
#     end
#   end
#
# == Loading Rake Tasks and Generators
#
# If your railtie has Rake tasks, you can tell Rails to load them through the method
# +rake_tasks+:
#
#   class MyRailtie < Rails::Railtie
#     rake_tasks do
#       load "path/to/my_railtie.tasks"
#     end
#   end
#
# By default, Rails loads generators from your load path. However, if you want to place
# your generators at a different location, you can specify in your railtie a block which
# will load them during normal generators lookup:
#
#   class MyRailtie < Rails::Railtie
#     generators do
#       require "path/to/my_railtie_generator"
#     end
#   end
#
# Since filenames on the load path are shared across gems, be sure that files you load
# through a railtie have unique names.
#
# == Run another program when the Rails server starts
#
# In development, it's very usual to have to run another process next to the Rails Server. In example
# you might want to start the Webpack or React server. Or maybe you need to run your job scheduler process
# like Sidekiq. This is usually done by opening a new shell and running the program from here.
#
# Rails allow you to specify a +server+ block which will get called when a Rails server starts.
# This way, your users don't need to remember to have to open a new shell and run another program, making
# this less confusing for everyone.
# It can be used like this:
#
#   class MyRailtie < Rails::Railtie
#     server do
#       WebpackServer.start
#     end
#   end
#
# == Application and Engine
#
# An engine is nothing more than a railtie with some initializers already set. And since
# <tt>Rails::Application</tt> is an engine, the same configuration described here can be
# used in both.
#
# Be sure to look at the documentation of those specific classes for more information.
class Rails::Railtie
  include ::Rails::Initializable
  extend ::ActiveSupport::DescendantsTracker
  extend ::Rails::Initializable::ClassMethods

  # @return [Railtie] a new instance of Railtie
  def initialize; end

  # This is used to create the <tt>config</tt> object on Railties, an instance of
  # Railtie::Configuration, that is used by Railties and Application to store
  # related configuration.
  def config; end

  def configure(&block); end
  def railtie_name(*_arg0, &_arg1); end
  def railtie_namespace; end

  protected

  def run_console_blocks(app); end
  def run_generators_blocks(app); end
  def run_runner_blocks(app); end
  def run_server_blocks(app); end
  def run_tasks_blocks(app); end

  private

  # run `&block` in every registered block in `#register_block_for`
  def each_registered_block(type, &block); end

  class << self
    # @return [Boolean]
    def abstract_railtie?; end

    def config(*_arg0, &_arg1); end

    # Allows you to configure the railtie. This is the same method seen in
    # Railtie::Configurable, but this module is no longer required for all
    # subclasses of Railtie so we provide the class method here.
    def configure(&block); end

    def console(&blk); end
    def generators(&blk); end

    # Since Rails::Railtie cannot be instantiated, any methods that call
    # +instance+ are intended to be called only on subclasses of a Railtie.
    def instance; end

    def railtie_name(name = T.unsafe(nil)); end
    def rake_tasks(&blk); end
    def runner(&blk); end
    def server(&blk); end
    def subclasses; end

    private

    def generate_railtie_name(string); end

    # If the class method does not have a method, then send the method call
    # to the Railtie instance.
    def method_missing(name, *args, &block); end

    # receives an instance variable identifier, set the variable value if is
    # blank and append given block to value, which will be used later in
    # `#each_registered_block(type, &block)`
    def register_block_for(type, &blk); end

    # @return [Boolean]
    def respond_to_missing?(name, _); end
  end
end

Rails::Railtie::ABSTRACT_RAILTIES = T.let(T.unsafe(nil), Array)

class Rails::Railtie::Configuration
  # @return [Configuration] a new instance of Configuration
  def initialize; end

  # Last configurable block to run. Called after frameworks initialize.
  def after_initialize(&block); end

  # This allows you to modify application's generators from Railties.
  #
  # Values set on app_generators will become defaults for application, unless
  # application overwrites them.
  #
  # @yield [@@app_generators]
  def app_generators; end

  # This allows you to modify the application's middlewares from Engines.
  #
  # All operations you run on the app_middleware will be replayed on the
  # application once it is defined and the default_middlewares are
  # created
  def app_middleware; end

  # First configurable block to run. Called before any initializers are run.
  def before_configuration(&block); end

  # Third configurable block to run. Does not run if +config.eager_load+
  # set to false.
  def before_eager_load(&block); end

  # Second configurable block to run. Called before frameworks initialize.
  def before_initialize(&block); end

  # All namespaces that are eager loaded
  def eager_load_namespaces; end

  # @return [Boolean]
  def respond_to?(name, include_private = T.unsafe(nil)); end

  # Defines generic callbacks to run before #after_initialize. Useful for
  # Rails::Railtie subclasses.
  def to_prepare(&blk); end

  # Array of callbacks defined by #to_prepare.
  def to_prepare_blocks; end

  # Add directories that should be watched for change.
  # The key of the hashes should be directories and the values should
  # be an array of extensions to match in each directory.
  def watchable_dirs; end

  # Add files that should be watched for change.
  def watchable_files; end

  private

  def method_missing(name, *args, &blk); end

  class << self
    # Expose the eager_load_namespaces at "module" level for convenience.
    def eager_load_namespaces; end
  end
end

# Greatly inspired by Ara T. Howard's magnificent sekrets gem. 😘
class Rails::Secrets
  class << self
    def decrypt(data); end
    def encrypt(data); end
    def key; end
    def parse(paths, env:); end
    def read; end
    def read_for_editing(&block); end

    # Sets the attribute root
    #
    # @param value the value to set the attribute root to.
    def root=(_arg0); end

    def write(contents); end

    private

    def encryptor; end

    # @raise [MissingKeyError]
    def handle_missing_key; end

    def key_path; end
    def path; end
    def preprocess(path); end
    def read_key_file; end
    def writing(contents); end
  end
end

class Rails::Secrets::MissingKeyError < ::RuntimeError
  # @return [MissingKeyError] a new instance of MissingKeyError
  def initialize; end
end

# Implements the logic behind <tt>Rails::Command::NotesCommand</tt>. See <tt>rails notes --help</tt> for usage information.
#
# Annotation objects are triplets <tt>:line</tt>, <tt>:tag</tt>, <tt>:text</tt> that
# represent the line where the annotation lives, its tag, and its text. Note
# the filename is not stored.
#
# Annotations are looked for in comments and modulus whitespace they have to
# start with the tag optionally followed by a colon. Everything up to the end
# of the line (or closing ERB comment tag) is considered to be their text.
class Rails::SourceAnnotationExtractor
  # @return [SourceAnnotationExtractor] a new instance of SourceAnnotationExtractor
  def initialize(tag); end

  # Prints the mapping from filenames to annotations in +results+ ordered by filename.
  # The +options+ hash is passed to each annotation's +to_s+.
  def display(results, options = T.unsafe(nil)); end

  # If +file+ is the filename of a file that contains annotations this method returns
  # a hash with a single entry that maps +file+ to an array of its annotations.
  # Otherwise it returns an empty hash.
  def extract_annotations_from(file, pattern); end

  # Returns a hash that maps filenames under +dirs+ (recursively) to arrays
  # with their annotations.
  def find(dirs); end

  # Returns a hash that maps filenames under +dir+ (recursively) to arrays
  # with their annotations. Files with extensions registered in
  # <tt>Rails::SourceAnnotationExtractor::Annotation.extensions</tt> are
  # taken into account. Only files with annotations are included.
  def find_in(dir); end

  # Returns the value of attribute tag.
  def tag; end

  class << self
    # Prints all annotations with tag +tag+ under the root directories +app+,
    # +config+, +db+, +lib+, and +test+ (recursively).
    #
    # If +tag+ is <tt>nil</tt>, annotations with either default or registered tags are printed.
    #
    # Specific directories can be explicitly set using the <tt>:dirs</tt> key in +options+.
    #
    #   Rails::SourceAnnotationExtractor.enumerate 'TODO|FIXME', dirs: %w(app lib), tag: true
    #
    # If +options+ has a <tt>:tag</tt> flag, it will be passed to each annotation's +to_s+.
    #
    # See <tt>#find_in</tt> for a list of file extensions that will be taken into account.
    #
    # This class method is the single entry point for the <tt>rails notes</tt> command.
    def enumerate(tag = T.unsafe(nil), options = T.unsafe(nil)); end
  end
end

class Rails::SourceAnnotationExtractor::Annotation < ::Struct
  # Returns a representation of the annotation that looks like this:
  #
  #   [126] [TODO] This algorithm is simple and clearly correct, make it faster.
  #
  # If +options+ has a flag <tt>:tag</tt> the tag is shown as in the example above.
  # Otherwise the string contains just line and text.
  def to_s(options = T.unsafe(nil)); end

  class << self
    def directories; end
    def extensions; end

    # Registers additional directories to be included
    #   Rails::SourceAnnotationExtractor::Annotation.register_directories("spec", "another")
    def register_directories(*dirs); end

    # Registers new Annotations File Extensions
    #   Rails::SourceAnnotationExtractor::Annotation.register_extensions("css", "scss", "sass", "less", "js") { |tag| /\/\/\s*(#{tag}):?\s*(.*)$/ }
    def register_extensions(*exts, &block); end

    # Registers additional tags
    #   Rails::SourceAnnotationExtractor::Annotation.register_tags("TESTME", "DEPRECATEME")
    def register_tags(*additional_tags); end

    def tags; end
  end
end

module Rails::VERSION; end
Rails::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)
Rails::VERSION::MINOR = T.let(T.unsafe(nil), Integer)
Rails::VERSION::PRE = T.let(T.unsafe(nil), String)
Rails::VERSION::STRING = T.let(T.unsafe(nil), String)
Rails::VERSION::TINY = T.let(T.unsafe(nil), Integer)

class Rails::WelcomeController < ::Rails::ApplicationController
  def index; end

  private

  def _layout(lookup_context, formats); end

  class << self
    def _layout; end
    def _layout_conditions; end
    def middleware_stack; end
  end
end

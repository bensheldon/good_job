# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `multipart-post` gem.
# Please instead update this file by running `bin/tapioca gem multipart-post`.

# Concatenate together multiple IO objects into a single, composite IO object
# for purposes of reading as a single stream.
#
# @example
#   crio = CompositeReadIO.new(StringIO.new('one'),
#   StringIO.new('two'),
#   StringIO.new('three'))
#   puts crio.read # => "onetwothree"
class CompositeReadIO
  # Create a new composite-read IO from the arguments, all of which should
  # respond to #read in a manner consistent with IO.
  #
  # @return [CompositeReadIO] a new instance of CompositeReadIO
  def initialize(*ios); end

  # Read from IOs in order until `length` bytes have been received.
  def read(length = T.unsafe(nil), outbuf = T.unsafe(nil)); end

  def rewind; end

  private

  def advance_io; end
  def current_io; end
end

module Parts; end

# Represents the epilogue or closing boundary.
class Parts::EpiloguePart
  include ::Parts::Part

  # @return [EpiloguePart] a new instance of EpiloguePart
  def initialize(boundary); end
end

# Represents a part to be filled from file IO.
class Parts::FilePart
  include ::Parts::Part

  # @param boundary [String]
  # @param name [#to_s]
  # @param io [IO]
  # @param headers [Hash]
  # @return [FilePart] a new instance of FilePart
  def initialize(boundary, name, io, headers = T.unsafe(nil)); end

  # @param boundary [String]
  # @param name [#to_s]
  # @param filename [String]
  # @param type [String]
  # @param content_len [Integer]
  # @param opts [Hash]
  def build_head(boundary, name, filename, type, content_len, opts = T.unsafe(nil)); end

  # Returns the value of attribute length.
  def length; end
end

# Represents a parametric part to be filled with given value.
class Parts::ParamPart
  include ::Parts::Part

  # @param boundary [String]
  # @param name [#to_s]
  # @param value [String]
  # @param headers [Hash] Content-Type is used, if present.
  # @return [ParamPart] a new instance of ParamPart
  def initialize(boundary, name, value, headers = T.unsafe(nil)); end

  # @param boundary [String]
  # @param name [#to_s]
  # @param value [String]
  # @param headers [Hash] Content-Type is used, if present.
  def build_part(boundary, name, value, headers = T.unsafe(nil)); end

  def length; end
end

module Parts::Part
  def length; end
  def to_io; end

  class << self
    # @return [Boolean]
    def file?(value); end

    def new(boundary, name, value, headers = T.unsafe(nil)); end
  end
end

# Convenience methods for dealing with files and IO that are to be uploaded.
class UploadIO
  # Create an upload IO suitable for including in the params hash of a
  # Net::HTTP::Post::Multipart.
  #
  # Can take two forms. The first accepts a filename and content type, and
  # opens the file for reading (to be closed by finalizer).
  #
  # The second accepts an already-open IO, but also requires a third argument,
  # the filename from which it was opened (particularly useful/recommended if
  # uploading directly from a form in a framework, which often save the file to
  # an arbitrarily named RackMultipart file in /tmp).
  #
  # @example
  #   UploadIO.new("file.txt", "text/plain")
  #   UploadIO.new(file_io, "text/plain", "file.txt")
  # @return [UploadIO] a new instance of UploadIO
  def initialize(filename_or_io, content_type, filename = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Returns the value of attribute content_type.
  def content_type; end

  # Returns the value of attribute io.
  def io; end

  # Returns the value of attribute local_path.
  def local_path; end

  def method_missing(*args); end

  # Returns the value of attribute opts.
  def opts; end

  # Returns the value of attribute original_filename.
  def original_filename; end

  # @return [Boolean]
  def respond_to?(meth, include_all = T.unsafe(nil)); end

  class << self
    # @raise [ArgumentError]
    def convert!(io, content_type, original_filename, local_path); end
  end
end

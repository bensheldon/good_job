# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sord` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module Sord
end

class Sord::Generator
  def initialize(options); end

  def add_attributes(item); end
  def add_comments(item, typed_object); end
  def add_constants(item); end
  def add_methods(item); end
  def add_mixins(item); end
  def add_namespace(item); end
  def count_method; end
  def count_namespace; end
  def fix_default_if_unary_minus(default); end
  def generate; end
  def object_count; end
  def populate; end
  def run; end
  def sort_params(pair1, pair2); end
  def warnings; end
end

Sord::Generator::VALID_MODES = T.let(T.unsafe(nil), Array)

module Sord::Logging
  class << self
    def add_hook(&blk); end
    def done(msg, item = T.unsafe(nil)); end
    def duck(msg, item = T.unsafe(nil)); end
    def enabled_types; end
    def enabled_types=(value); end
    def error(msg, item = T.unsafe(nil)); end
    def generic(kind, header, msg, item); end
    def hooks; end
    def infer(msg, item = T.unsafe(nil)); end
    def info(msg, item = T.unsafe(nil)); end
    def invoke_hooks(kind, msg, item); end
    def omit(msg, item = T.unsafe(nil)); end
    def silent=(value); end
    def silent?; end
    def valid_types?(value); end
    def warn(msg, item = T.unsafe(nil)); end
  end
end

Sord::Logging::AVAILABLE_TYPES = T.let(T.unsafe(nil), Array)

class Sord::ParlourPlugin < ::Parlour::Plugin
  def initialize(options); end

  def generate(root); end
  def options; end
  def parlour; end
  def parlour=(_arg0); end

  class << self
    def with_clean_env(&block); end
  end
end

module Sord::Resolver
  class << self
    def builtin_classes; end
    def clear; end
    def path_for(name); end
    def paths_for(name); end
    def prepare; end
    def resolvable?(name, item); end
  end
end

module Sord::TypeConverter
  class << self
    def handle_sord_error(name, log_warning, item, replace_errors_with_untyped); end
    def split_type_parameters(params); end
    def yard_to_parlour(yard, item = T.unsafe(nil), replace_errors_with_untyped = T.unsafe(nil), replace_unresolved_with_untyped = T.unsafe(nil)); end
  end
end

Sord::TypeConverter::DUCK_TYPE_REGEX = T.let(T.unsafe(nil), Regexp)

Sord::TypeConverter::GENERIC_TYPE_REGEX = T.let(T.unsafe(nil), Regexp)

Sord::TypeConverter::ORDERED_LIST_REGEX = T.let(T.unsafe(nil), Regexp)

Sord::TypeConverter::SHORTHAND_ARRAY_SYNTAX = T.let(T.unsafe(nil), Regexp)

Sord::TypeConverter::SHORTHAND_HASH_SYNTAX = T.let(T.unsafe(nil), Regexp)

Sord::TypeConverter::SIMPLE_TYPE_REGEX = T.let(T.unsafe(nil), Regexp)

Sord::TypeConverter::SINGLE_ARG_GENERIC_TYPES = T.let(T.unsafe(nil), Array)

Sord::VERSION = T.let(T.unsafe(nil), String)

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `i18n-tasks` gem.
# Please instead update this file by running `bin/tapioca gem i18n-tasks`.

# define all the modules to be able to use ::
#
# source://i18n-tasks//lib/i18n/tasks.rb#4
module I18n
  class << self
    # source://i18n/1.14.1/lib/i18n/backend/cache.rb#64
    def cache_key_digest; end

    # source://i18n/1.14.1/lib/i18n/backend/cache.rb#68
    def cache_key_digest=(key_digest); end

    # source://i18n/1.14.1/lib/i18n/backend/cache.rb#56
    def cache_namespace; end

    # source://i18n/1.14.1/lib/i18n/backend/cache.rb#60
    def cache_namespace=(namespace); end

    # source://i18n/1.14.1/lib/i18n/backend/cache.rb#48
    def cache_store; end

    # source://i18n/1.14.1/lib/i18n/backend/cache.rb#52
    def cache_store=(store); end

    # source://i18n/1.14.1/lib/i18n/backend/fallbacks.rb#17
    def fallbacks; end

    # source://i18n/1.14.1/lib/i18n/backend/fallbacks.rb#23
    def fallbacks=(fallbacks); end

    # source://i18n/1.14.1/lib/i18n/interpolate/ruby.rb#23
    def interpolate(string, values); end

    # source://i18n/1.14.1/lib/i18n/interpolate/ruby.rb#29
    def interpolate_hash(string, values); end

    # source://i18n/1.14.1/lib/i18n.rb#37
    def new_double_nested_cache; end

    # source://i18n/1.14.1/lib/i18n/backend/cache.rb#72
    def perform_caching?; end

    # source://i18n/1.14.1/lib/i18n.rb#45
    def reserve_key(key); end

    # source://i18n/1.14.1/lib/i18n.rb#50
    def reserved_keys_pattern; end
  end
end

# source://i18n-tasks//lib/i18n/tasks.rb#5
module I18n::Tasks
  class << self
    # Add AST-matcher to i18n-tasks
    #
    # @param matcher_class_name
    # @return self
    #
    # source://i18n-tasks//lib/i18n/tasks.rb#42
    def add_ast_matcher(matcher_class_name); end

    # Add commands to i18n-tasks
    #
    # @param commands_module [Module]
    # @return self
    #
    # source://i18n-tasks//lib/i18n/tasks.rb#33
    def add_commands(commands_module); end

    # Add a scanner to the default configuration.
    #
    # @param scanner_class_name [String]
    # @param scanner_opts [Hash]
    # @return self
    #
    # source://i18n-tasks//lib/i18n/tasks.rb#22
    def add_scanner(scanner_class_name, scanner_opts = T.unsafe(nil)); end

    # source://i18n-tasks//lib/i18n/tasks.rb#7
    def gem_path; end

    # Sets the attribute verbose
    #
    # @param value the value to set the attribute verbose to.
    #
    # source://i18n-tasks//lib/i18n/tasks.rb#15
    def verbose=(_arg0); end

    # @return [Boolean]
    #
    # source://i18n-tasks//lib/i18n/tasks.rb#11
    def verbose?; end
  end
end

# source://i18n-tasks//lib/i18n/tasks/base_task.rb#25
class I18n::Tasks::BaseTask
  include ::I18n::Tasks::SplitKey
  include ::I18n::Tasks::KeyPatternMatching
  include ::I18n::Tasks::PluralKeys
  include ::I18n::Tasks::References
  include ::I18n::Tasks::HtmlKeys
  include ::I18n::Tasks::UsedKeys
  include ::I18n::Tasks::IgnoreKeys
  include ::I18n::Tasks::MissingKeys
  include ::I18n::Tasks::Interpolations
  include ::I18n::Tasks::UnusedKeys
  include ::I18n::Tasks::Translation
  include ::I18n::Tasks::Logging
  include ::I18n::Tasks::Configuration
  include ::I18n::Tasks::Data
  include ::I18n::Tasks::Stats

  # @return [BaseTask] a new instance of BaseTask
  #
  # source://i18n-tasks//lib/i18n/tasks/base_task.rb#42
  def initialize(config_file: T.unsafe(nil), **config); end

  # source://i18n-tasks//lib/i18n/tasks/base_task.rb#47
  def inspect; end
end

# When this type of error is caught:
# 1. show error message of the backtrace
# 2. exit with non-zero exit code
#
# source://i18n-tasks//lib/i18n/tasks/command_error.rb#8
class I18n::Tasks::CommandError < ::StandardError
  # @return [CommandError] a new instance of CommandError
  #
  # source://i18n-tasks//lib/i18n/tasks/command_error.rb#9
  def initialize(error = T.unsafe(nil), message); end
end

# source://i18n-tasks//lib/i18n/tasks/concurrent/cached_value.rb#3
module I18n::Tasks::Concurrent; end

# A thread-safe cache.
#
# @since 0.9.25
#
# source://i18n-tasks//lib/i18n/tasks/concurrent/cache.rb#8
class I18n::Tasks::Concurrent::Cache
  # @return [Cache] a new instance of Cache
  # @since 0.9.25
  #
  # source://i18n-tasks//lib/i18n/tasks/concurrent/cache.rb#9
  def initialize; end

  # @param key [Object]
  # @return [Object] Cached or computed value.
  # @since 0.9.25
  #
  # source://i18n-tasks//lib/i18n/tasks/concurrent/cache.rb#16
  def fetch(key, &block); end
end

# A thread-safe memoized value.
# The given computation is guaranteed to be invoked at most once.
#
# @since 0.9.25
#
# source://i18n-tasks//lib/i18n/tasks/concurrent/cached_value.rb#7
class I18n::Tasks::Concurrent::CachedValue
  # @param computation [Proc] The computation that returns the value to cache.
  # @return [CachedValue] a new instance of CachedValue
  # @since 0.9.25
  #
  # source://i18n-tasks//lib/i18n/tasks/concurrent/cached_value.rb#11
  def initialize(&computation); end

  # @return [Object] Result of the computation.
  # @since 0.9.25
  #
  # source://i18n-tasks//lib/i18n/tasks/concurrent/cached_value.rb#18
  def get; end

  private

  # source://i18n-tasks//lib/i18n/tasks/concurrent/cached_value.rb#49
  def get_result_volatile; end

  # source://i18n-tasks//lib/i18n/tasks/concurrent/cached_value.rb#53
  def set_result_volatile(value); end
end

# @since 0.9.25
#
# source://i18n-tasks//lib/i18n/tasks/concurrent/cached_value.rb#8
I18n::Tasks::Concurrent::CachedValue::NULL = T.let(T.unsafe(nil), Object)

# source://i18n-tasks//lib/i18n/tasks/configuration.rb#3
module I18n::Tasks::Configuration
  # @return [String] default i18n locale
  #
  # source://i18n-tasks//lib/i18n/tasks/configuration.rb#81
  def base_locale; end

  # i18n-tasks config (defaults + config/i18n-tasks.yml)
  #
  # @return [Hash{String => String,Hash,Array}]
  #
  # source://i18n-tasks//lib/i18n/tasks/configuration.rb#13
  def config; end

  # source://i18n-tasks//lib/i18n/tasks/configuration.rb#46
  def config=(conf); end

  # source://i18n-tasks//lib/i18n/tasks/configuration.rb#120
  def config_for_inspect; end

  # evaluated configuration (as the app sees it)
  #
  # source://i18n-tasks//lib/i18n/tasks/configuration.rb#106
  def config_sections; end

  # data config
  #  @return [Hash<adapter: String, options: Hash>]
  #
  # source://i18n-tasks//lib/i18n/tasks/configuration.rb#53
  def data_config; end

  # source://i18n-tasks//lib/i18n/tasks/configuration.rb#22
  def file_config; end

  # source://i18n-tasks//lib/i18n/tasks/configuration.rb#99
  def ignore_config(type = T.unsafe(nil)); end

  # source://i18n-tasks//lib/i18n/tasks/configuration.rb#85
  def internal_locale; end

  # @return [Array<String>] all available locales, base_locale is always first
  #
  # source://i18n-tasks//lib/i18n/tasks/configuration.rb#76
  def locales; end

  # translation config
  #
  # @return [Hash{String => String,Hash,Array}]
  #
  # source://i18n-tasks//lib/i18n/tasks/configuration.rb#62
  def translation_config; end

  private

  # source://i18n-tasks//lib/i18n/tasks/configuration.rb#130
  def to_hash_from_indifferent(value); end
end

# source://i18n-tasks//lib/i18n/tasks/configuration.rb#17
I18n::Tasks::Configuration::CONFIG_FILES = T.let(T.unsafe(nil), Array)

# source://i18n-tasks//lib/i18n/tasks/configuration.rb#4
I18n::Tasks::Configuration::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://i18n-tasks//lib/i18n/tasks/configuration.rb#104
I18n::Tasks::Configuration::IGNORE_TYPES = T.let(T.unsafe(nil), Array)

# source://i18n-tasks//lib/i18n/tasks.rb#52
module I18n::Tasks::Data
  # source://i18n-tasks//lib/i18n/tasks/data.rb#48
  def build_tree(hash); end

  # I18n data provider
  #
  # @see I18n::Tasks::Data::FileSystem
  #
  # source://i18n-tasks//lib/i18n/tasks/data.rb#13
  def data; end

  # source://i18n-tasks//lib/i18n/tasks/data.rb#30
  def data_forest(locales = T.unsafe(nil)); end

  # source://i18n-tasks//lib/i18n/tasks/data.rb#26
  def empty_forest; end

  # @return [Boolean]
  #
  # source://i18n-tasks//lib/i18n/tasks/data.rb#62
  def external_key?(key, locale = T.unsafe(nil)); end

  # whether the value for key exists in locale (defaults: base_locale)
  #
  # @return [Boolean]
  #
  # source://i18n-tasks//lib/i18n/tasks/data.rb#58
  def key_value?(key, locale = T.unsafe(nil)); end

  # source://i18n-tasks//lib/i18n/tasks/data.rb#44
  def node(key, locale = T.unsafe(nil)); end

  # @param locales [Array<String>] locales to check. Default: all.
  # @return [Array<String>] paths to data that requires normalization
  #
  # source://i18n-tasks//lib/i18n/tasks/data.rb#83
  def non_normalized_paths(locales: T.unsafe(nil)); end

  # Normalize all the locale data in the store (by writing to the store).
  #
  # @param locales [Array<String>] locales to normalize. Default: all.
  # @param force_pattern_router [Boolean] Whether to use pattern router regardless of the config.
  #
  # source://i18n-tasks//lib/i18n/tasks/data.rb#70
  def normalize_store!(locales: T.unsafe(nil), force_pattern_router: T.unsafe(nil)); end

  # source://i18n-tasks//lib/i18n/tasks/data.rb#36
  def t(key, locale = T.unsafe(nil)); end

  # source://i18n-tasks//lib/i18n/tasks/data.rb#52
  def t_proc(locale = T.unsafe(nil)); end

  # source://i18n-tasks//lib/i18n/tasks/data.rb#40
  def tree(sel); end
end

# source://i18n-tasks//lib/i18n/tasks/data/adapter/json_adapter.rb#7
module I18n::Tasks::Data::Adapter; end

# source://i18n-tasks//lib/i18n/tasks/data/adapter/json_adapter.rb#8
module I18n::Tasks::Data::Adapter::JsonAdapter
  class << self
    # @return [String]
    #
    # source://i18n-tasks//lib/i18n/tasks/data/adapter/json_adapter.rb#16
    def dump(tree, opts); end

    # @return [Hash] locale tree
    #
    # source://i18n-tasks//lib/i18n/tasks/data/adapter/json_adapter.rb#11
    def parse(str, opts); end

    private

    # source://i18n-tasks//lib/i18n/tasks/data/adapter/json_adapter.rb#22
    def parse_opts(opts); end
  end
end

# source://i18n-tasks//lib/i18n/tasks/data/adapter/yaml_adapter.rb#7
module I18n::Tasks::Data::Adapter::YamlAdapter
  class << self
    # @return [String]
    #
    # source://i18n-tasks//lib/i18n/tasks/data/adapter/yaml_adapter.rb#23
    def dump(tree, options); end

    # @return [Hash] locale tree
    #
    # source://i18n-tasks//lib/i18n/tasks/data/adapter/yaml_adapter.rb#13
    def parse(str, options); end

    # @return [String]
    #
    # source://i18n-tasks//lib/i18n/tasks/data/adapter/yaml_adapter.rb#28
    def restore_emojis(yaml); end

    # @return [String]
    #
    # source://i18n-tasks//lib/i18n/tasks/data/adapter/yaml_adapter.rb#33
    def strip_trailing_spaces(yaml); end
  end
end

# source://i18n-tasks//lib/i18n/tasks/data/adapter/yaml_adapter.rb#8
I18n::Tasks::Data::Adapter::YamlAdapter::EMOJI_REGEX = T.let(T.unsafe(nil), Regexp)

# source://i18n-tasks//lib/i18n/tasks/data/adapter/yaml_adapter.rb#9
I18n::Tasks::Data::Adapter::YamlAdapter::TRAILING_SPACE_REGEX = T.let(T.unsafe(nil), Regexp)

# source://i18n-tasks//lib/i18n/tasks/data.rb#7
I18n::Tasks::Data::DATA_DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://i18n-tasks//lib/i18n/tasks/data/file_formats.rb#8
module I18n::Tasks::Data::FileFormats
  mixes_in_class_methods ::I18n::Tasks::Data::FileFormats::ClassMethods

  # source://i18n-tasks//lib/i18n/tasks/data/file_formats.rb#13
  def adapter_dump(tree, format); end

  # source://i18n-tasks//lib/i18n/tasks/data/file_formats.rb#22
  def adapter_op(op, format, tree, config); end

  # @return [Hash]
  #
  # source://i18n-tasks//lib/i18n/tasks/data/file_formats.rb#18
  def adapter_parse(tree, format); end

  protected

  # @return [Hash]
  #
  # source://i18n-tasks//lib/i18n/tasks/data/file_formats.rb#39
  def load_file(path); end

  # @return [Boolean]
  #
  # source://i18n-tasks//lib/i18n/tasks/data/file_formats.rb#61
  def normalized?(path, tree); end

  # source://i18n-tasks//lib/i18n/tasks/data/file_formats.rb#34
  def read_config(format); end

  # @return [String]
  #
  # source://i18n-tasks//lib/i18n/tasks/data/file_formats.rb#46
  def read_file(path); end

  # source://i18n-tasks//lib/i18n/tasks/data/file_formats.rb#30
  def write_config(format); end

  # source://i18n-tasks//lib/i18n/tasks/data/file_formats.rb#50
  def write_tree(path, tree, sort = T.unsafe(nil)); end

  class << self
    # @private
    #
    # source://i18n-tasks//lib/i18n/tasks/data/file_formats.rb#9
    def included(base); end
  end
end

# source://i18n-tasks//lib/i18n/tasks/data/file_formats.rb#67
module I18n::Tasks::Data::FileFormats::ClassMethods
  # source://i18n-tasks//lib/i18n/tasks/data/file_formats.rb#86
  def adapter_by_name(name); end

  # source://i18n-tasks//lib/i18n/tasks/data/file_formats.rb#74
  def adapter_name_for_path(path); end

  # source://i18n-tasks//lib/i18n/tasks/data/file_formats.rb#82
  def adapter_names; end

  # @param pattern [String] File.fnmatch pattern
  # @param adapter [responds to parse(string)-] hash and dump(hash)->string]
  #
  # source://i18n-tasks//lib/i18n/tasks/data/file_formats.rb#70
  def register_adapter(name, pattern, adapter); end
end

# source://i18n-tasks//lib/i18n/tasks/data/file_system.rb#9
class I18n::Tasks::Data::FileSystem < ::I18n::Tasks::Data::FileSystemBase; end

# source://i18n-tasks//lib/i18n/tasks/data/file_system_base.rb#11
class I18n::Tasks::Data::FileSystemBase
  include ::I18n::Tasks::Data::FileFormats
  include ::I18n::Tasks::Logging
  extend ::I18n::Tasks::Data::FileFormats::ClassMethods

  # @return [FileSystemBase] a new instance of FileSystemBase
  #
  # source://i18n-tasks//lib/i18n/tasks/data/file_system_base.rb#24
  def initialize(config = T.unsafe(nil)); end

  # @param locale [String, Symbol]
  # @return [::I18n::Tasks::Data::Siblings]
  #
  # source://i18n-tasks//lib/i18n/tasks/data/file_system_base.rb#39
  def [](locale); end

  # set locale tree
  #
  # @param locale [String, Symbol]
  # @param tree [::I18n::Tasks::Data::Siblings]
  #
  # source://i18n-tasks//lib/i18n/tasks/data/file_system_base.rb#58
  def []=(locale, tree); end

  # Get available locales from the list of file names to read
  #
  # source://i18n-tasks//lib/i18n/tasks/data/file_system_base.rb#115
  def available_locales; end

  # Returns the value of attribute base_locale.
  #
  # source://i18n-tasks//lib/i18n/tasks/data/file_system_base.rb#16
  def base_locale; end

  # Returns the value of attribute config.
  #
  # source://i18n-tasks//lib/i18n/tasks/data/file_system_base.rb#16
  def config; end

  # source://i18n-tasks//lib/i18n/tasks/data/file_system_base.rb#139
  def config=(config); end

  # @param locale [String, Symbol]
  # @return [::I18n::Tasks::Data::Siblings]
  #
  # source://i18n-tasks//lib/i18n/tasks/data/file_system_base.rb#49
  def external(locale); end

  # @param locale [String, Symbol]
  # @return [::I18n::Tasks::Data::Siblings]
  #
  # source://i18n-tasks//lib/i18n/tasks/data/file_system_base.rb#39
  def get(locale); end

  # Returns the value of attribute locales.
  #
  # source://i18n-tasks//lib/i18n/tasks/data/file_system_base.rb#15
  def locales; end

  # Sets the attribute locales
  #
  # @param value the value to set the attribute locales to.
  #
  # source://i18n-tasks//lib/i18n/tasks/data/file_system_base.rb#15
  def locales=(_arg0); end

  # source://i18n-tasks//lib/i18n/tasks/data/file_system_base.rb#88
  def merge!(forest); end

  # @param locale [String]
  # @return [Array<String>] paths to files that are not normalized
  #
  # source://i18n-tasks//lib/i18n/tasks/data/file_system_base.rb#78
  def non_normalized_paths(locale); end

  # @return self
  #
  # source://i18n-tasks//lib/i18n/tasks/data/file_system_base.rb#108
  def reload; end

  # source://i18n-tasks//lib/i18n/tasks/data/file_system_base.rb#97
  def remove_by_key!(forest); end

  # source://i18n-tasks//lib/i18n/tasks/data/file_system_base.rb#156
  def router; end

  # Sets the attribute router
  #
  # @param value the value to set the attribute router to.
  #
  # source://i18n-tasks//lib/i18n/tasks/data/file_system_base.rb#17
  def router=(_arg0); end

  # set locale tree
  #
  # @param locale [String, Symbol]
  # @param tree [::I18n::Tasks::Data::Siblings]
  #
  # source://i18n-tasks//lib/i18n/tasks/data/file_system_base.rb#58
  def set(locale, tree); end

  # source://i18n-tasks//lib/i18n/tasks/data/file_system_base.rb#132
  def t(key, locale); end

  # source://i18n-tasks//lib/i18n/tasks/data/file_system_base.rb#144
  def with_router(router); end

  # source://i18n-tasks//lib/i18n/tasks/data/file_system_base.rb#84
  def write(forest); end

  protected

  # source://i18n-tasks//lib/i18n/tasks/data/file_system_base.rb#180
  def filter_nil_keys!(path, data, suffix = T.unsafe(nil)); end

  # source://i18n-tasks//lib/i18n/tasks/data/file_system_base.rb#167
  def read_locale(locale, paths: T.unsafe(nil)); end
end

# source://i18n-tasks//lib/i18n/tasks/data/file_system_base.rb#19
I18n::Tasks::Data::FileSystemBase::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://i18n-tasks//lib/i18n/tasks/data/file_system_base.rb#152
I18n::Tasks::Data::FileSystemBase::ROUTER_NAME_ALIASES = T.let(T.unsafe(nil), Hash)

# source://i18n-tasks//lib/i18n/tasks/data/router/pattern_router.rb#7
module I18n::Tasks::Data::Router; end

# Keep the path, or infer from base locale
#
# source://i18n-tasks//lib/i18n/tasks/data/router/conservative_router.rb#8
class I18n::Tasks::Data::Router::ConservativeRouter < ::I18n::Tasks::Data::Router::PatternRouter
  # @return [ConservativeRouter] a new instance of ConservativeRouter
  #
  # source://i18n-tasks//lib/i18n/tasks/data/router/conservative_router.rb#9
  def initialize(adapter, config); end

  # source://i18n-tasks//lib/i18n/tasks/data/router/conservative_router.rb#16
  def route(locale, forest, &block); end

  protected

  # Returns the value of attribute adapter.
  #
  # source://i18n-tasks//lib/i18n/tasks/data/router/conservative_router.rb#59
  def adapter; end

  # Returns the value of attribute base_locale.
  #
  # source://i18n-tasks//lib/i18n/tasks/data/router/conservative_router.rb#59
  def base_locale; end

  # source://i18n-tasks//lib/i18n/tasks/data/router/conservative_router.rb#51
  def base_tree; end

  # source://i18n-tasks//lib/i18n/tasks/data/router/conservative_router.rb#55
  def key_path(locale, key); end

  # Returns the value of attribute locales.
  #
  # source://i18n-tasks//lib/i18n/tasks/data/router/conservative_router.rb#59
  def locales; end
end

# Route based on key name
#
# source://i18n-tasks//lib/i18n/tasks/data/router/pattern_router.rb#9
class I18n::Tasks::Data::Router::PatternRouter
  include ::I18n::Tasks::KeyPatternMatching

  # @example
  #   {write:
  #   # keys matched top to bottom
  #   [['devise.*', 'config/locales/devise.%{locale}.yml'],
  #   # default catch-all (same as ['*', 'config/locales/%{locale}.yml'])
  #   'config/locales/%{locale}.yml']}
  # @option data_config
  # @param data_config [Hash] a customizable set of options
  # @return [PatternRouter] a new instance of PatternRouter
  #
  # source://i18n-tasks//lib/i18n/tasks/data/router/pattern_router.rb#21
  def initialize(_adapter, data_config); end

  # Route keys to destinations
  #
  # @param forest [I18n::Tasks::Data::Tree::Siblings] forest roots are locales.
  # @return [Hash] mapping of destination => [ [key, value], ... ]
  # @yieldparam dest_path [String]
  # @yieldparam tree_slice [I18n::Tasks::Data::Tree::Siblings]
  #
  # source://i18n-tasks//lib/i18n/tasks/data/router/pattern_router.rb#31
  def route(locale, forest, &block); end

  # Returns the value of attribute routes.
  #
  # source://i18n-tasks//lib/i18n/tasks/data/router/pattern_router.rb#12
  def routes; end

  private

  # source://i18n-tasks//lib/i18n/tasks/data/router/pattern_router.rb#55
  def compile_routes(routes); end
end

# source://i18n-tasks//lib/i18n/tasks/data/tree/traversal.rb#6
module I18n::Tasks::Data::Tree; end

# source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#6
class I18n::Tasks::Data::Tree::Node
  include ::Enumerable
  include ::I18n::Tasks::Data::Tree::Traversal

  # @return [Node] a new instance of Node
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#14
  def initialize(key:, value: T.unsafe(nil), data: T.unsafe(nil), parent: T.unsafe(nil), children: T.unsafe(nil), warn_about_add_children_to_leaf: T.unsafe(nil)); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#89
  def [](key); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#135
  def []=(full_key, node); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#105
  def append(nodes); end

  # append and reparent nodes
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#96
  def append!(nodes); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#25
  def attributes; end

  # Returns the value of attribute children.
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#11
  def children; end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#33
  def children=(children); end

  # @return [Boolean]
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#73
  def children?; end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#77
  def data; end

  # @return [Boolean]
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#81
  def data?; end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#29
  def derive(new_attr = T.unsafe(nil)); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#49
  def each(&block); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#178
  def format_value_for_inspect(value); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#109
  def full_key(root: T.unsafe(nil)); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#89
  def get(key); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#167
  def inspect(level = T.unsafe(nil)); end

  # Returns the value of attribute key.
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#11
  def key; end

  # @return [Boolean]
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#60
  def leaf?; end

  # Returns the value of attribute parent.
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#11
  def parent; end

  # @return [Boolean]
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#69
  def parent?; end

  # @return [Boolean]
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#85
  def reference?; end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#121
  def root; end

  # a node with key nil is considered Empty. this is to allow for using these nodes instead of nils
  #
  # @return [Boolean]
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#65
  def root?; end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#135
  def set(full_key, node); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#151
  def to_hash(sort = T.unsafe(nil)); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#164
  def to_json(*_arg0, **_arg1, &_arg2); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#143
  def to_nodes; end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#147
  def to_siblings; end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#165
  def to_yaml(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute value.
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#10
  def value; end

  # Sets the attribute value
  #
  # @param value the value to set the attribute value to.
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#10
  def value=(_arg0); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#56
  def value_or_children_hash; end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#127
  def walk_from_root(&visitor); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#114
  def walk_to_root(&visitor); end

  protected

  # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#188
  def dirty!; end

  class << self
    # value can be a nested hash
    #
    # source://i18n-tasks//lib/i18n/tasks/data/tree/node.rb#195
    def from_key_value(key, value); end
  end
end

# A list of nodes
#
# source://i18n-tasks//lib/i18n/tasks/data/tree/nodes.rb#6
class I18n::Tasks::Data::Tree::Nodes
  include ::Enumerable
  include ::I18n::Tasks::Data::Tree::Traversal

  # @return [Nodes] a new instance of Nodes
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/nodes.rb#12
  def initialize(opts = T.unsafe(nil)); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/nodes.rb#72
  def +(nodes); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/nodes.rb#66
  def <<(other); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/nodes.rb#66
  def append(other); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/nodes.rb#60
  def append!(other); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/nodes.rb#22
  def attributes; end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/nodes.rb#16
  def blank?(*_arg0, **_arg1, &_arg2); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/nodes.rb#79
  def children(&block); end

  def children?(*_arg0); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/nodes.rb#26
  def derive(new_attr = T.unsafe(nil)); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/nodes.rb#16
  def each(*_arg0, **_arg1, &_arg2); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/nodes.rb#16
  def empty?(*_arg0, **_arg1, &_arg2); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/nodes.rb#44
  def inspect; end

  # Returns the value of attribute list.
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/nodes.rb#10
  def list; end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/nodes.rb#72
  def merge!(nodes); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/nodes.rb#16
  def present?(*_arg0, **_arg1, &_arg2); end

  # methods below change state
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/nodes.rb#54
  def remove!(node); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/nodes.rb#16
  def size(*_arg0, **_arg1, &_arg2); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/nodes.rb#16
  def to_a(*_arg0, **_arg1, &_arg2); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/nodes.rb#33
  def to_hash(sort = T.unsafe(nil)); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/nodes.rb#41
  def to_json(*_arg0, **_arg1, &_arg2); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/nodes.rb#18
  def to_nodes; end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/nodes.rb#42
  def to_yaml(*_arg0, **_arg1, &_arg2); end

  protected

  # source://i18n-tasks//lib/i18n/tasks/data/tree/nodes.rb#91
  def dirty!; end
end

# Siblings represents a subtree sharing a common parent
# in case of an empty parent (nil) it represents a forest
# siblings' keys are unique
#
# source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#11
class I18n::Tasks::Data::Tree::Siblings < ::I18n::Tasks::Data::Tree::Nodes
  include ::I18n::Tasks::SplitKey
  include ::I18n::Tasks::PluralKeys
  extend ::I18n::Tasks::SplitKey

  # @return [Siblings] a new instance of Siblings
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#17
  def initialize(opts = T.unsafe(nil)); end

  # @return [Node] by full key
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#83
  def [](full_key); end

  # add or replace node by full key
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#93
  def []=(full_key, node); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#142
  def append(nodes); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#132
  def append!(nodes); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#25
  def attributes; end

  # @return [Node] by full key
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#83
  def get(full_key); end

  # Returns the value of attribute key_to_node.
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#15
  def key_to_node; end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#155
  def merge(nodes); end

  # @param on_leaves_merge [Proc] invoked when a leaf is merged with another leaf
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#147
  def merge!(nodes, on_leaves_merge: T.unsafe(nil)); end

  # @param on_leaves_merge [Proc] invoked when a leaf is merged with another leaf
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#184
  def merge_node!(node, on_leaves_merge: T.unsafe(nil)); end

  # @param from_pattern [Regexp]
  # @param to_pattern [Regexp]
  # @param root [Boolean]
  # @return [old key => new key]
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#39
  def mv_key!(from_pattern, to_pattern, root: T.unsafe(nil)); end

  # Returns the value of attribute parent.
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#15
  def parent; end

  # methods below change state
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#126
  def remove!(node); end

  # @param nodes [Enumerable] Modified in-place.
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#208
  def remove_nodes_and_emptied_ancestors(nodes); end

  # @param nodes [Enumerable] Modified in-place.
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#214
  def remove_nodes_and_emptied_ancestors!(nodes); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#29
  def rename_key(key, new_key); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#77
  def replace_node!(node, new_node); end

  # add or replace node by full key
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#93
  def set(full_key, node); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#175
  def set_root_key!(new_key, data = T.unsafe(nil)); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#167
  def subtract_by_key(other); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#171
  def subtract_by_key!(other); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#159
  def subtract_keys(keys); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#163
  def subtract_keys!(keys); end

  private

  # Adds all the ancestors that only contain the given nodes as descendants to the given nodes.
  #
  # @param nodes [Set] Modified in-place.
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#230
  def add_ancestors_that_only_contain_nodes!(nodes); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#236
  def conditionally_warn_add_children_to_leaf(node, children); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#221
  def find_nodes(keys); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#243
  def warn_add_children_to_leaf(node); end

  class << self
    # build forest from nested hash, e.g. {'es' => { 'common' => { name => 'Nombre', 'age' => 'Edad' } } }
    # this is the native i18n gem format
    #
    # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#300
    def [](hash, opts = T.unsafe(nil)); end

    # @yield [forest]
    #
    # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#254
    def build_forest(opts = T.unsafe(nil), &block); end

    # build forest from [[Full Key, Value]]
    #
    # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#311
    def from_flat_pairs(pairs); end

    # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#276
    def from_key_attr(key_attrs, opts = T.unsafe(nil), &block); end

    # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#288
    def from_key_names(keys, opts = T.unsafe(nil), &block); end

    # @param key_occurrences [I18n::Tasks::Scanners::KeyOccurrences]
    # @return [Siblings]
    #
    # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#265
    def from_key_occurrences(key_occurrences); end

    # build forest from nested hash, e.g. {'es' => { 'common' => { name => 'Nombre', 'age' => 'Edad' } } }
    # this is the native i18n gem format
    #
    # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#300
    def from_nested_hash(hash, opts = T.unsafe(nil)); end

    # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#250
    def null; end

    private

    # source://i18n-tasks//lib/i18n/tasks/data/tree/siblings.rb#321
    def parse_parent_opt!(opts); end
  end
end

# Any Enumerable that yields nodes can mix in this module
#
# source://i18n-tasks//lib/i18n/tasks/data/tree/traversal.rb#8
module I18n::Tasks::Data::Tree::Traversal
  # source://i18n-tasks//lib/i18n/tasks/data/tree/traversal.rb#38
  def breadth_first(&visitor); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/traversal.rb#47
  def depth_first(&visitor); end

  # @return [Set<I18n::Tasks::Data::Tree::Node>]
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/traversal.rb#139
  def get_nodes_by_key_filter(root: T.unsafe(nil), &block); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/traversal.rb#163
  def grep_keys(match, opts = T.unsafe(nil)); end

  # @return [Siblings]
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/traversal.rb#152
  def intersect_keys(other_tree, key_opts = T.unsafe(nil), &block); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/traversal.rb#69
  def key_names(root: T.unsafe(nil)); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/traversal.rb#73
  def key_values(root: T.unsafe(nil)); end

  # @option root
  # @param root [Hash] a customizable set of options
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/traversal.rb#62
  def keys(root: T.unsafe(nil), &visitor); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/traversal.rb#13
  def leaves(&visitor); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/traversal.rb#22
  def levels(&block); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/traversal.rb#9
  def nodes(&block); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/traversal.rb#83
  def root_key_value_data(sort = T.unsafe(nil)); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/traversal.rb#77
  def root_key_values(sort = T.unsafe(nil)); end

  # @return [Siblings]
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/traversal.rb#123
  def select_keys(root: T.unsafe(nil), &block); end

  # @return [Siblings]
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/traversal.rb#131
  def select_keys!(root: T.unsafe(nil), &block); end

  # Select the nodes for which the block returns true. Pre-order traversal.
  #
  # @return [Siblings] a new tree
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/traversal.rb#93
  def select_nodes(&block); end

  # Select the nodes for which the block returns true. Pre-order traversal.
  #
  # @return [Siblings] self
  #
  # source://i18n-tasks//lib/i18n/tasks/data/tree/traversal.rb#108
  def select_nodes!(&block); end

  # source://i18n-tasks//lib/i18n/tasks/data/tree/traversal.rb#169
  def set_each_value!(val_pattern, key_pattern = T.unsafe(nil), &value_proc); end
end

# source://i18n-tasks//lib/i18n/tasks/html_keys.rb#4
module I18n::Tasks::HtmlKeys
  # @return [Boolean]
  #
  # source://i18n-tasks//lib/i18n/tasks/html_keys.rb#8
  def html_key?(full_key, locale); end
end

# source://i18n-tasks//lib/i18n/tasks/html_keys.rb#5
I18n::Tasks::HtmlKeys::HTML_KEY_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://i18n-tasks//lib/i18n/tasks/html_keys.rb#6
I18n::Tasks::HtmlKeys::MAYBE_PLURAL_HTML_KEY_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://i18n-tasks//lib/i18n/tasks/ignore_keys.rb#3
module I18n::Tasks::IgnoreKeys
  # whether to ignore the key
  # will also apply global ignore rules
  #
  # @param ignore_type [:missing, :unused, :eq_base]
  # @return [Boolean]
  #
  # source://i18n-tasks//lib/i18n/tasks/ignore_keys.rb#7
  def ignore_key?(key, ignore_type, locale = T.unsafe(nil)); end

  # @param type [nil, :missing, :unused, :eq_base] type
  # @param locale [String] only when type is :eq_base
  # @return [Regexp] a regexp that matches all the keys ignored for the type (and locale)
  #
  # source://i18n-tasks//lib/i18n/tasks/ignore_keys.rb#14
  def ignore_pattern(type, locale = T.unsafe(nil)); end
end

# source://i18n-tasks//lib/i18n/tasks/interpolations.rb#4
module I18n::Tasks::Interpolations
  # source://i18n-tasks//lib/i18n/tasks/interpolations.rb#10
  def inconsistent_interpolations(locales: T.unsafe(nil), base_locale: T.unsafe(nil)); end

  class << self
    # Returns the value of attribute variable_regex.
    #
    # source://i18n-tasks//lib/i18n/tasks/interpolations.rb#6
    def variable_regex; end

    # Sets the attribute variable_regex
    #
    # @param value the value to set the attribute variable_regex to.
    #
    # source://i18n-tasks//lib/i18n/tasks/interpolations.rb#6
    def variable_regex=(_arg0); end
  end
end

# source://i18n-tasks//lib/i18n/tasks/key_pattern_matching.rb#5
module I18n::Tasks::KeyPatternMatching
  extend ::I18n::Tasks::KeyPatternMatching

  # convert pattern to regex
  # In patterns:
  #      *     is like .* in regexs
  #      :     matches a single key
  #      *:    matches part of a single key, equivalent to `[^.]+?` regex
  #   { a, b.c } match any in set, can use : and *, match is captured
  #
  # source://i18n-tasks//lib/i18n/tasks/key_pattern_matching.rb#26
  def compile_key_pattern(key_pattern); end

  # one regex to match any
  #
  # source://i18n-tasks//lib/i18n/tasks/key_pattern_matching.rb#11
  def compile_patterns_re(key_patterns); end

  # source://i18n-tasks//lib/i18n/tasks/key_pattern_matching.rb#32
  def key_pattern_re_body(key_pattern); end
end

# source://i18n-tasks//lib/i18n/tasks/key_pattern_matching.rb#8
I18n::Tasks::KeyPatternMatching::MATCH_NOTHING = T.let(T.unsafe(nil), Regexp)

# source://i18n-tasks//lib/i18n/tasks/locale_list.rb#4
module I18n::Tasks::LocaleList
  private

  # @return locales converted to strings, with base locale first, the rest sorted alphabetically
  #
  # source://i18n-tasks//lib/i18n/tasks/locale_list.rb#8
  def normalize_locale_list(locales, base_locale, include_base = T.unsafe(nil)); end

  class << self
    # @return locales converted to strings, with base locale first, the rest sorted alphabetically
    #
    # source://i18n-tasks//lib/i18n/tasks/locale_list.rb#8
    def normalize_locale_list(locales, base_locale, include_base = T.unsafe(nil)); end
  end
end

# source://i18n-tasks//lib/i18n/tasks/locale_pathname.rb#4
module I18n::Tasks::LocalePathname
  class << self
    # source://i18n-tasks//lib/i18n/tasks/locale_pathname.rb#6
    def replace_locale(path, from, to); end

    private

    # source://i18n-tasks//lib/i18n/tasks/locale_pathname.rb#12
    def path_locale_re(locale); end
  end
end

# source://i18n-tasks//lib/i18n/tasks/logging.rb#3
module I18n::Tasks::Logging
  private

  # source://i18n-tasks//lib/i18n/tasks/logging.rb#21
  def log_error(message); end

  # source://i18n-tasks//lib/i18n/tasks/logging.rb#25
  def log_stderr(*args); end

  # source://i18n-tasks//lib/i18n/tasks/logging.rb#13
  def log_verbose(message = T.unsafe(nil)); end

  # source://i18n-tasks//lib/i18n/tasks/logging.rb#17
  def log_warn(message); end

  # source://i18n-tasks//lib/i18n/tasks/logging.rb#32
  def program_name; end

  # source://i18n-tasks//lib/i18n/tasks/logging.rb#9
  def warn_deprecated(message); end

  class << self
    # source://i18n-tasks//lib/i18n/tasks/logging.rb#21
    def log_error(message); end

    # source://i18n-tasks//lib/i18n/tasks/logging.rb#25
    def log_stderr(*args); end

    # source://i18n-tasks//lib/i18n/tasks/logging.rb#13
    def log_verbose(message = T.unsafe(nil)); end

    # source://i18n-tasks//lib/i18n/tasks/logging.rb#17
    def log_warn(message); end

    # source://i18n-tasks//lib/i18n/tasks/logging.rb#32
    def program_name; end

    # source://i18n-tasks//lib/i18n/tasks/logging.rb#9
    def warn_deprecated(message); end
  end
end

# source://i18n-tasks//lib/i18n/tasks/logging.rb#6
I18n::Tasks::Logging::MUTEX = T.let(T.unsafe(nil), Thread::Mutex)

# source://i18n-tasks//lib/i18n/tasks/logging.rb#7
I18n::Tasks::Logging::PROGRAM_NAME = T.let(T.unsafe(nil), String)

# source://i18n-tasks//lib/i18n/tasks/missing_keys.rb#5
module I18n::Tasks::MissingKeys
  # @param forest [::I18n::Tasks::Data::Tree::Siblings]
  # @yield [::I18n::Tasks::Data::Tree::Node]
  # @yieldreturn [Boolean] whether to collapse the node
  #
  # source://i18n-tasks//lib/i18n/tasks/missing_keys.rb#131
  def collapse_same_key_in_locales!(forest); end

  # source://i18n-tasks//lib/i18n/tasks/missing_keys.rb#31
  def eq_base_keys(opts = T.unsafe(nil)); end

  # source://i18n-tasks//lib/i18n/tasks/missing_keys.rb#116
  def equal_values_tree(locale, compare_to = T.unsafe(nil)); end

  # Loads rails-i18n pluralization config for the given locale.
  #
  # source://i18n-tasks//lib/i18n/tasks/missing_keys.rb#90
  def load_rails_i18n_pluralization!(locale); end

  # @return [Boolean]
  #
  # source://i18n-tasks//lib/i18n/tasks/missing_keys.rb#124
  def locale_key_missing?(locale, key); end

  # source://i18n-tasks//lib/i18n/tasks/missing_keys.rb#38
  def missing_diff_forest(locales, base = T.unsafe(nil)); end

  # keys present in compared_to, but not in locale
  #
  # source://i18n-tasks//lib/i18n/tasks/missing_keys.rb#96
  def missing_diff_tree(locale, compared_to = T.unsafe(nil)); end

  # @param types [:used, :diff, :plural] all if `nil`.
  # @return [Siblings]
  #
  # source://i18n-tasks//lib/i18n/tasks/missing_keys.rb#22
  def missing_keys(locales: T.unsafe(nil), types: T.unsafe(nil), base_locale: T.unsafe(nil)); end

  # source://i18n-tasks//lib/i18n/tasks/missing_keys.rb#16
  def missing_keys_types; end

  # source://i18n-tasks//lib/i18n/tasks/missing_keys.rb#59
  def missing_plural_forest(locales, _base = T.unsafe(nil)); end

  # source://i18n-tasks//lib/i18n/tasks/missing_keys.rb#53
  def missing_used_forest(locales, _base = T.unsafe(nil)); end

  # keys used in the code missing translations in locale
  #
  # source://i18n-tasks//lib/i18n/tasks/missing_keys.rb#110
  def missing_used_tree(locale); end

  # source://i18n-tasks//lib/i18n/tasks/missing_keys.rb#82
  def required_plural_keys_for_locale(locale); end

  private

  # source://i18n-tasks//lib/i18n/tasks/missing_keys.rb#173
  def alternate_locale_from(locale); end

  # source://i18n-tasks//lib/i18n/tasks/missing_keys.rb#160
  def plural_keys_for_locale(locale); end

  # source://i18n-tasks//lib/i18n/tasks/missing_keys.rb#181
  def set_from_rails_i18n_pluralization(configuration, locale); end

  class << self
    # source://i18n-tasks//lib/i18n/tasks/missing_keys.rb#12
    def missing_keys_types; end
  end
end

# source://i18n-tasks//lib/i18n/tasks/missing_keys.rb#6
I18n::Tasks::MissingKeys::MISSING_TYPES = T.let(T.unsafe(nil), Array)

# source://i18n-tasks//lib/i18n/tasks/plural_keys.rb#4
module I18n::Tasks::PluralKeys
  # source://i18n-tasks//lib/i18n/tasks/plural_keys.rb#10
  def collapse_plural_nodes!(tree); end

  # @param key [String] i18n key
  # @param locale [String] to pull key data from
  # @return [String] the base form if the key is a specific plural form (e.g. apple for apple.many), the key otherwise.
  #
  # source://i18n-tasks//lib/i18n/tasks/plural_keys.rb#25
  def depluralize_key(key, locale = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://i18n-tasks//lib/i18n/tasks/plural_keys.rb#54
  def plural_forms?(s); end

  # @param tree [::I18n::Tasks::Data::Tree::Traversal]
  # @yieldparam node [::I18n::Tasks::Data::Tree::Node] plural node
  #
  # source://i18n-tasks//lib/i18n/tasks/plural_keys.rb#40
  def plural_nodes(tree); end

  # @return [Boolean]
  #
  # source://i18n-tasks//lib/i18n/tasks/plural_keys.rb#58
  def plural_suffix?(key); end
end

# Ref: http://cldr.unicode.org/index/cldr-spec/plural-rules
#
# source://i18n-tasks//lib/i18n/tasks/plural_keys.rb#6
I18n::Tasks::PluralKeys::CLDR_CATEGORY_KEYS = T.let(T.unsafe(nil), Array)

# source://i18n-tasks//lib/i18n/tasks/plural_keys.rb#8
I18n::Tasks::PluralKeys::PLURAL_KEY_RE = T.let(T.unsafe(nil), Regexp)

# source://i18n-tasks//lib/i18n/tasks/plural_keys.rb#7
I18n::Tasks::PluralKeys::PLURAL_KEY_SUFFIXES = T.let(T.unsafe(nil), Set)

# source://i18n-tasks//lib/i18n/tasks/references.rb#4
module I18n::Tasks::References
  # Given a raw usage tree and a tree of reference keys in the data, return 3 trees:
  # 1. Raw references -- a subset of the usages tree with keys that are reference key usages.
  # 2. Resolved references -- all the used references in their fully resolved form.
  # 3. Reference keys -- all the used reference keys.
  #
  # source://i18n-tasks//lib/i18n/tasks/references.rb#9
  def process_references(usages, data_refs = T.unsafe(nil)); end

  private

  # @param ref_data [Hash]
  # @param new_resolved_refs [I18n::Tasks::Data::Tree::Siblings]
  #
  # source://i18n-tasks//lib/i18n/tasks/references.rb#55
  def add_occurences!(ref_data, new_resolved_refs); end

  # Given a forest of references, merge trees into one tree, ensuring there are no conflicting references.
  #
  # @param roots [I18n::Tasks::Data::Tree::Siblings]
  # @return [I18n::Tasks::Data::Tree::Siblings]
  #
  # source://i18n-tasks//lib/i18n/tasks/references.rb#79
  def merge_reference_trees(roots); end

  # @param ref [I18n::Tasks::Data::Tree::Node]
  # @param usage [I18n::Tasks::Data::Tree::Node]
  # @param raw_refs [I18n::Tasks::Data::Tree::Siblings]
  # @param resolved_refs [I18n::Tasks::Data::Tree::Siblings]
  # @param refs [I18n::Tasks::Data::Tree::Siblings]
  #
  # source://i18n-tasks//lib/i18n/tasks/references.rb#38
  def process_leaf!(ref, usage, raw_refs, resolved_refs, refs); end

  # @param ref [I18n::Tasks::Data::Tree::Node]
  # @param usage [I18n::Tasks::Data::Tree::Node]
  # @param raw_refs [I18n::Tasks::Data::Tree::Siblings]
  # @param resolved_refs [I18n::Tasks::Data::Tree::Siblings]
  # @param refs [I18n::Tasks::Data::Tree::Siblings]
  #
  # source://i18n-tasks//lib/i18n/tasks/references.rb#69
  def process_non_leaf!(ref, usage, raw_refs, resolved_refs, refs); end
end

# source://i18n-tasks//lib/i18n/tasks/scanners/results/occurrence.rb#4
module I18n::Tasks::Scanners; end

# source://i18n-tasks//lib/i18n/tasks/scanners/ast_matchers/base_matcher.rb#3
module I18n::Tasks::Scanners::AstMatchers; end

# source://i18n-tasks//lib/i18n/tasks/scanners/ast_matchers/base_matcher.rb#4
class I18n::Tasks::Scanners::AstMatchers::BaseMatcher
  # @return [BaseMatcher] a new instance of BaseMatcher
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/ast_matchers/base_matcher.rb#5
  def initialize(scanner:); end

  # source://i18n-tasks//lib/i18n/tasks/scanners/ast_matchers/base_matcher.rb#9
  def convert_to_key_occurrences(send_node, _method_name, location: T.unsafe(nil)); end

  protected

  # Extract an array as a single string.
  #
  # @param array_join_with [String] joiner of the array elements.
  # @param array_flatten [Boolean] if true, nested arrays are flattened,
  #   otherwise their source is copied and surrounded by #{}.
  # @param array_reject_blank [Boolean] if true, empty strings and `nil`s are skipped.
  # @return [String, nil] `nil` is returned only when a dynamic value is encountered in strict mode.
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/ast_matchers/base_matcher.rb#94
  def extract_array_as_string(node, array_join_with:, array_flatten: T.unsafe(nil), array_reject_blank: T.unsafe(nil)); end

  # Extract the whole hash from a node of type `:hash`
  #
  # @param node [AST::Node] a node of type `:hash`.
  # @return [Hash] the whole hash from the node
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/ast_matchers/base_matcher.rb#61
  def extract_hash(node); end

  # Extract a hash pair with a given literal key.
  #
  # @param node [AST::Node] a node of type `:hash`.
  # @param key [String] node key as a string (indifferent symbol-string matching).
  # @return [AST::Node, nil] a node of type `:pair` or nil.
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/ast_matchers/base_matcher.rb#78
  def extract_hash_pair(node, key); end

  # If the node type is of `%i(sym str int false true)`, return the value as a string.
  # Otherwise, if `config[:strict]` is `false` and the type is of `%i(dstr dsym)`,
  # return the source as if it were a string.
  #
  # @param node [Parser::AST::Node]
  # @param array_join_with [String, nil] if set to a string, arrays will be processed and their elements joined.
  # @param array_flatten [Boolean] if true, nested arrays are flattened,
  #   otherwise their source is copied and surrounded by #{}. No effect unless `array_join_with` is set.
  # @param array_reject_blank [Boolean] if true, empty strings and `nil`s are skipped.
  #   No effect unless `array_join_with` is set.
  # @return [String, nil] `nil` is returned only when a dynamic value is encountered in strict mode
  #   or the node type is not supported.
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/ast_matchers/base_matcher.rb#27
  def extract_string(node, array_join_with: T.unsafe(nil), array_flatten: T.unsafe(nil), array_reject_blank: T.unsafe(nil)); end
end

# source://i18n-tasks//lib/i18n/tasks/scanners/ast_matchers/message_receivers_matcher.rb#7
class I18n::Tasks::Scanners::AstMatchers::MessageReceiversMatcher < ::I18n::Tasks::Scanners::AstMatchers::BaseMatcher
  # @return [MessageReceiversMatcher] a new instance of MessageReceiversMatcher
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/ast_matchers/message_receivers_matcher.rb#8
  def initialize(scanner:, receivers:, message:); end

  # @param send_node [Parser::AST::Node]
  # @param method_name [Symbol, nil]
  # @param location [Parser::Source::Map]
  # @return [nil, [key, Occurrence]] full absolute key name and the occurrence.
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/ast_matchers/message_receivers_matcher.rb#18
  def convert_to_key_occurrences(send_node, method_name, location: T.unsafe(nil)); end

  private

  # source://i18n-tasks//lib/i18n/tasks/scanners/ast_matchers/message_receivers_matcher.rb#51
  def full_key(receiver:, key:, location:, calling_method:); end

  # @return [Boolean]
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/ast_matchers/message_receivers_matcher.rb#44
  def node_match?(node); end

  # source://i18n-tasks//lib/i18n/tasks/scanners/ast_matchers/message_receivers_matcher.rb#64
  def process_options(node:, key:); end
end

# source://i18n-tasks//lib/i18n/tasks/scanners/ast_matchers/rails_model_matcher.rb#6
class I18n::Tasks::Scanners::AstMatchers::RailsModelMatcher < ::I18n::Tasks::Scanners::AstMatchers::BaseMatcher
  # source://i18n-tasks//lib/i18n/tasks/scanners/ast_matchers/rails_model_matcher.rb#7
  def convert_to_key_occurrences(send_node, _method_name, location: T.unsafe(nil)); end

  private

  # source://i18n-tasks//lib/i18n/tasks/scanners/ast_matchers/rails_model_matcher.rb#14
  def human_attribute_name_to_key_occurences(send_node:, location:); end

  # User.model_name.human(count: 2)
  # s(:send,
  #   s(:send,
  #     s(:const, nil, :User), :model_name), :human,
  #   s(:hash,
  #     s(:pair,
  #       s(:sym, :count),
  #       s(:int, 2))))
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/ast_matchers/rails_model_matcher.rb#43
  def model_name_human_to_key_occurences(send_node:, location:); end

  # source://i18n-tasks//lib/i18n/tasks/scanners/ast_matchers/rails_model_matcher.rb#63
  def underscore(value); end
end

# source://i18n-tasks//lib/i18n/tasks/scanners/erb_ast_processor.rb#8
class I18n::Tasks::Scanners::ErbAstProcessor
  include ::AST::Processor::Mixin

  # @return [ErbAstProcessor] a new instance of ErbAstProcessor
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/erb_ast_processor.rb#10
  def initialize; end

  # @param node [::Parser::AST::Node]
  # @return [::Parser::AST::Node]
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/erb_ast_processor.rb#40
  def handler_missing(node); end

  # source://i18n-tasks//lib/i18n/tasks/scanners/erb_ast_processor.rb#21
  def on_code(node); end

  # source://i18n-tasks//lib/i18n/tasks/scanners/erb_ast_processor.rb#16
  def process_and_extract_comments(ast); end

  private

  # Convert ERB-comments to ::Parser::Source::Comment and skip processing node
  #
  # @param node Parser::AST::Node Potential comment node
  # @return Parser::AST::Node or nil
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/erb_ast_processor.rb#56
  def handle_comment(node); end

  # @return [Boolean]
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/erb_ast_processor.rb#70
  def node?(node); end
end

# Scan for I18n.translate calls in ERB-file better-html and ASTs
#
# source://i18n-tasks//lib/i18n/tasks/scanners/erb_ast_scanner.rb#10
class I18n::Tasks::Scanners::ErbAstScanner < ::I18n::Tasks::Scanners::RubyAstScanner
  # @return [ErbAstScanner] a new instance of ErbAstScanner
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/erb_ast_scanner.rb#11
  def initialize(**args); end

  private

  # Convert BetterHtml nodes to Parser::AST::Node
  #
  # @param node BetterHtml::Parser::AST::Node
  # @return Parser::AST::Node
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/erb_ast_scanner.rb#32
  def convert_better_html(node); end

  # Parse file on path and returns AST and comments.
  #
  # @param path Path to file to parse
  # @return [{Parser::AST::Node}, [Parser::Source::Comment]]
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/erb_ast_scanner.rb#22
  def path_to_ast_and_comments(path); end
end

# A base class for a scanner that analyses files.
#
# @abstract The child must implement {#scan_file}.
# @since 0.9.0
#
# source://i18n-tasks//lib/i18n/tasks/scanners/file_scanner.rb#10
class I18n::Tasks::Scanners::FileScanner < ::I18n::Tasks::Scanners::Scanner
  # @return [FileScanner] a new instance of FileScanner
  # @since 0.9.0
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/file_scanner.rb#13
  def initialize(config: T.unsafe(nil), file_finder_provider: T.unsafe(nil), file_reader: T.unsafe(nil)); end

  # @since 0.9.0
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/file_scanner.rb#11
  def config; end

  # @return [Array<Results::KeyOccurrences>] the keys found by this scanner and their occurrences.
  # @since 0.9.0
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/file_scanner.rb#25
  def keys; end

  protected

  # @note This method is cached, it will only access the filesystem on the first invocation.
  # @since 0.9.0
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/file_scanner.rb#62
  def find_files; end

  # Read a file. Reads of the same path are cached.
  #
  # @param path [String]
  # @return [String] file contents
  # @since 0.9.0
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/file_scanner.rb#46
  def read_file(path); end

  # Extract all occurrences of translate calls from the file at the given path.
  #
  # @return [Array<[key, Results::KeyOccurrence]>] each occurrence found in the file
  # @since 0.9.0
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/file_scanner.rb#38
  def scan_file(_path); end

  # Traverse the paths and yield the matching ones.
  #
  # @note This method is cached, it will only access the filesystem on the first invocation.
  # @since 0.9.0
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/file_scanner.rb#56
  def traverse_files(&block); end
end

# source://i18n-tasks//lib/i18n/tasks/scanners/files/file_finder.rb#3
module I18n::Tasks::Scanners::Files; end

# Finds the files in the specified search paths with support for exclusion / inclusion patterns.
# Wraps a {FileFinder} and caches the results.
#
# @note This class is thread-safe. All methods are cached.
# @since 0.9.0
#
# source://i18n-tasks//lib/i18n/tasks/scanners/files/caching_file_finder.rb#12
class I18n::Tasks::Scanners::Files::CachingFileFinder < ::I18n::Tasks::Scanners::Files::FileFinder
  # @param paths [Array<String>] {Find.find}-compatible paths to traverse,
  #   absolute or relative to the working directory.
  # @param only [Array<String>, nil] {File.fnmatch}-compatible patterns files to include.
  #   Files not matching any of the inclusion patterns will be excluded.
  # @param exclude [Arry<String>] {File.fnmatch}-compatible patterns of files to exclude.
  #   Files matching any of the exclusion patterns will be excluded even if they match an inclusion pattern.
  # @return [CachingFileFinder] a new instance of CachingFileFinder
  # @since 0.9.0
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/files/caching_file_finder.rb#14
  def initialize(**args); end

  # @note This method is cached, it will only access the filesystem on the first invocation.
  # @return [Array<String>] found files
  # @since 0.9.0
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/files/caching_file_finder.rb#31
  def find_files; end

  private

  # Traverse the paths and yield the matching ones.
  #
  # @note This method is cached, it will only access the filesystem on the first invocation.
  # @return [Array<of block results>]
  # @since 0.9.0
  # @yieldparam path [String] the path of the found file.
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/files/file_finder.rb#34
  def uncached_find_files; end
end

# Finds the files and provides their contents.
#
# @note This class is thread-safe. All methods are cached.
# @since 0.9.0
#
# source://i18n-tasks//lib/i18n/tasks/scanners/files/caching_file_finder_provider.rb#11
class I18n::Tasks::Scanners::Files::CachingFileFinderProvider
  # @param exclude [Array<String>]
  # @return [CachingFileFinderProvider] a new instance of CachingFileFinderProvider
  # @since 0.9.0
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/files/caching_file_finder_provider.rb#13
  def initialize(exclude: T.unsafe(nil)); end

  # Initialize a {CachingFileFinder} or get one from cache based on the constructor arguments.
  #
  # @param paths [Array<String>] {Find.find}-compatible paths to traverse,
  #   absolute or relative to the working directory.
  # @param only [Array<String>, nil] {File.fnmatch}-compatible patterns files to include.
  #   Files not matching any of the inclusion patterns will be excluded.
  # @param exclude [Arry<String>] {File.fnmatch}-compatible patterns of files to exclude.
  #   Files matching any of the exclusion patterns will be excluded even if they match an inclusion pattern.
  # @return [CachingFileFinder]
  # @since 0.9.0
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/files/caching_file_finder_provider.rb#22
  def get(**file_finder_args); end
end

# Reads the files in 'rb' mode and UTF-8 encoding.
# Wraps a {FileReader} and caches the results.
#
# @note This class is thread-safe. All methods are cached.
# @since 0.9.0
#
# source://i18n-tasks//lib/i18n/tasks/scanners/files/caching_file_reader.rb#12
class I18n::Tasks::Scanners::Files::CachingFileReader < ::I18n::Tasks::Scanners::Files::FileReader
  # @return [CachingFileReader] a new instance of CachingFileReader
  # @since 0.9.0
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/files/caching_file_reader.rb#13
  def initialize; end

  # Return the contents of the file at the given path.
  # The file is read in the 'rb' mode and UTF-8 encoding.
  #
  # @note This method is cached, it will only access the filesystem on the first invocation.
  # @param path [String] Path to the file, absolute or relative to the working directory.
  # @return [String] file contents
  # @since 0.9.0
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/files/caching_file_reader.rb#24
  def read_file(path); end
end

# Finds the files in the specified search paths with support for exclusion / inclusion patterns.
#
# @since 0.9.0
#
# source://i18n-tasks//lib/i18n/tasks/scanners/files/file_finder.rb#7
class I18n::Tasks::Scanners::Files::FileFinder
  include ::I18n::Tasks::Logging

  # @param paths [Array<String>] {Find.find}-compatible paths to traverse,
  #   absolute or relative to the working directory.
  # @param only [Array<String>, nil] {File.fnmatch}-compatible patterns files to include.
  #   Files not matching any of the inclusion patterns will be excluded.
  # @param exclude [Arry<String>] {File.fnmatch}-compatible patterns of files to exclude.
  #   Files matching any of the exclusion patterns will be excluded even if they match an inclusion pattern.
  # @return [FileFinder] a new instance of FileFinder
  # @since 0.9.0
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/files/file_finder.rb#16
  def initialize(paths: T.unsafe(nil), only: T.unsafe(nil), exclude: T.unsafe(nil)); end

  # @return [Array<String>] found files
  # @since 0.9.0
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/files/file_finder.rb#34
  def find_files; end

  # Traverse the paths and yield the matching ones.
  #
  # @return [Array<of block results>]
  # @since 0.9.0
  # @yield [path]
  # @yieldparam path [String] the path of the found file.
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/files/file_finder.rb#29
  def traverse_files(&block); end

  private

  # @param path [String]
  # @param globs [Array<String>]
  # @return [Boolean]
  # @since 0.9.0
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/files/file_finder.rb#57
  def path_fnmatch_any?(path, globs); end
end

# Reads the files in 'rb' mode and UTF-8 encoding.
#
# @since 0.9.0
#
# source://i18n-tasks//lib/i18n/tasks/scanners/files/file_reader.rb#7
class I18n::Tasks::Scanners::Files::FileReader
  # Return the contents of the file at the given path.
  # The file is read in the 'rb' mode and UTF-8 encoding.
  #
  # @param path [String] Path to the file, absolute or relative to the working directory.
  # @return [String] file contents
  # @since 0.9.0
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/files/file_reader.rb#13
  def read_file(path); end
end

# source://i18n-tasks//lib/i18n/tasks/scanners/local_ruby_parser.rb#6
class I18n::Tasks::Scanners::LocalRubyParser
  # @return [LocalRubyParser] a new instance of LocalRubyParser
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/local_ruby_parser.rb#11
  def initialize(ignore_blocks: T.unsafe(nil)); end

  # Normalize location for comment
  #
  # @param comment [Parser::Source::Comment] A comment with local location
  # @param location [Parser::Source::Map] Global location for the parsed string
  # @return [Parser::Source::Comment]
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/local_ruby_parser.rb#76
  def normalize_comment_location(comment, location); end

  # @param node [Parser::AST::Node] Node in parsed code
  # @param location [Parser::Source::Map] Global location for the parsed string
  # @return [Parser::AST::Node]
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/local_ruby_parser.rb#37
  def normalize_location(node, location); end

  # Parse string and normalize location
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/local_ruby_parser.rb#17
  def parse(source, location: T.unsafe(nil)); end

  # Calculate location relative to a global location
  #
  # @param global_location [Parser::Source::Map] Global location where the code was parsed
  # @param local_location [Parser::Source::Map] Local location in the parsed string
  # @return [Parser::Source::Map]
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/local_ruby_parser.rb#54
  def updated_location(global_location, local_location); end
end

# ignore_blocks feature inspired by shopify/better-html
# https://github.com/Shopify/better-html/blob/087943ffd2a5877fa977d71532010b0c91239519/lib/better_html/test_helper/ruby_node.rb#L24
#
# source://i18n-tasks//lib/i18n/tasks/scanners/local_ruby_parser.rb#9
I18n::Tasks::Scanners::LocalRubyParser::BLOCK_EXPR = T.let(T.unsafe(nil), Regexp)

# source://i18n-tasks//lib/i18n/tasks/scanners/occurrence_from_position.rb#6
module I18n::Tasks::Scanners::OccurrenceFromPosition
  # Given a path to a file, its contents and a position in the file,
  # return a {Results::Occurrence} at the position until the end of the line.
  #
  # @param path [String]
  # @param contents [String] contents of the file at the path.
  # @param position [Integer] position just before the beginning of the match.
  # @return [Results::Occurrence]
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/occurrence_from_position.rb#14
  def occurrence_from_position(path, contents, position, raw_key: T.unsafe(nil)); end
end

# Maps the provided patterns to keys.
#
# source://i18n-tasks//lib/i18n/tasks/scanners/pattern_mapper.rb#10
class I18n::Tasks::Scanners::PatternMapper < ::I18n::Tasks::Scanners::FileScanner
  include ::I18n::Tasks::Scanners::RelativeKeys
  include ::I18n::Tasks::Scanners::OccurrenceFromPosition
  include ::I18n::Tasks::Scanners::RubyKeyLiterals

  # @param patterns [Array<[String, String]> the list of pattern-key pairs
  # the patterns follow the regular expression syntax, with a syntax addition for matching
  # string/symbol literals: you can include %{key} in the pattern, and it will be converted to
  # a named capture group, capturing ruby strings and symbols, that can then be used in the key:
  #
  #     patterns: [['Spree\.t[( ]\s*%{key}', 'spree.%{key}']]
  #
  # All of the named capture groups are interpolated into the key with %{group_name} interpolations.] atterns [Array<[String, String]> the list of pattern-key pairs
  #   the patterns follow the regular expression syntax, with a syntax addition for matching
  #   string/symbol literals: you can include %{key} in the pattern, and it will be converted to
  #   a named capture group, capturing ruby strings and symbols, that can then be used in the key:
  #
  #   patterns: [['Spree\.t[( ]\s*%{key}', 'spree.%{key}']]
  #
  #   All of the named capture groups are interpolated into the key with %{group_name} interpolations.
  # @return [PatternMapper] a new instance of PatternMapper
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/pattern_mapper.rb#24
  def initialize(config:, **args); end

  protected

  # @return [Array<[absolute key, Results::Occurrence]>]
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/pattern_mapper.rb#32
  def scan_file(path); end

  private

  # source://i18n-tasks//lib/i18n/tasks/scanners/pattern_mapper.rb#54
  def configure_patterns(patterns); end
end

# source://i18n-tasks//lib/i18n/tasks/scanners/pattern_mapper.rb#52
I18n::Tasks::Scanners::PatternMapper::KEY_GROUP = T.let(T.unsafe(nil), String)

# Scan for I18n.t usages using a simple regular expression.
#
# source://i18n-tasks//lib/i18n/tasks/scanners/pattern_scanner.rb#10
class I18n::Tasks::Scanners::PatternScanner < ::I18n::Tasks::Scanners::FileScanner
  include ::I18n::Tasks::Scanners::RelativeKeys
  include ::I18n::Tasks::Scanners::OccurrenceFromPosition
  include ::I18n::Tasks::Scanners::RubyKeyLiterals

  # @return [PatternScanner] a new instance of PatternScanner
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/pattern_scanner.rb#26
  def initialize(**args); end

  protected

  # source://i18n-tasks//lib/i18n/tasks/scanners/pattern_scanner.rb#87
  def closest_method(occurrence); end

  # source://i18n-tasks//lib/i18n/tasks/scanners/pattern_scanner.rb#96
  def default_pattern; end

  # @return [Boolean]
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/pattern_scanner.rb#68
  def exclude_line?(line, path); end

  # source://i18n-tasks//lib/i18n/tasks/scanners/pattern_scanner.rb#104
  def first_argument_re; end

  # @return [Boolean]
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/pattern_scanner.rb#83
  def key_relative_to_method?(path); end

  # @param match [MatchData]
  # @param path [String]
  # @return [String] full absolute key name
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/pattern_scanner.rb#63
  def match_to_key(match, path, location); end

  # Extract i18n keys from file based on the pattern which must capture the key literal.
  #
  # @return [Array<[key, Results::Occurrence]>] each occurrence found in the file
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/pattern_scanner.rb#39
  def scan_file(path); end

  # This method only exists for backwards compatibility with monkey-patches and plugins
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/pattern_scanner.rb#94
  def translate_call_re; end

  # @return [Boolean]
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/pattern_scanner.rb#75
  def valid_key?(key); end
end

# source://i18n-tasks//lib/i18n/tasks/scanners/pattern_scanner.rb#16
I18n::Tasks::Scanners::PatternScanner::IGNORE_LINES = T.let(T.unsafe(nil), Hash)

# source://i18n-tasks//lib/i18n/tasks/scanners/pattern_scanner.rb#15
I18n::Tasks::Scanners::PatternScanner::TRANSLATE_CALL_RE = T.let(T.unsafe(nil), Regexp)

# source://i18n-tasks//lib/i18n/tasks/scanners/pattern_scanner.rb#73
I18n::Tasks::Scanners::PatternScanner::VALID_KEY_RE_DYNAMIC = T.let(T.unsafe(nil), Regexp)

# Scans for I18n.t(key, scope: ...) usages
# both scope: "literal", and scope: [:array, :of, 'literals'] forms are supported
# Caveat: scope is only detected when it is the first argument
#
# source://i18n-tasks//lib/i18n/tasks/scanners/pattern_with_scope_scanner.rb#9
class I18n::Tasks::Scanners::PatternWithScopeScanner < ::I18n::Tasks::Scanners::PatternScanner
  protected

  # source://i18n-tasks//lib/i18n/tasks/scanners/pattern_with_scope_scanner.rb#12
  def default_pattern; end

  # match a limited subset of code expressions (no parenthesis, commas, etc)
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/pattern_with_scope_scanner.rb#59
  def expr_re; end

  # extract literal or array of literals
  # returns nil on any other input
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/pattern_with_scope_scanner.rb#66
  def extract_literal_or_array_of_literals(s); end

  # parse expressions with literals and variable
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/pattern_with_scope_scanner.rb#37
  def first_argument_re; end

  # Given
  #
  # @param match [MatchData]
  # @param path [String]
  # @return [String] full absolute key name with scope resolved if any
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/pattern_with_scope_scanner.rb#23
  def match_to_key(match, path, location); end

  # scope: literal or code expression or an array of these
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/pattern_with_scope_scanner.rb#51
  def scope_arg_re; end

  # strip literals, convert expressions to #{interpolations}
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/pattern_with_scope_scanner.rb#42
  def strip_literal(val); end
end

# source://i18n-tasks//lib/i18n/tasks/scanners/relative_keys.rb#6
module I18n::Tasks::Scanners::RelativeKeys
  # @param key [String] relative i18n key (starts with a .)
  # @param path [String] path to the file containing the key
  # @param roots [Array<String>] paths to relative roots
  # @param calling_method [#call, Symbol, String, false, nil]
  # @return [String] absolute version of the key
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/relative_keys.rb#12
  def absolute_key(key, path, roots: T.unsafe(nil), exclude_method_name_paths: T.unsafe(nil), calling_method: T.unsafe(nil)); end

  private

  # Expand a path and add a trailing {File::SEPARATOR}
  #
  # @param path [String] relative path
  # @return [String] absolute path, with a trailing {File::SEPARATOR}.
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/relative_keys.rb#50
  def expand_path(path); end

  # Detect the appropriate relative path root
  #
  # @param path [String] /full/path
  # @param roots [Array<String>] array of full paths
  # @return [String] the closest ancestor root for path, with a trailing {File::SEPARATOR}.
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/relative_keys.rb#39
  def path_root(path, roots); end

  # @param normalized_path [String] path/relative/to/a/root
  # @param calling_method [#call, Symbol, String, false, nil]
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/relative_keys.rb#56
  def prefix(normalized_path, calling_method: T.unsafe(nil)); end
end

# source://i18n-tasks//lib/i18n/tasks/scanners/relative_keys.rb#33
I18n::Tasks::Scanners::RelativeKeys::DOT = T.let(T.unsafe(nil), String)

# source://i18n-tasks//lib/i18n/tasks/scanners/results/occurrence.rb#5
module I18n::Tasks::Scanners::Results; end

# A scanned key and all its occurrences.
#
# @note This is a value type. Equality and hash code are determined from the attributes.
#
# source://i18n-tasks//lib/i18n/tasks/scanners/results/key_occurrences.rb#9
class I18n::Tasks::Scanners::Results::KeyOccurrences
  # @return [KeyOccurrences] a new instance of KeyOccurrences
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/results/key_occurrences.rb#16
  def initialize(key:, occurrences:); end

  # source://i18n-tasks//lib/i18n/tasks/scanners/results/key_occurrences.rb#21
  def ==(other); end

  # @return [Boolean]
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/results/key_occurrences.rb#25
  def eql?(other); end

  # source://i18n-tasks//lib/i18n/tasks/scanners/results/key_occurrences.rb#29
  def hash; end

  # source://i18n-tasks//lib/i18n/tasks/scanners/results/key_occurrences.rb#33
  def inspect; end

  # @return [String] the key.
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/results/key_occurrences.rb#11
  def key; end

  # @return [Array<Occurrence>] the key's occurrences.
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/results/key_occurrences.rb#14
  def occurrences; end

  class << self
    # Merge {KeyOccurrences} in an {Enumerable<KeyOccurrences>} so that in the resulting {Array<KeyOccurrences>}:
    # * Each key occurs only once.
    # * {Occurrence}s from multiple instances of the key are merged.
    # * The order of keys is preserved, occurrences are ordered by {Occurrence#path}.
    #
    # @param keys_occurrences [Enumerable<KeyOccurrences>]
    # @return [Array<KeyOccurrences>] a new array.
    #
    # source://i18n-tasks//lib/i18n/tasks/scanners/results/key_occurrences.rb#43
    def merge_keys(keys_occurrences); end
  end
end

# The occurrence of some key in a file.
#
# @note This is a value type. Equality and hash code are determined from the attributes.
#
# source://i18n-tasks//lib/i18n/tasks/scanners/results/occurrence.rb#9
class I18n::Tasks::Scanners::Results::Occurrence
  # @param path [String]
  # @param pos [Integer]
  # @param line_num [Integer]
  # @param line_pos [Integer]
  # @param line [String]
  # @param raw_key [String, nil]
  # @param default_arg [String, nil]
  # @return [Occurrence] a new instance of Occurrence
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/results/occurrence.rb#39
  def initialize(path:, pos:, line_num:, line_pos:, line:, raw_key: T.unsafe(nil), default_arg: T.unsafe(nil)); end

  # source://i18n-tasks//lib/i18n/tasks/scanners/results/occurrence.rb#54
  def ==(other); end

  # @return [String, nil] the value of the `default:` argument of the translate call.
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/results/occurrence.rb#26
  def default_arg; end

  # @return [Boolean]
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/results/occurrence.rb#59
  def eql?(other); end

  # source://i18n-tasks//lib/i18n/tasks/scanners/results/occurrence.rb#63
  def hash; end

  # source://i18n-tasks//lib/i18n/tasks/scanners/results/occurrence.rb#50
  def inspect; end

  # @return [String] the line of the occurrence, excluding the last LF or CRLF.
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/results/occurrence.rb#23
  def line; end

  # @return [Integer] line number of the occurrence, counting from 1.
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/results/occurrence.rb#17
  def line_num; end

  # @return [Integer] position of the start of the occurrence in the line, counting from 1.
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/results/occurrence.rb#20
  def line_pos; end

  # @return [String] source path relative to the current working directory.
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/results/occurrence.rb#11
  def path; end

  # @return [Integer] count of characters in the file before the occurrence.
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/results/occurrence.rb#14
  def pos; end

  # @return [String, nil] the raw key (for relative keys and references)
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/results/occurrence.rb#29
  def raw_key; end

  # @return [String, nil] the raw key (for relative keys and references)
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/results/occurrence.rb#29
  def raw_key=(_arg0); end

  class << self
    # @param raw_key [String]
    # @param range [Parser::Source::Range]
    # @param default_arg [String, nil]
    # @return [Results::Occurrence]
    #
    # source://i18n-tasks//lib/i18n/tasks/scanners/results/occurrence.rb#71
    def from_range(raw_key:, range:, default_arg: T.unsafe(nil)); end
  end
end

# source://i18n-tasks//lib/i18n/tasks/scanners/ruby_ast_call_finder.rb#6
class I18n::Tasks::Scanners::RubyAstCallFinder
  include ::AST::Processor::Mixin

  # @param root_node [Parser::AST:Node]
  # @return [Pair<Parser::AST::Node, method_name as string>] for all nodes with :send type
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/ruby_ast_call_finder.rb#11
  def collect_calls(root_node); end

  # source://i18n-tasks//lib/i18n/tasks/scanners/ruby_ast_call_finder.rb#32
  def handler_missing(node); end

  # source://i18n-tasks//lib/i18n/tasks/scanners/ruby_ast_call_finder.rb#17
  def on_def(node); end

  # source://i18n-tasks//lib/i18n/tasks/scanners/ruby_ast_call_finder.rb#24
  def on_send(send_node); end
end

# Scan for I18n.translate calls using whitequark/parser
#
# source://i18n-tasks//lib/i18n/tasks/scanners/ruby_ast_scanner.rb#12
class I18n::Tasks::Scanners::RubyAstScanner < ::I18n::Tasks::Scanners::FileScanner
  include ::I18n::Tasks::Scanners::RelativeKeys
  include ::AST::Sexp

  # @return [RubyAstScanner] a new instance of RubyAstScanner
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/ruby_ast_scanner.rb#18
  def initialize(**args); end

  protected

  # Convert {Parser::AST::Node} to occurrences.
  #
  # @param ast [Parser::Source::Comment]
  # @return [nil, [key, Occurrence]] full absolute key name and the occurrence.
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/ruby_ast_scanner.rb#102
  def ast_to_occurences(ast); end

  # Convert an array of {Parser::Source::Comment} to occurrences.
  #
  # @param path Path to file
  # @param ast Parser::AST::Node
  # @param comments [Parser::Source::Comment]
  # @return [nil, [key, Occurrence]] full absolute key name and the occurrence.
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/ruby_ast_scanner.rb#69
  def comments_to_occurences(path, ast, comments); end

  # @return [Boolean]
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/ruby_ast_scanner.rb#47
  def keys_relative_to_calling_method?(path); end

  # Create an {Parser::Source::Buffer} with the given contents.
  # The contents are assigned a {Parser::Source::Buffer#raw_source}.
  #
  # @param path [String] Path to assign as the buffer name.
  # @param contents [String]
  # @return [Parser::Source::Buffer] file contents
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/ruby_ast_scanner.rb#57
  def make_buffer(path, contents = T.unsafe(nil)); end

  # Parse file on path and returns AST and comments.
  #
  # @param path Path to file to parse
  # @return [{Parser::AST::Node}, [Parser::Source::Comment]]
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/ruby_ast_scanner.rb#42
  def path_to_ast_and_comments(path); end

  # Extract all occurrences of translate calls from the file at the given path.
  #
  # @return [Array<[key, Results::KeyOccurrence]>] each occurrence found in the file
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/ruby_ast_scanner.rb#30
  def scan_file(path); end

  # source://i18n-tasks//lib/i18n/tasks/scanners/ruby_ast_scanner.rb#115
  def setup_matchers; end
end

# source://i18n-tasks//lib/i18n/tasks/scanners/ruby_ast_scanner.rb#16
I18n::Tasks::Scanners::RubyAstScanner::MAGIC_COMMENT_PREFIX = T.let(T.unsafe(nil), Regexp)

# source://i18n-tasks//lib/i18n/tasks/scanners/ruby_key_literals.rb#4
module I18n::Tasks::Scanners::RubyKeyLiterals
  # Match literals:
  # * String: '', "#{}"
  # * Symbol: :sym, :'', :"#{}"
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/ruby_key_literals.rb#10
  def literal_re; end

  # remove the leading colon and unwrap quotes from the key match
  #
  # @param literal [String] e.g: "key", 'key', or :key.
  # @return [String] key
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/ruby_key_literals.rb#17
  def strip_literal(literal); end

  # @return [Boolean]
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/ruby_key_literals.rb#26
  def valid_key?(key); end
end

# source://i18n-tasks//lib/i18n/tasks/scanners/ruby_key_literals.rb#5
I18n::Tasks::Scanners::RubyKeyLiterals::LITERAL_RE = T.let(T.unsafe(nil), Regexp)

# source://i18n-tasks//lib/i18n/tasks/scanners/ruby_key_literals.rb#23
I18n::Tasks::Scanners::RubyKeyLiterals::VALID_KEY_CHARS = T.let(T.unsafe(nil), Regexp)

# source://i18n-tasks//lib/i18n/tasks/scanners/ruby_key_literals.rb#24
I18n::Tasks::Scanners::RubyKeyLiterals::VALID_KEY_RE = T.let(T.unsafe(nil), Regexp)

# Describes the API of a scanner.
#
# @abstract
# @since 0.9.0
#
# source://i18n-tasks//lib/i18n/tasks/scanners/scanner.rb#10
class I18n::Tasks::Scanners::Scanner
  # @abstract
  # @return [Array<Results::KeyOccurrences>] the keys found by this scanner and their occurrences.
  # @since 0.9.0
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/scanner.rb#13
  def keys; end
end

# Run multiple {Scanner Scanners} and merge their results.
#
# @note The scanners are run concurrently. A thread is spawned per each scanner.
# @since 0.9.0
#
# source://i18n-tasks//lib/i18n/tasks/scanners/scanner_multiplexer.rb#9
class I18n::Tasks::Scanners::ScannerMultiplexer < ::I18n::Tasks::Scanners::Scanner
  # @param scanners [Array<Scanner>]
  # @return [ScannerMultiplexer] a new instance of ScannerMultiplexer
  # @since 0.9.0
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/scanner_multiplexer.rb#11
  def initialize(scanners:); end

  # Collect the results of all the scanners. Occurrences of a key from multiple scanners are merged.
  #
  # @note The scanners are run concurrently. A thread is spawned per each scanner.
  # @return [Array<Results::KeyOccurrences>] the keys found by this scanner and their occurrences.
  # @since 0.9.0
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/scanner_multiplexer.rb#20
  def keys; end

  private

  # @return [Array<Array<Results::KeyOccurrences>>]
  # @since 0.9.0
  #
  # source://i18n-tasks//lib/i18n/tasks/scanners/scanner_multiplexer.rb#27
  def collect_results; end
end

# source://i18n-tasks//lib/i18n/tasks/split_key.rb#5
module I18n::Tasks::SplitKey
  private

  # yield each key part
  # dots inside braces or parenthesis are not split on
  #
  # source://i18n-tasks//lib/i18n/tasks/split_key.rb#38
  def key_parts(key, &block); end

  # source://i18n-tasks//lib/i18n/tasks/split_key.rb#30
  def last_key_part(key); end

  # split a key by dots (.)
  # dots inside braces or parenthesis are not split on
  #
  # split_key 'a.b'      # => ['a', 'b']
  # split_key 'a.#{b.c}' # => ['a', '#{b.c}']
  # split_key 'a.b.c', 2 # => ['a', 'b.c']
  #
  # source://i18n-tasks//lib/i18n/tasks/split_key.rb#14
  def split_key(key, max = T.unsafe(nil)); end

  class << self
    # yield each key part
    # dots inside braces or parenthesis are not split on
    #
    # source://i18n-tasks//lib/i18n/tasks/split_key.rb#38
    def key_parts(key, &block); end

    # source://i18n-tasks//lib/i18n/tasks/split_key.rb#30
    def last_key_part(key); end

    # split a key by dots (.)
    # dots inside braces or parenthesis are not split on
    #
    # split_key 'a.b'      # => ['a', 'b']
    # split_key 'a.#{b.c}' # => ['a', '#{b.c}']
    # split_key 'a.b.c', 2 # => ['a', 'b.c']
    #
    # source://i18n-tasks//lib/i18n/tasks/split_key.rb#14
    def split_key(key, max = T.unsafe(nil)); end
  end
end

# source://i18n-tasks//lib/i18n/tasks/split_key.rb#62
I18n::Tasks::SplitKey::PARENS = T.let(T.unsafe(nil), Hash)

# source://i18n-tasks//lib/i18n/tasks/split_key.rb#67
I18n::Tasks::SplitKey::PARENS_ZEROS = T.let(T.unsafe(nil), Array)

# source://i18n-tasks//lib/i18n/tasks/stats.rb#4
module I18n::Tasks::Stats
  # source://i18n-tasks//lib/i18n/tasks/stats.rb#5
  def forest_stats(forest); end
end

# source://i18n-tasks//lib/i18n/tasks/string_interpolation.rb#4
module I18n::Tasks::StringInterpolation
  private

  # source://i18n-tasks//lib/i18n/tasks/string_interpolation.rb#7
  def interpolate_soft(s, t = T.unsafe(nil)); end

  class << self
    # source://i18n-tasks//lib/i18n/tasks/string_interpolation.rb#7
    def interpolate_soft(s, t = T.unsafe(nil)); end
  end
end

# source://i18n-tasks//lib/i18n/tasks/translation.rb#9
module I18n::Tasks::Translation
  # @param forest [I18n::Tasks::Tree::Siblings] to translate to the locales of its root nodes
  # @param from [String] locale
  # @param backend [:deepl, :openai, :google, :yandex]
  # @return [I18n::Tasks::Tree::Siblings] translated forest
  #
  # source://i18n-tasks//lib/i18n/tasks/translation.rb#14
  def translate_forest(forest, from:, backend: T.unsafe(nil)); end
end

# source://i18n-tasks//lib/i18n/tasks/translators/base_translator.rb#4
module I18n::Tasks::Translators; end

# source://i18n-tasks//lib/i18n/tasks/translators/base_translator.rb#5
class I18n::Tasks::Translators::BaseTranslator
  include ::I18n::Tasks::Logging

  # @param i18n_tasks [I18n::Tasks::BaseTask]
  # @return [BaseTranslator] a new instance of BaseTranslator
  #
  # source://i18n-tasks//lib/i18n/tasks/translators/base_translator.rb#8
  def initialize(i18n_tasks); end

  # @param forest [I18n::Tasks::Tree::Siblings] to translate to the locales of its root nodes
  # @param from [String] locale
  # @return [I18n::Tasks::Tree::Siblings] translated forest
  #
  # source://i18n-tasks//lib/i18n/tasks/translators/base_translator.rb#15
  def translate_forest(forest, from); end

  protected

  # Prepare value for translation.
  #
  # @return [String, Array<String, nil>, nil] value for Google Translate or nil for non-string values
  #
  # source://i18n-tasks//lib/i18n/tasks/translators/base_translator.rb#68
  def dump_value(value, opts); end

  # @param list [Array<[String, Object]>] of key-value pairs
  # @return [Array<[String, Object]>] translated list
  #
  # source://i18n-tasks//lib/i18n/tasks/translators/base_translator.rb#44
  def fetch_translations(list, opts); end

  # @param list [Array<[String, Object]>]
  # @param translated_values [Array<String>]
  # @return [Array<[String, Object]>] translated key-value pairs
  #
  # source://i18n-tasks//lib/i18n/tasks/translators/base_translator.rb#60
  def from_values(list, translated_values, opts); end

  # @abstract
  # @return [String]
  #
  # source://i18n-tasks//lib/i18n/tasks/translators/base_translator.rb#158
  def no_results_error_message; end

  # @abstract
  # @return [Hash]
  #
  # source://i18n-tasks//lib/i18n/tasks/translators/base_translator.rb#150
  def options_for_html; end

  # @abstract
  # @return [Hash]
  #
  # source://i18n-tasks//lib/i18n/tasks/translators/base_translator.rb#154
  def options_for_plain; end

  # @abstract
  # @param options [Hash]
  # @return [Hash]
  #
  # source://i18n-tasks//lib/i18n/tasks/translators/base_translator.rb#146
  def options_for_translate_values(options); end

  # Parse translated value from the each_translated enumerator
  #
  # @param untranslated [Object]
  # @param each_translated [Enumerator]
  # @return [Object] final translated value
  #
  # source://i18n-tasks//lib/i18n/tasks/translators/base_translator.rb#83
  def parse_value(untranslated, each_translated, opts); end

  # source://i18n-tasks//lib/i18n/tasks/translators/base_translator.rb#128
  def raise_interpolation_error(untranslated, translated, e); end

  # @param value [String]
  # @return [String] 'hello, %{name}' => 'hello, <round-trippable string>'
  #
  # source://i18n-tasks//lib/i18n/tasks/translators/base_translator.rb#106
  def replace_interpolations(value); end

  # @param untranslated [String]
  # @param translated [String]
  # @return [String] 'hello, <round-trippable string>' => 'hello, %{name}'
  #
  # source://i18n-tasks//lib/i18n/tasks/translators/base_translator.rb#117
  def restore_interpolations(untranslated, translated); end

  # @param list [Array<[String, Object]>] of key-value pairs
  # @return [Array<String>] values for translation extracted from list
  #
  # source://i18n-tasks//lib/i18n/tasks/translators/base_translator.rb#53
  def to_values(list, opts); end

  # @param list [Array<[String, Object]>] of key-value pairs
  # @return [Array<[String, Object]>] translated list
  #
  # source://i18n-tasks//lib/i18n/tasks/translators/base_translator.rb#26
  def translate_pairs(list, opts); end

  # @abstract
  # @param list [Array<String>]
  # @param options [Hash]
  # @return [Array<String>]
  #
  # source://i18n-tasks//lib/i18n/tasks/translators/base_translator.rb#141
  def translate_values(list, **options); end
end

# source://i18n-tasks//lib/i18n/tasks/translators/base_translator.rb#101
I18n::Tasks::Translators::BaseTranslator::INTERPOLATION_KEY_RE = T.let(T.unsafe(nil), Regexp)

# source://i18n-tasks//lib/i18n/tasks/translators/base_translator.rb#102
I18n::Tasks::Translators::BaseTranslator::UNTRANSLATABLE_STRING = T.let(T.unsafe(nil), String)

# source://i18n-tasks//lib/i18n/tasks/translators/deepl_translator.rb#6
class I18n::Tasks::Translators::DeeplTranslator < ::I18n::Tasks::Translators::BaseTranslator
  # @return [DeeplTranslator] a new instance of DeeplTranslator
  #
  # source://i18n-tasks//lib/i18n/tasks/translators/deepl_translator.rb#12
  def initialize(*_arg0); end

  protected

  # source://i18n-tasks//lib/i18n/tasks/translators/deepl_translator.rb#68
  def no_results_error_message; end

  # source://i18n-tasks//lib/i18n/tasks/translators/deepl_translator.rb#43
  def options_for_html; end

  # source://i18n-tasks//lib/i18n/tasks/translators/deepl_translator.rb#47
  def options_for_plain; end

  # source://i18n-tasks//lib/i18n/tasks/translators/deepl_translator.rb#37
  def options_for_translate_values(**options); end

  # @param value [String]
  # @return [String] 'hello, %{name}' => 'hello, <i18n>%{name}</i18n>'
  #
  # source://i18n-tasks//lib/i18n/tasks/translators/deepl_translator.rb#53
  def replace_interpolations(value); end

  # @param untranslated [String]
  # @param translated [String]
  # @return [String] 'hello, <i18n>%{name}</i18n>' => 'hello, %{name}'
  #
  # source://i18n-tasks//lib/i18n/tasks/translators/deepl_translator.rb#60
  def restore_interpolations(untranslated, translated); end

  # source://i18n-tasks//lib/i18n/tasks/translators/deepl_translator.rb#24
  def translate_values(list, from:, to:, **options); end

  private

  # source://i18n-tasks//lib/i18n/tasks/translators/deepl_translator.rb#91
  def configure_api_key!; end

  # Convert 'es-ES' to 'ES', en-us to EN
  #
  # source://i18n-tasks//lib/i18n/tasks/translators/deepl_translator.rb#75
  def to_deepl_source_locale(locale); end

  # Convert 'es-ES' to 'ES' but warn about locales requiring a specific variant
  #
  # source://i18n-tasks//lib/i18n/tasks/translators/deepl_translator.rb#80
  def to_deepl_target_locale(locale); end
end

# max allowed texts per request
#
# source://i18n-tasks//lib/i18n/tasks/translators/deepl_translator.rb#8
I18n::Tasks::Translators::DeeplTranslator::BATCH_SIZE = T.let(T.unsafe(nil), Integer)

# those languages must be specified with their sub-kind e.g en-us
#
# source://i18n-tasks//lib/i18n/tasks/translators/deepl_translator.rb#10
I18n::Tasks::Translators::DeeplTranslator::SPECIFIC_TARGETS = T.let(T.unsafe(nil), Array)

# source://i18n-tasks//lib/i18n/tasks/translators/google_translator.rb#6
class I18n::Tasks::Translators::GoogleTranslator < ::I18n::Tasks::Translators::BaseTranslator
  # @return [GoogleTranslator] a new instance of GoogleTranslator
  #
  # source://i18n-tasks//lib/i18n/tasks/translators/google_translator.rb#7
  def initialize(*_arg0); end

  protected

  # source://i18n-tasks//lib/i18n/tasks/translators/google_translator.rb#38
  def no_results_error_message; end

  # source://i18n-tasks//lib/i18n/tasks/translators/google_translator.rb#30
  def options_for_html; end

  # source://i18n-tasks//lib/i18n/tasks/translators/google_translator.rb#34
  def options_for_plain; end

  # source://i18n-tasks//lib/i18n/tasks/translators/google_translator.rb#22
  def options_for_translate_values(from:, to:, **options); end

  # source://i18n-tasks//lib/i18n/tasks/translators/google_translator.rb#18
  def translate_values(list, **options); end

  private

  # source://i18n-tasks//lib/i18n/tasks/translators/google_translator.rb#53
  def api_key; end

  # Convert 'es-ES' to 'es'
  #
  # source://i18n-tasks//lib/i18n/tasks/translators/google_translator.rb#47
  def to_google_translate_compatible_locale(locale); end
end

# source://i18n-tasks//lib/i18n/tasks/translators/google_translator.rb#44
I18n::Tasks::Translators::GoogleTranslator::SUPPORTED_LOCALES_WITH_REGION = T.let(T.unsafe(nil), Array)

# source://i18n-tasks//lib/i18n/tasks/translators/openai_translator.rb#6
class I18n::Tasks::Translators::OpenAiTranslator < ::I18n::Tasks::Translators::BaseTranslator
  # @return [OpenAiTranslator] a new instance of OpenAiTranslator
  #
  # source://i18n-tasks//lib/i18n/tasks/translators/openai_translator.rb#10
  def initialize(*_arg0); end

  # source://i18n-tasks//lib/i18n/tasks/translators/openai_translator.rb#34
  def no_results_error_message; end

  # source://i18n-tasks//lib/i18n/tasks/translators/openai_translator.rb#26
  def options_for_html; end

  # source://i18n-tasks//lib/i18n/tasks/translators/openai_translator.rb#30
  def options_for_plain; end

  # source://i18n-tasks//lib/i18n/tasks/translators/openai_translator.rb#19
  def options_for_translate_values(from:, to:, **options); end

  private

  # source://i18n-tasks//lib/i18n/tasks/translators/openai_translator.rb#44
  def api_key; end

  # source://i18n-tasks//lib/i18n/tasks/translators/openai_translator.rb#65
  def translate(values, from, to); end

  # source://i18n-tasks//lib/i18n/tasks/translators/openai_translator.rb#53
  def translate_values(list, from:, to:); end

  # source://i18n-tasks//lib/i18n/tasks/translators/openai_translator.rb#40
  def translator; end
end

# max allowed texts per request
#
# source://i18n-tasks//lib/i18n/tasks/translators/openai_translator.rb#8
I18n::Tasks::Translators::OpenAiTranslator::BATCH_SIZE = T.let(T.unsafe(nil), Integer)

# source://i18n-tasks//lib/i18n/tasks/translators/yandex_translator.rb#6
class I18n::Tasks::Translators::YandexTranslator < ::I18n::Tasks::Translators::BaseTranslator
  # @return [YandexTranslator] a new instance of YandexTranslator
  #
  # source://i18n-tasks//lib/i18n/tasks/translators/yandex_translator.rb#7
  def initialize(*_arg0); end

  protected

  # source://i18n-tasks//lib/i18n/tasks/translators/yandex_translator.rb#37
  def no_results_error_message; end

  # source://i18n-tasks//lib/i18n/tasks/translators/yandex_translator.rb#29
  def options_for_html; end

  # source://i18n-tasks//lib/i18n/tasks/translators/yandex_translator.rb#33
  def options_for_plain; end

  # source://i18n-tasks//lib/i18n/tasks/translators/yandex_translator.rb#22
  def options_for_translate_values(from:, to:, **options); end

  # source://i18n-tasks//lib/i18n/tasks/translators/yandex_translator.rb#18
  def translate_values(list, **options); end

  private

  # source://i18n-tasks//lib/i18n/tasks/translators/yandex_translator.rb#54
  def api_key; end

  # Convert 'es-ES' to 'es'
  #
  # source://i18n-tasks//lib/i18n/tasks/translators/yandex_translator.rb#44
  def to_yandex_compatible_locale(locale); end

  # source://i18n-tasks//lib/i18n/tasks/translators/yandex_translator.rb#50
  def translator; end
end

# source://i18n-tasks//lib/i18n/tasks/unused_keys.rb#7
module I18n::Tasks::UnusedKeys
  # source://i18n-tasks//lib/i18n/tasks/unused_keys.rb#8
  def unused_keys(locales: T.unsafe(nil), strict: T.unsafe(nil)); end

  # @param locale [String]
  # @param strict [Boolean] if true, do not match dynamic keys
  #
  # source://i18n-tasks//lib/i18n/tasks/unused_keys.rb#15
  def unused_tree(locale: T.unsafe(nil), strict: T.unsafe(nil)); end
end

# source://i18n-tasks//lib/i18n/tasks/used_keys.rb#17
module I18n::Tasks::UsedKeys
  # source://i18n-tasks//lib/i18n/tasks/used_keys.rb#122
  def caching_file_finder_provider; end

  # source://i18n-tasks//lib/i18n/tasks/used_keys.rb#126
  def caching_file_reader; end

  # source://i18n-tasks//lib/i18n/tasks/used_keys.rb#110
  def merge_scanner_configs(a, b); end

  # source://i18n-tasks//lib/i18n/tasks/used_keys.rb#69
  def scanner(strict: T.unsafe(nil)); end

  # source://i18n-tasks//lib/i18n/tasks/used_keys.rb#91
  def search_config; end

  # @return [Boolean] whether the key is potentially used in a code expression such as `t("category.#{category_key}")`
  #
  # source://i18n-tasks//lib/i18n/tasks/used_keys.rb#131
  def used_in_expr?(key); end

  # source://i18n-tasks//lib/i18n/tasks/used_keys.rb#55
  def used_in_source_tree(key_filter: T.unsafe(nil), strict: T.unsafe(nil)); end

  # Find all keys in the source and return a forest with the keys in absolute form and their occurrences.
  #
  # @param key_filter [String] only return keys matching this pattern.
  # @param strict [Boolean] if true, dynamic keys are excluded (e.g. `t("category.#{ category.key }")`)
  # @param include_raw_references [Boolean] if true, includes reference usages as they appear in the source
  # @return [Data::Tree::Siblings]
  #
  # source://i18n-tasks//lib/i18n/tasks/used_keys.rb#41
  def used_tree(key_filter: T.unsafe(nil), strict: T.unsafe(nil), include_raw_references: T.unsafe(nil)); end

  private

  # keys in the source that end with a ., e.g. t("category.#{ cat.i18n_key }") or t("category." + category.key)
  #
  # @param replacement [String] for interpolated values.
  #
  # source://i18n-tasks//lib/i18n/tasks/used_keys.rb#145
  def expr_key_re(replacement: T.unsafe(nil)); end

  # Replace interpolations in dynamic keys such as "category.#{category.i18n_key}".
  #
  # @param key [String]
  # @param replacement [String]
  # @return [String]
  #
  # source://i18n-tasks//lib/i18n/tasks/used_keys.rb#165
  def replace_key_exp(key, replacement); end

  # @param strict [Boolean, nil]
  # @return [Boolean]
  #
  # source://i18n-tasks//lib/i18n/tasks/used_keys.rb#139
  def strict?(strict); end
end

# source://i18n-tasks//lib/i18n/tasks/used_keys.rb#31
I18n::Tasks::UsedKeys::ALWAYS_EXCLUDE = T.let(T.unsafe(nil), Array)

# source://i18n-tasks//lib/i18n/tasks/used_keys.rb#18
I18n::Tasks::UsedKeys::SEARCH_DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://i18n-tasks//lib/i18n/tasks/version.rb#5
I18n::Tasks::VERSION = T.let(T.unsafe(nil), String)

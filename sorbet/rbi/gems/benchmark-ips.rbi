# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/benchmark-ips/all/benchmark-ips.rbi
#
# benchmark-ips-2.9.1

module Benchmark
  extend Benchmark::Compare
  extend Benchmark::IPS
end
module Benchmark::Timing
  def self.add_second(t, s); end
  def self.clean_env; end
  def self.mean(samples); end
  def self.now; end
  def self.stddev(samples, m = nil); end
  def self.time_us(before, after); end
  def self.variance(samples, m = nil); end
end
module Benchmark::Compare
  def compare(*entries); end
end
module Benchmark::IPS
  def ips(*args); end
  def self.options; end
end
module Benchmark::IPS::Stats
end
module Benchmark::IPS::Stats::StatsMetric
  def error_percentage; end
  def overlaps?(baseline); end
end
class Benchmark::IPS::Stats::SD
  def central_tendency; end
  def error; end
  def footer; end
  def initialize(samples); end
  def samples; end
  def slowdown(baseline); end
  include Benchmark::IPS::Stats::StatsMetric
end
class Benchmark::IPS::Stats::Bootstrap
  def central_tendency; end
  def data; end
  def dependencies; end
  def error; end
  def footer; end
  def initialize(samples, confidence); end
  def samples; end
  def slowdown(baseline); end
  include Benchmark::IPS::Stats::StatsMetric
end
class Benchmark::IPS::Report
  def add_entry(label, microseconds, iters, stats, measurement_cycle); end
  def data; end
  def entries; end
  def generate_json(path); end
  def initialize; end
  def run_comparison; end
end
class Benchmark::IPS::Report::Entry
  def body; end
  def display; end
  def error_percentage; end
  def header; end
  def initialize(label, us, iters, stats, cycles); end
  def ips; end
  def ips_sd; end
  def iterations; end
  def label; end
  def measurement_cycle; end
  def microseconds; end
  def runtime; end
  def samples; end
  def seconds; end
  def show_total_time!; end
  def stats; end
  def to_s; end
end
class Benchmark::IPS::NoopSuite
  def add_report(a, b); end
  def footer; end
  def running(a, b); end
  def start_running; end
  def start_warming; end
  def warming(a, b); end
  def warmup_stats(a, b); end
end
class Benchmark::IPS::Job
  def all_results_have_been_run?; end
  def clear_held_results; end
  def compare!; end
  def compare; end
  def compare?; end
  def confidence; end
  def confidence=(arg0); end
  def config(opts); end
  def create_report(label, measured_us, iter, samples, cycles); end
  def create_stats(samples); end
  def cycles_per_100ms(time_msec, iters); end
  def full_report; end
  def generate_json; end
  def hold!(held_path); end
  def hold; end
  def hold=(arg0); end
  def hold?; end
  def initialize(opts = nil); end
  def item(label = nil, str = nil, &blk); end
  def iterations; end
  def iterations=(arg0); end
  def iterations_per_sec(cycles, time_us); end
  def json!(path = nil); end
  def json?; end
  def list; end
  def load_held_results; end
  def quiet; end
  def quiet=(val); end
  def report(label = nil, str = nil, &blk); end
  def reporter(quiet:); end
  def run; end
  def run_benchmark; end
  def run_comparison; end
  def run_single?; end
  def run_warmup; end
  def save!(held_path); end
  def save_held_results; end
  def stats; end
  def stats=(arg0); end
  def suite; end
  def suite=(suite); end
  def time; end
  def time=(arg0); end
  def time_us(before, after); end
  def timing; end
  def warmup; end
  def warmup=(arg0); end
end
class Benchmark::IPS::Job::Entry
  def action; end
  def call_times(times); end
  def compile_block; end
  def compile_block_with_manual_loop; end
  def compile_string(str); end
  def initialize(label, action); end
  def label; end
end
class Benchmark::IPS::Job::StdoutReport
  def add_report(item, caller); end
  def footer; end
  def format; end
  def initialize; end
  def rjust(label); end
  def running(label, _warmup); end
  def start_running; end
  def start_warming; end
  def warming(label, _warmup); end
  def warmup_stats(_warmup_time_us, timing); end
end
class Benchmark::IPS::Job::NoopReport
  def add_report(a, b); end
  def footer; end
  def running(a, b); end
  def start_running; end
  def start_warming; end
  def warming(a, b); end
  def warmup_stats(a, b); end
end
module Benchmark::IPS::Helpers
  def scale(value); end
  def self.scale(value); end
end

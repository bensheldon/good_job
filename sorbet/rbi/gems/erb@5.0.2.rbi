# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `erb` gem.
# Please instead update this file by running `bin/tapioca gem erb`.


# = ERB -- Ruby Templating
#
# == Introduction
#
# ERB provides an easy to use but powerful templating system for Ruby.  Using
# ERB, actual Ruby code can be added to any plain text document for the
# purposes of generating document information details and/or flow control.
#
# A very simple example is this:
#
#   require 'erb'
#
#   x = 42
#   template = ERB.new <<-EOF
#     The value of x is: <%= x %>
#   EOF
#   puts template.result(binding)
#
# <em>Prints:</em> The value of x is: 42
#
# More complex examples are given below.
#
#
# == Recognized Tags
#
# ERB recognizes certain tags in the provided template and converts them based
# on the rules below:
#
#   <% Ruby code -- inline with output %>
#   <%= Ruby expression -- replace with result %>
#   <%# comment -- ignored -- useful in testing %> (`<% #` doesn't work. Don't use Ruby comments.)
#   % a line of Ruby code -- treated as <% line %> (optional -- see ERB.new)
#   %% replaced with % if first thing on a line and % processing is used
#   <%% or %%> -- replace with <% or %> respectively
#
# All other text is passed through ERB filtering unchanged.
#
#
# == Options
#
# There are several settings you can change when you use ERB:
# * the nature of the tags that are recognized;
# * the binding used to resolve local variables in the template.
#
# See the ERB.new and ERB#result methods for more detail.
#
# == Character encodings
#
# ERB (or Ruby code generated by ERB) returns a string in the same
# character encoding as the input string.  When the input string has
# a magic comment, however, it returns a string in the encoding specified
# by the magic comment.
#
#   # -*- coding: utf-8 -*-
#   require 'erb'
#
#   template = ERB.new <<EOF
#   <%#-*- coding: Big5 -*-%>
#     \_\_ENCODING\_\_ is <%= \_\_ENCODING\_\_ %>.
#   EOF
#   puts template.result
#
# <em>Prints:</em> \_\_ENCODING\_\_ is Big5.
#
#
# == Examples
#
# === Plain Text
#
# ERB is useful for any generic templating situation.  Note that in this example, we use the
# convenient "% at start of line" tag, and we quote the template literally with
# <tt>%q{...}</tt> to avoid trouble with the backslash.
#
#   require "erb"
#
#   # Create template.
#   template = %q{
#     From:  James Edward Gray II <james@grayproductions.net>
#     To:  <%= to %>
#     Subject:  Addressing Needs
#
#     <%= to[/\w+/] %>:
#
#     Just wanted to send a quick note assuring that your needs are being
#     addressed.
#
#     I want you to know that my team will keep working on the issues,
#     especially:
#
#     <%# ignore numerous minor requests -- focus on priorities %>
#     % priorities.each do |priority|
#       * <%= priority %>
#     % end
#
#     Thanks for your patience.
#
#     James Edward Gray II
#   }.gsub(/^  /, '')
#
#   message = ERB.new(template, trim_mode: "%<>")
#
#   # Set up template data.
#   to = "Community Spokesman <spokesman@ruby_community.org>"
#   priorities = [ "Run Ruby Quiz",
#                  "Document Modules",
#                  "Answer Questions on Ruby Talk" ]
#
#   # Produce result.
#   email = message.result
#   puts email
#
# <i>Generates:</i>
#
#   From:  James Edward Gray II <james@grayproductions.net>
#   To:  Community Spokesman <spokesman@ruby_community.org>
#   Subject:  Addressing Needs
#
#   Community:
#
#   Just wanted to send a quick note assuring that your needs are being addressed.
#
#   I want you to know that my team will keep working on the issues, especially:
#
#       * Run Ruby Quiz
#       * Document Modules
#       * Answer Questions on Ruby Talk
#
#   Thanks for your patience.
#
#   James Edward Gray II
#
# === Ruby in HTML
#
# ERB is often used in <tt>.rhtml</tt> files (HTML with embedded Ruby).  Notice the need in
# this example to provide a special binding when the template is run, so that the instance
# variables in the Product object can be resolved.
#
#   require "erb"
#
#   # Build template data class.
#   class Product
#     def initialize( code, name, desc, cost )
#       @code = code
#       @name = name
#       @desc = desc
#       @cost = cost
#
#       @features = [ ]
#     end
#
#     def add_feature( feature )
#       @features << feature
#     end
#
#     # Support templating of member data.
#     def get_binding
#       binding
#     end
#
#     # ...
#   end
#
#   # Create template.
#   template = %{
#     <html>
#       <head><title>Ruby Toys -- <%= @name %></title></head>
#       <body>
#
#         <h1><%= @name %> (<%= @code %>)</h1>
#         <p><%= @desc %></p>
#
#         <ul>
#           <% @features.each do |f| %>
#             <li><b><%= f %></b></li>
#           <% end %>
#         </ul>
#
#         <p>
#           <% if @cost < 10 %>
#             <b>Only <%= @cost %>!!!</b>
#           <% else %>
#              Call for a price, today!
#           <% end %>
#         </p>
#
#       </body>
#     </html>
#   }.gsub(/^  /, '')
#
#   rhtml = ERB.new(template)
#
#   # Set up template data.
#   toy = Product.new( "TZ-1002",
#                      "Rubysapien",
#                      "Geek's Best Friend!  Responds to Ruby commands...",
#                      999.95 )
#   toy.add_feature("Listens for verbal commands in the Ruby language!")
#   toy.add_feature("Ignores Perl, Java, and all C variants.")
#   toy.add_feature("Karate-Chop Action!!!")
#   toy.add_feature("Matz signature on left leg.")
#   toy.add_feature("Gem studded eyes... Rubies, of course!")
#
#   # Produce result.
#   rhtml.run(toy.get_binding)
#
# <i>Generates (some blank lines removed):</i>
#
#    <html>
#      <head><title>Ruby Toys -- Rubysapien</title></head>
#      <body>
#
#        <h1>Rubysapien (TZ-1002)</h1>
#        <p>Geek's Best Friend!  Responds to Ruby commands...</p>
#
#        <ul>
#            <li><b>Listens for verbal commands in the Ruby language!</b></li>
#            <li><b>Ignores Perl, Java, and all C variants.</b></li>
#            <li><b>Karate-Chop Action!!!</b></li>
#            <li><b>Matz signature on left leg.</b></li>
#            <li><b>Gem studded eyes... Rubies, of course!</b></li>
#        </ul>
#
#        <p>
#             Call for a price, today!
#        </p>
#
#      </body>
#    </html>
#
#
# == Notes
#
# There are a variety of templating solutions available in various Ruby projects.
# For example, RDoc, distributed with Ruby, uses its own template engine, which
# can be reused elsewhere.
#
# Other popular engines could be found in the corresponding
# {Category}[https://www.ruby-toolbox.com/categories/template_engines] of
# The Ruby Toolbox.
#
# source://erb//lib/erb/version.rb#2
class ERB
  # Constructs a new ERB object with the template specified in _str_.
  #
  # An ERB object works by building a chunk of Ruby code that will output
  # the completed template when run.
  #
  # If _trim_mode_ is passed a String containing one or more of the following
  # modifiers, ERB will adjust its code generation as listed:
  #
  #     %  enables Ruby code processing for lines beginning with %
  #     <> omit newline for lines starting with <% and ending in %>
  #     >  omit newline for lines ending in %>
  #     -  omit blank lines ending in -%>
  #
  # _eoutvar_ can be used to set the name of the variable ERB will build up
  # its output in.  This is useful when you need to run multiple ERB
  # templates through the same binding and/or when you want to control where
  # output ends up.  Pass the name of the variable to be used inside a String.
  #
  # === Example
  #
  #  require "erb"
  #
  #  # build data class
  #  class Listings
  #    PRODUCT = { :name => "Chicken Fried Steak",
  #                :desc => "A well messaged pattie, breaded and fried.",
  #                :cost => 9.95 }
  #
  #    attr_reader :product, :price
  #
  #    def initialize( product = "", price = "" )
  #      @product = product
  #      @price = price
  #    end
  #
  #    def build
  #      b = binding
  #      # create and run templates, filling member data variables
  #      ERB.new(<<~'END_PRODUCT', trim_mode: "", eoutvar: "@product").result b
  #        <%= PRODUCT[:name] %>
  #        <%= PRODUCT[:desc] %>
  #      END_PRODUCT
  #      ERB.new(<<~'END_PRICE', trim_mode: "", eoutvar: "@price").result b
  #        <%= PRODUCT[:name] %> -- <%= PRODUCT[:cost] %>
  #        <%= PRODUCT[:desc] %>
  #      END_PRICE
  #    end
  #  end
  #
  #  # setup template data
  #  listings = Listings.new
  #  listings.build
  #
  #  puts listings.product + "\n" + listings.price
  #
  # _Generates_
  #
  #  Chicken Fried Steak
  #  A well massaged pattie, breaded and fried.
  #
  #  Chicken Fried Steak -- 9.95
  #  A well massaged pattie, breaded and fried.
  #
  # @return [ERB] a new instance of ERB
  #
  # source://erb//lib/erb.rb#334
  def initialize(str, safe_level = T.unsafe(nil), legacy_trim_mode = T.unsafe(nil), legacy_eoutvar = T.unsafe(nil), trim_mode: T.unsafe(nil), eoutvar: T.unsafe(nil)); end

  # Define unnamed class which has _methodname_ as instance method, and return it.
  #
  # example:
  #   class MyClass_
  #     def initialize(arg1, arg2)
  #       @arg1 = arg1;  @arg2 = arg2
  #     end
  #   end
  #   filename = 'example.rhtml'  # @arg1 and @arg2 are used in example.rhtml
  #   erb = ERB.new(File.read(filename))
  #   erb.filename = filename
  #   MyClass = erb.def_class(MyClass_, 'render()')
  #   print MyClass.new('foo', 123).render()
  #
  # source://erb//lib/erb.rb#499
  def def_class(superklass = T.unsafe(nil), methodname = T.unsafe(nil)); end

  # Define _methodname_ as instance method of _mod_ from compiled Ruby source.
  #
  # example:
  #   filename = 'example.rhtml'   # 'arg1' and 'arg2' are used in example.rhtml
  #   erb = ERB.new(File.read(filename))
  #   erb.def_method(MyClass, 'render(arg1, arg2)', filename)
  #   print MyClass.new.render('foo', 123)
  #
  # source://erb//lib/erb.rb#463
  def def_method(mod, methodname, fname = T.unsafe(nil)); end

  # Create unnamed module, define _methodname_ as instance method of it, and return it.
  #
  # example:
  #   filename = 'example.rhtml'   # 'arg1' and 'arg2' are used in example.rhtml
  #   erb = ERB.new(File.read(filename))
  #   erb.filename = filename
  #   MyModule = erb.def_module('render(arg1, arg2)')
  #   class MyClass
  #     include MyModule
  #   end
  #
  # source://erb//lib/erb.rb#480
  def def_module(methodname = T.unsafe(nil)); end

  # The encoding to eval
  #
  # source://erb//lib/erb.rb#369
  def encoding; end

  # The optional _filename_ argument passed to Kernel#eval when the ERB code
  # is run
  #
  # source://erb//lib/erb.rb#373
  def filename; end

  # The optional _filename_ argument passed to Kernel#eval when the ERB code
  # is run
  #
  # source://erb//lib/erb.rb#373
  def filename=(_arg0); end

  # The optional _lineno_ argument passed to Kernel#eval when the ERB code
  # is run
  #
  # source://erb//lib/erb.rb#377
  def lineno; end

  # The optional _lineno_ argument passed to Kernel#eval when the ERB code
  # is run
  #
  # source://erb//lib/erb.rb#377
  def lineno=(_arg0); end

  # Sets optional filename and line number that will be used in ERB code
  # evaluation and error reporting. See also #filename= and #lineno=
  #
  #   erb = ERB.new('<%= some_x %>')
  #   erb.render
  #   # undefined local variable or method `some_x'
  #   #   from (erb):1
  #
  #   erb.location = ['file.erb', 3]
  #   # All subsequent error reporting would use new location
  #   erb.render
  #   # undefined local variable or method `some_x'
  #   #   from file.erb:4
  #
  # source://erb//lib/erb.rb#394
  def location=(_arg0); end

  # Creates a new compiler for ERB.  See ERB::Compiler.new for details
  #
  # source://erb//lib/erb.rb#361
  def make_compiler(trim_mode); end

  # Executes the generated ERB code to produce a completed template, returning
  # the results of that code.
  #
  # _b_ accepts a Binding object which is used to set the context of
  # code evaluation.
  #
  # source://erb//lib/erb.rb#423
  def result(b = T.unsafe(nil)); end

  # Render a template on a new toplevel binding with local variables specified
  # by a Hash object.
  #
  # source://erb//lib/erb.rb#432
  def result_with_hash(hash); end

  # Generate results and print them. (see ERB#result)
  #
  # source://erb//lib/erb.rb#412
  def run(b = T.unsafe(nil)); end

  # Can be used to set _eoutvar_ as described in ERB::new.  It's probably
  # easier to just use the constructor though, since calling this method
  # requires the setup of an ERB _compiler_ object.
  #
  # source://erb//lib/erb.rb#404
  def set_eoutvar(compiler, eoutvar = T.unsafe(nil)); end

  # The Ruby code generated by ERB
  #
  # source://erb//lib/erb.rb#366
  def src; end

  private

  # Returns a new binding each time *near* TOPLEVEL_BINDING for runs that do
  # not specify a binding.
  #
  # source://erb//lib/erb.rb#444
  def new_toplevel(vars = T.unsafe(nil)); end

  class << self
    # Returns revision information for the erb.rb module.
    #
    # source://erb//lib/erb.rb#266
    def version; end
  end
end

# --
# ERB::Compiler
#
# Compiles ERB templates into Ruby code; the compiled code produces the
# template result when evaluated. ERB::Compiler provides hooks to define how
# generated output is handled.
#
# Internally ERB does something like this to generate the code returned by
# ERB#src:
#
#   compiler = ERB::Compiler.new('<>')
#   compiler.pre_cmd    = ["_erbout=+''"]
#   compiler.put_cmd    = "_erbout.<<"
#   compiler.insert_cmd = "_erbout.<<"
#   compiler.post_cmd   = ["_erbout"]
#
#   code, enc = compiler.compile("Got <%= obj %>!\n")
#   puts code
#
# <i>Generates</i>:
#
#   #coding:UTF-8
#   _erbout=+''; _erbout.<< "Got ".freeze; _erbout.<<(( obj ).to_s); _erbout.<< "!\n".freeze; _erbout
#
# By default the output is sent to the print method.  For example:
#
#   compiler = ERB::Compiler.new('<>')
#   code, enc = compiler.compile("Got <%= obj %>!\n")
#   puts code
#
# <i>Generates</i>:
#
#   #coding:UTF-8
#   print "Got ".freeze; print(( obj ).to_s); print "!\n".freeze
#
# == Evaluation
#
# The compiled code can be used in any context where the names in the code
# correctly resolve. Using the last example, each of these print 'Got It!'
#
# Evaluate using a variable:
#
#   obj = 'It'
#   eval code
#
# Evaluate using an input:
#
#   mod = Module.new
#   mod.module_eval %{
#     def get(obj)
#       #{code}
#     end
#   }
#   extend mod
#   get('It')
#
# Evaluate using an accessor:
#
#   klass = Class.new Object
#   klass.class_eval %{
#     attr_accessor :obj
#     def initialize(obj)
#       @obj = obj
#     end
#     def get_it
#       #{code}
#     end
#   }
#   klass.new('It').get_it
#
# Good! See also ERB#def_method, ERB#def_module, and ERB#def_class.
#
# source://erb//lib/erb/compiler.rb#73
class ERB::Compiler
  # Construct a new compiler using the trim_mode. See ERB::new for available
  # trim modes.
  #
  # @return [Compiler] a new instance of Compiler
  #
  # source://erb//lib/erb/compiler.rb#433
  def initialize(trim_mode); end

  # source://erb//lib/erb/compiler.rb#315
  def add_insert_cmd(out, content); end

  # source://erb//lib/erb/compiler.rb#311
  def add_put_cmd(out, content); end

  # Compiles an ERB template into Ruby code.  Returns an array of the code
  # and encoding like ["code", Encoding].
  #
  # @raise [ArgumentError]
  #
  # source://erb//lib/erb/compiler.rb#321
  def compile(s); end

  # source://erb//lib/erb/compiler.rb#381
  def compile_content(stag, out); end

  # source://erb//lib/erb/compiler.rb#368
  def compile_etag(etag, out, scanner); end

  # source://erb//lib/erb/compiler.rb#344
  def compile_stag(stag, out, scanner); end

  # The command to handle text that is inserted prior to a newline
  #
  # source://erb//lib/erb/compiler.rb#446
  def insert_cmd; end

  # The command to handle text that is inserted prior to a newline
  #
  # source://erb//lib/erb/compiler.rb#446
  def insert_cmd=(_arg0); end

  # source://erb//lib/erb/compiler.rb#427
  def make_scanner(src); end

  # Returns the value of attribute percent.
  #
  # source://erb//lib/erb/compiler.rb#440
  def percent; end

  # An array of commands appended to compiled code
  #
  # source://erb//lib/erb/compiler.rb#452
  def post_cmd; end

  # An array of commands appended to compiled code
  #
  # source://erb//lib/erb/compiler.rb#452
  def post_cmd=(_arg0); end

  # An array of commands prepended to compiled code
  #
  # source://erb//lib/erb/compiler.rb#449
  def pre_cmd; end

  # An array of commands prepended to compiled code
  #
  # source://erb//lib/erb/compiler.rb#449
  def pre_cmd=(_arg0); end

  # source://erb//lib/erb/compiler.rb#398
  def prepare_trim_mode(mode); end

  # The command to handle text that ends with a newline
  #
  # source://erb//lib/erb/compiler.rb#443
  def put_cmd; end

  # The command to handle text that ends with a newline
  #
  # source://erb//lib/erb/compiler.rb#443
  def put_cmd=(_arg0); end

  # Returns the value of attribute trim_mode.
  #
  # source://erb//lib/erb/compiler.rb#440
  def trim_mode; end

  private

  # A buffered text in #compile
  #
  # source://erb//lib/erb/compiler.rb#457
  def content; end

  # A buffered text in #compile
  #
  # source://erb//lib/erb/compiler.rb#457
  def content=(_arg0); end

  # source://erb//lib/erb/compiler.rb#459
  def detect_magic_comment(s, enc = T.unsafe(nil)); end

  # :startdoc:
  #
  # source://erb//lib/erb/compiler.rb#485
  def warn_invalid_trim_mode(mode, uplevel:); end
end

# source://erb//lib/erb/compiler.rb#278
class ERB::Compiler::Buffer
  # @return [Buffer] a new instance of Buffer
  #
  # source://erb//lib/erb/compiler.rb#279
  def initialize(compiler, enc = T.unsafe(nil), frozen = T.unsafe(nil)); end

  # source://erb//lib/erb/compiler.rb#301
  def close; end

  # source://erb//lib/erb/compiler.rb#295
  def cr; end

  # source://erb//lib/erb/compiler.rb#291
  def push(cmd); end

  # Returns the value of attribute script.
  #
  # source://erb//lib/erb/compiler.rb#289
  def script; end
end

# source://erb//lib/erb/compiler.rb#254
class ERB::Compiler::ExplicitScanner < ::ERB::Compiler::Scanner
  # source://erb//lib/erb/compiler.rb#255
  def scan; end
end

# source://erb//lib/erb/compiler.rb#74
class ERB::Compiler::PercentLine
  # @return [PercentLine] a new instance of PercentLine
  #
  # source://erb//lib/erb/compiler.rb#75
  def initialize(str); end

  # Returns the value of attribute value.
  #
  # source://erb//lib/erb/compiler.rb#79
  def to_s; end

  # Returns the value of attribute value.
  #
  # source://erb//lib/erb/compiler.rb#78
  def value; end
end

# source://erb//lib/erb/compiler.rb#82
class ERB::Compiler::Scanner
  # @return [Scanner] a new instance of Scanner
  #
  # source://erb//lib/erb/compiler.rb#108
  def initialize(src, trim_mode, percent); end

  # Returns the value of attribute etags.
  #
  # source://erb//lib/erb/compiler.rb#115
  def etags; end

  # source://erb//lib/erb/compiler.rb#117
  def scan; end

  # Returns the value of attribute stag.
  #
  # source://erb//lib/erb/compiler.rb#114
  def stag; end

  # Sets the attribute stag
  #
  # @param value the value to set the attribute stag to.
  #
  # source://erb//lib/erb/compiler.rb#114
  def stag=(_arg0); end

  # Returns the value of attribute stags.
  #
  # source://erb//lib/erb/compiler.rb#115
  def stags; end

  class << self
    # source://erb//lib/erb/compiler.rb#97
    def default_scanner=(klass); end

    # source://erb//lib/erb/compiler.rb#101
    def make_scanner(src, trim_mode, percent); end

    # source://erb//lib/erb/compiler.rb#94
    def regist_scanner(klass, trim_mode, percent); end

    # source://erb//lib/erb/compiler.rb#86
    def register_scanner(klass, trim_mode, percent); end
  end
end

# source://erb//lib/erb/compiler.rb#107
ERB::Compiler::Scanner::DEFAULT_ETAGS = T.let(T.unsafe(nil), Array)

# source://erb//lib/erb/compiler.rb#106
ERB::Compiler::Scanner::DEFAULT_STAGS = T.let(T.unsafe(nil), Array)

# source://erb//lib/erb/compiler.rb#240
class ERB::Compiler::SimpleScanner < ::ERB::Compiler::Scanner
  # source://erb//lib/erb/compiler.rb#241
  def scan; end
end

# source://erb//lib/erb/compiler.rb#120
class ERB::Compiler::TrimScanner < ::ERB::Compiler::Scanner
  # @return [TrimScanner] a new instance of TrimScanner
  #
  # source://erb//lib/erb/compiler.rb#121
  def initialize(src, trim_mode, percent); end

  # source://erb//lib/erb/compiler.rb#210
  def explicit_trim_line(line); end

  # @return [Boolean]
  #
  # source://erb//lib/erb/compiler.rb#229
  def is_erb_stag?(s); end

  # source://erb//lib/erb/compiler.rb#152
  def percent_line(line, &block); end

  # source://erb//lib/erb/compiler.rb#140
  def scan(&block); end

  # source://erb//lib/erb/compiler.rb#165
  def scan_line(line); end

  # source://erb//lib/erb/compiler.rb#174
  def trim_line1(line); end

  # source://erb//lib/erb/compiler.rb#188
  def trim_line2(line); end
end

# :stopdoc:
#
# source://erb//lib/erb/compiler.rb#476
ERB::Compiler::WARNING_UPLEVEL = T.let(T.unsafe(nil), Integer)

# ERB::DefMethod
#
# Utility module to define eRuby script as instance method.
#
# === Example
#
# example.rhtml:
#   <% for item in @items %>
#   <b><%= item %></b>
#   <% end %>
#
# example.rb:
#   require 'erb'
#   class MyClass
#     extend ERB::DefMethod
#     def_erb_method('render()', 'example.rhtml')
#     def initialize(items)
#       @items = items
#     end
#   end
#   print MyClass.new([10,20,30]).render()
#
# result:
#
#   <b>10</b>
#
#   <b>20</b>
#
#   <b>30</b>
#
# source://erb//lib/erb/def_method.rb#33
module ERB::DefMethod
  private

  # define _methodname_ as instance method of current module, using ERB
  # object or eRuby file
  #
  # source://erb//lib/erb/def_method.rb#36
  def def_erb_method(methodname, erb_or_fname); end

  class << self
    # define _methodname_ as instance method of current module, using ERB
    # object or eRuby file
    #
    # source://erb//lib/erb/def_method.rb#46
    def def_erb_method(methodname, erb_or_fname); end
  end
end

module ERB::Escape; end

# source://erb//lib/erb.rb#355
ERB::NOT_GIVEN = T.let(T.unsafe(nil), Object)

# ERB::Util
#
# A utility module for conversion routines, often handy in HTML generation.
#
# source://erb//lib/erb/util.rb#32
module ERB::Util
  include ::ActiveSupport::CoreExt::ERBUtil
  include ::ERB::Escape
  extend ::ActiveSupport::CoreExt::ERBUtil

  private

  # cgi.gem <= v0.3.2
  #
  # source://erb//lib/erb/util.rb#73
  def u(s); end

  # cgi.gem <= v0.3.2
  #
  # source://erb//lib/erb/util.rb#63
  def url_encode(s); end

  class << self
    # source://erb//lib/erb/util.rb#48
    def h(s); end

    # source://erb//lib/erb/util.rb#46
    def html_escape(s); end

    # cgi.gem <= v0.3.2
    #
    # source://erb//lib/erb/util.rb#74
    def u(s); end

    # cgi.gem <= v0.3.2
    #
    # source://erb//lib/erb/util.rb#75
    def url_encode(s); end
  end
end

# source://erb//lib/erb/version.rb#3
ERB::VERSION = T.let(T.unsafe(nil), String)

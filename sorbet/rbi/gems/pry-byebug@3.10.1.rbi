# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `pry-byebug` gem.
# Please instead update this file by running `bin/tapioca gem pry-byebug`.

# source://pry-byebug//lib/byebug/processors/pry_processor.rb#5
module Byebug
  extend ::Byebug::Helpers::ReflectionHelper

  # source://byebug/11.1.3/lib/byebug/core.rb#31
  def displays; end

  # source://byebug/11.1.3/lib/byebug/core.rb#31
  def displays=(_arg0); end

  # source://byebug/11.1.3/lib/byebug/core.rb#25
  def init_file; end

  # source://byebug/11.1.3/lib/byebug/core.rb#25
  def init_file=(_arg0); end

  # source://byebug/11.1.3/lib/byebug/core.rb#41
  def mode; end

  # source://byebug/11.1.3/lib/byebug/core.rb#41
  def mode=(_arg0); end

  # source://byebug/11.1.3/lib/byebug/core.rb#52
  def run_init_script; end

  private

  def add_catchpoint(_arg0); end
  def breakpoints; end
  def catchpoints; end
  def contexts; end
  def current_context; end
  def debug_load(*_arg0); end
  def lock; end
  def post_mortem=(_arg0); end
  def post_mortem?; end
  def raised_exception; end

  # source://byebug/11.1.3/lib/byebug/core.rb#102
  def rc_dirs; end

  # source://byebug/11.1.3/lib/byebug/core.rb#91
  def run_rc_file(rc_file); end

  def start; end
  def started?; end
  def stop; end
  def stoppable?; end
  def thread_context(_arg0); end
  def tracing=(_arg0); end
  def tracing?; end
  def unlock; end
  def verbose=(_arg0); end
  def verbose?; end

  class << self
    # source://byebug/11.1.3/lib/byebug/remote.rb#25
    def actual_control_port; end

    # source://byebug/11.1.3/lib/byebug/remote.rb#20
    def actual_port; end

    def add_catchpoint(_arg0); end

    # source://byebug/11.1.3/lib/byebug/attacher.rb#10
    def attach; end

    def breakpoints; end
    def catchpoints; end
    def contexts; end
    def current_context; end
    def debug_load(*_arg0); end

    # source://byebug/11.1.3/lib/byebug/core.rb#76
    def handle_post_mortem; end

    # source://byebug/11.1.3/lib/byebug/remote.rb#32
    def interrupt; end

    # source://byebug/11.1.3/lib/byebug/core.rb#61
    def load_settings; end

    def lock; end

    # source://byebug/11.1.3/lib/byebug/remote.rb#59
    def parse_host_and_port(host_port_spec); end

    def post_mortem=(_arg0); end
    def post_mortem?; end
    def raised_exception; end

    # source://byebug/11.1.3/lib/byebug/attacher.rb#21
    def spawn(host = T.unsafe(nil), port = T.unsafe(nil)); end

    def start; end

    # source://byebug/11.1.3/lib/byebug/remote.rb#55
    def start_client(host = T.unsafe(nil), port = T.unsafe(nil)); end

    # source://byebug/11.1.3/lib/byebug/remote.rb#48
    def start_control(host = T.unsafe(nil), port = T.unsafe(nil)); end

    # source://byebug/11.1.3/lib/byebug/remote.rb#39
    def start_server(host = T.unsafe(nil), port = T.unsafe(nil)); end

    def started?; end
    def stop; end
    def stoppable?; end
    def thread_context(_arg0); end
    def tracing=(_arg0); end
    def tracing?; end
    def unlock; end
    def verbose=(_arg0); end
    def verbose?; end

    # source://byebug/11.1.3/lib/byebug/remote.rb#17
    def wait_connection; end

    # source://byebug/11.1.3/lib/byebug/remote.rb#17
    def wait_connection=(_arg0); end

    private

    # source://byebug/11.1.3/lib/byebug/remote.rb#66
    def client; end

    # source://byebug/11.1.3/lib/byebug/remote.rb#76
    def control; end

    # source://byebug/11.1.3/lib/byebug/remote.rb#70
    def server; end
  end
end

class Byebug::DebugThread < ::Thread
  class << self
    def inherited; end
  end
end

# Extends raw byebug's processor.
#
# source://pry-byebug//lib/byebug/processors/pry_processor.rb#9
class Byebug::PryProcessor < ::Byebug::CommandProcessor
  # Called when a breakpoint is hit. Note that `at_line`` is called
  # inmediately after with the context's `stop_reason == :breakpoint`, so we
  # must not resume the pry instance here
  #
  # source://pry-byebug//lib/byebug/processors/pry_processor.rb#80
  def at_breakpoint(breakpoint); end

  # Called when the debugger wants to stop at a regular line
  #
  # source://pry-byebug//lib/byebug/processors/pry_processor.rb#64
  def at_line; end

  # Called when the debugger wants to stop right before a method return
  #
  # source://pry-byebug//lib/byebug/processors/pry_processor.rb#71
  def at_return(_return_value); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def bold(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def output(*args, **_arg1, &block); end

  # Set up a number of navigational commands to be performed by Byebug.
  #
  # source://pry-byebug//lib/byebug/processors/pry_processor.rb#45
  def perform(action, options = T.unsafe(nil)); end

  # Returns the value of attribute pry.
  #
  # source://pry-byebug//lib/byebug/processors/pry_processor.rb#10
  def pry; end

  # Sets the attribute pry
  #
  # @param value the value to set the attribute pry to.
  #
  # source://pry-byebug//lib/byebug/processors/pry_processor.rb#10
  def pry=(_arg0); end

  # Wrap a Pry REPL to catch navigational commands and act on them.
  #
  # source://pry-byebug//lib/byebug/processors/pry_processor.rb#26
  def run(&_block); end

  private

  # source://pry-byebug//lib/byebug/processors/pry_processor.rb#93
  def n_hits(breakpoint); end

  # source://pry-byebug//lib/byebug/processors/pry_processor.rb#114
  def perform_backtrace(_options); end

  # source://pry-byebug//lib/byebug/processors/pry_processor.rb#142
  def perform_down(options); end

  # source://pry-byebug//lib/byebug/processors/pry_processor.rb#130
  def perform_finish(*_arg0); end

  # source://pry-byebug//lib/byebug/processors/pry_processor.rb#150
  def perform_frame(options); end

  # source://pry-byebug//lib/byebug/processors/pry_processor.rb#120
  def perform_next(options); end

  # source://pry-byebug//lib/byebug/processors/pry_processor.rb#125
  def perform_step(options); end

  # source://pry-byebug//lib/byebug/processors/pry_processor.rb#134
  def perform_up(options); end

  # Resume an existing Pry REPL at the paused point.
  #
  # source://pry-byebug//lib/byebug/processors/pry_processor.rb#102
  def resume_pry; end

  class << self
    # source://pry-byebug//lib/byebug/processors/pry_processor.rb#16
    def start; end
  end
end

class Byebug::ThreadsTable; end

# source://pry-byebug//lib/pry/byebug/breakpoints.rb#3
class Pry
  extend ::Forwardable

  # source://pry/0.14.2/lib/pry/pry_instance.rb#81
  def initialize(options = T.unsafe(nil)); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#212
  def add_sticky_local(name, &block); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#35
  def backtrace; end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#35
  def backtrace=(_arg0); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#32
  def binding_stack; end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#32
  def binding_stack=(_arg0); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def color(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def color=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def commands(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def commands=(*args, **_arg1, &block); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#145
  def complete(str); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#50
  def config; end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#124
  def current_binding; end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#124
  def current_context; end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#33
  def custom_completions; end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#33
  def custom_completions=(_arg0); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def editor(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def editor=(*args, **_arg1, &block); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#255
  def eval(line, options = T.unsafe(nil)); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#34
  def eval_string; end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#34
  def eval_string=(_arg0); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#286
  def evaluate_ruby(code); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def exception_handler(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def exception_handler=(*args, **_arg1, &block); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#394
  def exec_hook(name, *args, &block); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#42
  def exit_value; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def extra_sticky_locals(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def extra_sticky_locals=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def hooks(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def hooks=(*args, **_arg1, &block); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#173
  def inject_local(name, value, binding); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#201
  def inject_sticky_locals!; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def input(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def input=(*args, **_arg1, &block); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#45
  def input_ring; end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#39
  def last_dir; end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#39
  def last_dir=(_arg0); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#41
  def last_exception; end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#418
  def last_exception=(exception); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#38
  def last_file; end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#38
  def last_file=(_arg0); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#37
  def last_result; end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#37
  def last_result=(_arg0); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#440
  def last_result_is_exception?; end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#190
  def memory_size; end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#195
  def memory_size=(size); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#538
  def output; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def output=(*args, **_arg1, &block); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#48
  def output_ring; end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#530
  def pager; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def pager=(*args, **_arg1, &block); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#522
  def pop_prompt; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def print(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def print=(*args, **_arg1, &block); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#325
  def process_command(val); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#360
  def process_command_safely(val); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#101
  def prompt; end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#108
  def prompt=(new_prompt); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#131
  def push_binding(object); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#118
  def push_initial_binding(target = T.unsafe(nil)); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#506
  def push_prompt(new_prompt); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#592
  def quiet?; end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#582
  def raise_up(*args); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#586
  def raise_up!(*args); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#554
  def raise_up_common(force, *args); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#282
  def repl(target = T.unsafe(nil)); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#231
  def reset_eval_string; end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#375
  def run_command(val); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#453
  def select_prompt; end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#409
  def set_last_result(result, code = T.unsafe(nil)); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#447
  def should_print?; end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#298
  def show_result(result); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#216
  def sticky_locals; end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#36
  def suppress_output; end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#36
  def suppress_output=(_arg0); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#428
  def update_input_history(code); end

  private

  # source://pry/0.14.2/lib/pry/pry_instance.rb#680
  def ensure_correct_encoding!(val); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#688
  def generate_prompt(prompt_proc, conf); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#598
  def handle_line(line, options); end

  # source://pry/0.14.2/lib/pry/pry_instance.rb#697
  def prompt_stack; end

  class << self
    # source://pry/0.14.2/lib/pry/code.rb#12
    def Code(obj); end

    # source://pry/0.14.2/lib/pry/method.rb#9
    def Method(obj); end

    # source://pry/0.14.2/lib/pry/wrapped_module.rb#7
    def WrappedModule(obj); end

    # source://pry/0.14.2/lib/pry/pry_class.rb#294
    def auto_resize!; end

    # source://pry/0.14.2/lib/pry/pry_class.rb#347
    def binding_for(target); end

    # source://pry/0.14.2/lib/pry/pry_class.rb#22
    def cli; end

    # source://pry/0.14.2/lib/pry/pry_class.rb#22
    def cli=(_arg0); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def color(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def color=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def commands(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def commands=(*args, **_arg1, &block); end

    # source://pry/0.14.2/lib/pry/pry_class.rb#25
    def config; end

    # source://pry/0.14.2/lib/pry/pry_class.rb#25
    def config=(_arg0); end

    # source://pry/0.14.2/lib/pry/pry_class.rb#46
    def configure; end

    # source://pry/0.14.2/lib/pry/pry_class.rb#380
    def critical_section; end

    # source://pry/0.14.2/lib/pry/pry_class.rb#63
    def current; end

    # source://pry/0.14.2/lib/pry/pry_class.rb#19
    def current_line; end

    # source://pry/0.14.2/lib/pry/pry_class.rb#19
    def current_line=(_arg0); end

    # source://pry/0.14.2/lib/pry/pry_class.rb#18
    def custom_completions; end

    # source://pry/0.14.2/lib/pry/pry_class.rb#18
    def custom_completions=(_arg0); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def editor(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def editor=(*args, **_arg1, &block); end

    # source://pry/0.14.2/lib/pry/pry_class.rb#21
    def eval_path; end

    # source://pry/0.14.2/lib/pry/pry_class.rb#21
    def eval_path=(_arg0); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def exception_handler(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def exception_handler=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def extra_sticky_locals(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def extra_sticky_locals=(*args, **_arg1, &block); end

    # source://pry/0.14.2/lib/pry/pry_class.rb#139
    def final_session_setup; end

    # source://forwardable/1.3.3/forwardable.rb#231
    def history(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def history=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def hooks(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def hooks=(*args, **_arg1, &block); end

    # source://pry/0.14.2/lib/pry/pry_class.rb#375
    def in_critical_section?; end

    # source://pry/0.14.2/lib/pry/pry_class.rb#338
    def init; end

    # source://pry/0.14.2/lib/pry/pry_class.rb#257
    def initial_session?; end

    # source://pry/0.14.2/lib/pry/pry_class.rb#129
    def initial_session_setup; end

    # source://forwardable/1.3.3/forwardable.rb#231
    def input(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def input=(*args, **_arg1, &block); end

    # source://pry/0.14.2/lib/pry/pry_class.rb#24
    def last_internal_error; end

    # source://pry/0.14.2/lib/pry/pry_class.rb#24
    def last_internal_error=(_arg0); end

    # source://pry/0.14.2/lib/pry/pry_class.rb#20
    def line_buffer; end

    # source://pry/0.14.2/lib/pry/pry_class.rb#20
    def line_buffer=(_arg0); end

    # source://pry/0.14.2/lib/pry/pry_class.rb#69
    def load_file_at_toplevel(file); end

    # source://pry/0.14.2/lib/pry/pry_class.rb#202
    def load_file_through_repl(file_name); end

    # source://pry/0.14.2/lib/pry/pry_class.rb#251
    def load_history; end

    # source://pry/0.14.2/lib/pry/pry_class.rb#77
    def load_rc_files; end

    # source://pry/0.14.2/lib/pry/pry_class.rb#101
    def load_requires; end

    # source://pry/0.14.2/lib/pry/pry_class.rb#109
    def load_traps; end

    # source://pry/0.14.2/lib/pry/pry_class.rb#113
    def load_win32console; end

    # source://pry/0.14.2/lib/pry/pry_class.rb#55
    def main; end

    # source://forwardable/1.3.3/forwardable.rb#231
    def memory_size(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def memory_size=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def output(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def output=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def pager(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def pager=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def print(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def print=(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def prompt(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def prompt=(*args, **_arg1, &block); end

    # source://pry/0.14.2/lib/pry/pry_class.rb#23
    def quiet; end

    # source://pry/0.14.2/lib/pry/pry_class.rb#23
    def quiet=(_arg0); end

    # source://pry/0.14.2/lib/pry/pry_class.rb#86
    def rc_files_to_load; end

    # source://pry/0.14.2/lib/pry/pry_class.rb#94
    def real_path_to(file); end

    # source://pry/0.14.2/lib/pry/pry_class.rb#326
    def reset_defaults; end

    # source://pry/0.14.2/lib/pry/pry_class.rb#277
    def run_command(command_string, options = T.unsafe(nil)); end

    # source://pry/0.14.2/lib/pry/pry_class.rb#156
    def start(target = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://pry/0.14.2/lib/pry/pry_class.rb#354
    def toplevel_binding; end

    # source://pry/0.14.2/lib/pry/pry_class.rb#372
    def toplevel_binding=(_arg0); end

    # source://pry/0.14.2/lib/pry/pry_class.rb#225
    def view_clip(obj, options = T.unsafe(nil)); end

    private

    # source://pry/0.14.2/lib/pry/pry_class.rb#388
    def mutex_available?; end
  end
end

# source://pry-byebug//lib/pry/byebug/breakpoints.rb#4
module Pry::Byebug; end

# Wrapper for Byebug.breakpoints that respects our Processor and has better
# failure behavior. Acts as an Enumerable.
#
# source://pry-byebug//lib/pry/byebug/breakpoints.rb#9
module Pry::Byebug::Breakpoints
  extend ::Enumerable
  extend ::Pry::Byebug::Breakpoints

  # Adds a file breakpoint.
  #
  # @raise [ArgumentError]
  #
  # source://pry-byebug//lib/pry/byebug/breakpoints.rb#63
  def add_file(file, line, expression = T.unsafe(nil)); end

  # Adds a method breakpoint.
  #
  # source://pry-byebug//lib/pry/byebug/breakpoints.rb#51
  def add_method(method, expression = T.unsafe(nil)); end

  # source://pry-byebug//lib/pry/byebug/breakpoints.rb#44
  def breakpoints; end

  # Changes the conditional expression for a breakpoint.
  #
  # source://pry-byebug//lib/pry/byebug/breakpoints.rb#78
  def change(id, expression = T.unsafe(nil)); end

  # Deletes an existing breakpoint with the given ID.
  #
  # @raise [ArgumentError]
  #
  # source://pry-byebug//lib/pry/byebug/breakpoints.rb#89
  def delete(id); end

  # Deletes all breakpoints.
  #
  # source://pry-byebug//lib/pry/byebug/breakpoints.rb#100
  def delete_all; end

  # Disables a breakpoint with the given ID.
  #
  # source://pry-byebug//lib/pry/byebug/breakpoints.rb#115
  def disable(id); end

  # Disables all breakpoints.
  #
  # source://pry-byebug//lib/pry/byebug/breakpoints.rb#122
  def disable_all; end

  # source://pry-byebug//lib/pry/byebug/breakpoints.rb#136
  def each(&block); end

  # Enables a disabled breakpoint with the given ID.
  #
  # source://pry-byebug//lib/pry/byebug/breakpoints.rb#108
  def enable(id); end

  # @raise [ArgumentError]
  #
  # source://pry-byebug//lib/pry/byebug/breakpoints.rb#144
  def find_by_id(id); end

  # source://pry-byebug//lib/pry/byebug/breakpoints.rb#140
  def last; end

  # source://pry-byebug//lib/pry/byebug/breakpoints.rb#132
  def size; end

  # source://pry-byebug//lib/pry/byebug/breakpoints.rb#128
  def to_a; end

  private

  # source://pry-byebug//lib/pry/byebug/breakpoints.rb#153
  def change_status(id, enabled = T.unsafe(nil)); end

  # source://pry-byebug//lib/pry/byebug/breakpoints.rb#159
  def validate_expression(exp); end
end

# Breakpoint in a file:line location
#
# source://pry-byebug//lib/pry/byebug/breakpoints.rb#16
class Pry::Byebug::Breakpoints::FileBreakpoint < ::SimpleDelegator
  # source://pry-byebug//lib/pry/byebug/breakpoints.rb#17
  def source_code; end

  # source://pry-byebug//lib/pry/byebug/breakpoints.rb#21
  def to_s; end
end

# Breakpoint in a Class#method location
#
# source://pry-byebug//lib/pry/byebug/breakpoints.rb#29
class Pry::Byebug::Breakpoints::MethodBreakpoint < ::SimpleDelegator
  # @return [MethodBreakpoint] a new instance of MethodBreakpoint
  #
  # source://pry-byebug//lib/pry/byebug/breakpoints.rb#30
  def initialize(byebug_bp, method); end

  # source://pry-byebug//lib/pry/byebug/breakpoints.rb#35
  def source_code; end

  # source://pry-byebug//lib/pry/byebug/breakpoints.rb#39
  def to_s; end
end

class Pry::REPL
  extend ::Forwardable

  # source://pry/0.14.2/lib/pry/repl.rb#22
  def initialize(pry, options = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def input(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def output(*args, **_arg1, &block); end

  # source://pry/0.14.2/lib/pry/repl.rb#9
  def pry; end

  # source://pry/0.14.2/lib/pry/repl.rb#9
  def pry=(_arg0); end

  # source://pry/0.14.2/lib/pry/repl.rb#36
  def start; end

  private

  # source://pry/0.14.2/lib/pry/repl.rb#237
  def calculate_overhang(current_prompt, original_val, indented_val); end

  # source://pry/0.14.2/lib/pry/repl.rb#205
  def coolline_available?; end

  # source://pry/0.14.2/lib/pry/repl.rb#84
  def epilogue; end

  # source://pry/0.14.2/lib/pry/repl.rb#127
  def handle_read_errors; end

  # source://pry/0.14.2/lib/pry/repl.rb#195
  def input_readline(*args); end

  # source://pry/0.14.2/lib/pry/repl.rb#217
  def piping?; end

  # source://pry/0.14.2/lib/pry/repl.rb#47
  def prologue; end

  # source://pry/0.14.2/lib/pry/repl.rb#93
  def read; end

  # source://pry/0.14.2/lib/pry/repl.rb#169
  def read_line(current_prompt); end

  # source://pry/0.14.2/lib/pry/repl.rb#201
  def readline_available?; end

  # source://pry/0.14.2/lib/pry/repl.rb#66
  def repl; end

  # source://pry/0.14.2/lib/pry/repl.rb#224
  def set_readline_output; end

  class << self
    # source://pry-byebug//lib/pry-byebug/pry_ext.rb#8
    def start(options = T.unsafe(nil)); end

    # source://pry-byebug//lib/pry-byebug/pry_ext.rb#8
    def start_with_pry_byebug(options = T.unsafe(nil)); end

    # source://pry/0.14.2/lib/pry/repl.rb#14
    def start_without_pry_byebug(options); end
  end
end

# Main container module for Pry-Byebug functionality
#
# source://pry-byebug//lib/pry-byebug/helpers/location.rb#3
module PryByebug
  # Reference to currently running pry-remote server. Used by the processor.
  #
  # source://pry-byebug//lib/pry-byebug/base.rb#10
  def current_remote_server; end

  # Reference to currently running pry-remote server. Used by the processor.
  #
  # source://pry-byebug//lib/pry-byebug/base.rb#10
  def current_remote_server=(_arg0); end

  private

  # Ensures that a command is executed in a local file context.
  #
  # source://pry-byebug//lib/pry-byebug/base.rb#25
  def check_file_context(target, msg = T.unsafe(nil)); end

  # Checks that a target binding is in a local file context.
  #
  # source://pry-byebug//lib/pry-byebug/base.rb#17
  def file_context?(target); end

  class << self
    # Ensures that a command is executed in a local file context.
    #
    # @raise [Pry::CommandError]
    #
    # source://pry-byebug//lib/pry-byebug/base.rb#25
    def check_file_context(target, msg = T.unsafe(nil)); end

    # Checks that a target binding is in a local file context.
    #
    # @return [Boolean]
    #
    # source://pry-byebug//lib/pry-byebug/base.rb#17
    def file_context?(target); end
  end
end

# Display the current stack
#
# source://pry-byebug//lib/pry-byebug/commands/backtrace.rb#9
class PryByebug::BacktraceCommand < ::Pry::ClassCommand
  include ::PryByebug::Helpers::Navigation

  # source://pry-byebug//lib/pry-byebug/commands/backtrace.rb#23
  def process; end
end

# Add, show and remove breakpoints
#
# source://pry-byebug//lib/pry-byebug/commands/breakpoint.rb#12
class PryByebug::BreakCommand < ::Pry::ClassCommand
  include ::PryByebug::Helpers::Breakpoints
  include ::PryByebug::Helpers::Location
  include ::PryByebug::Helpers::Multiline

  # source://pry-byebug//lib/pry-byebug/commands/breakpoint.rb#50
  def options(opt); end

  # source://pry-byebug//lib/pry-byebug/commands/breakpoint.rb#62
  def process; end

  private

  # source://pry-byebug//lib/pry-byebug/commands/breakpoint.rb#111
  def add_breakpoint(place, condition); end

  # source://pry-byebug//lib/pry-byebug/commands/breakpoint.rb#93
  def new_breakpoint; end

  # source://pry-byebug//lib/pry-byebug/commands/breakpoint.rb#102
  def option_to_method(option); end

  # source://pry-byebug//lib/pry-byebug/commands/breakpoint.rb#106
  def print_all; end

  # source://pry-byebug//lib/pry-byebug/commands/breakpoint.rb#88
  def process_condition; end

  # source://pry-byebug//lib/pry-byebug/commands/breakpoint.rb#78
  def process_delete; end

  # source://pry-byebug//lib/pry-byebug/commands/breakpoint.rb#78
  def process_delete_all; end

  # source://pry-byebug//lib/pry-byebug/commands/breakpoint.rb#78
  def process_disable; end

  # source://pry-byebug//lib/pry-byebug/commands/breakpoint.rb#78
  def process_disable_all; end

  # source://pry-byebug//lib/pry-byebug/commands/breakpoint.rb#78
  def process_enable; end

  # source://pry-byebug//lib/pry-byebug/commands/breakpoint.rb#84
  def process_show; end
end

# Continue program execution until the next breakpoint
#
# source://pry-byebug//lib/pry-byebug/commands/continue.rb#11
class PryByebug::ContinueCommand < ::Pry::ClassCommand
  include ::PryByebug::Helpers::Navigation
  include ::PryByebug::Helpers::Breakpoints
  include ::PryByebug::Helpers::Location

  # source://pry-byebug//lib/pry-byebug/commands/continue.rb#31
  def process; end
end

# Travel down the frame stack
#
# source://pry-byebug//lib/pry-byebug/commands/down.rb#9
class PryByebug::DownCommand < ::Pry::ClassCommand
  include ::PryByebug::Helpers::Navigation

  # source://pry-byebug//lib/pry-byebug/commands/down.rb#27
  def process; end
end

# Exit pry REPL with Byebug.stop
#
# source://pry-byebug//lib/pry-byebug/commands/exit_all.rb#9
class PryByebug::ExitAllCommand < ::Pry::Command::ExitAll
  # source://pry-byebug//lib/pry-byebug/commands/exit_all.rb#10
  def process; end
end

# Run until the end of current frame
#
# source://pry-byebug//lib/pry-byebug/commands/finish.rb#9
class PryByebug::FinishCommand < ::Pry::ClassCommand
  include ::PryByebug::Helpers::Navigation

  # source://pry-byebug//lib/pry-byebug/commands/finish.rb#20
  def process; end
end

# Move to a specific frame in the callstack
#
# source://pry-byebug//lib/pry-byebug/commands/frame.rb#9
class PryByebug::FrameCommand < ::Pry::ClassCommand
  include ::PryByebug::Helpers::Navigation

  # source://pry-byebug//lib/pry-byebug/commands/frame.rb#27
  def process; end
end

# source://pry-byebug//lib/pry-byebug/helpers/location.rb#4
module PryByebug::Helpers; end

# Common helpers for breakpoint related commands
#
# source://pry-byebug//lib/pry-byebug/helpers/breakpoints.rb#10
module PryByebug::Helpers::Breakpoints
  # Prints a message with bold font.
  #
  # source://pry-byebug//lib/pry-byebug/helpers/breakpoints.rb#21
  def bold_puts(msg); end

  # Byebug's array of breakpoints.
  #
  # source://pry-byebug//lib/pry-byebug/helpers/breakpoints.rb#14
  def breakpoints; end

  # Max width of breakpoints id column
  #
  # source://pry-byebug//lib/pry-byebug/helpers/breakpoints.rb#77
  def max_width; end

  # Prints a header for the breakpoint list.
  #
  # source://pry-byebug//lib/pry-byebug/helpers/breakpoints.rb#63
  def print_breakpoints_header; end

  # Print out full information about a breakpoint.
  #
  # Includes surrounding code at that point.
  #
  # source://pry-byebug//lib/pry-byebug/helpers/breakpoints.rb#30
  def print_full_breakpoint(breakpoint); end

  # Print out concise information about a breakpoint.
  #
  # source://pry-byebug//lib/pry-byebug/helpers/breakpoints.rb#52
  def print_short_breakpoint(breakpoint); end
end

# Compatibility helper to handle source location
#
# source://pry-byebug//lib/pry-byebug/helpers/location.rb#8
module PryByebug::Helpers::Location
  private

  # Current file in the target binding. Used as the default breakpoint
  # location.
  #
  # source://pry-byebug//lib/pry-byebug/helpers/location.rb#15
  def current_file(source = T.unsafe(nil)); end

  class << self
    # Current file in the target binding. Used as the default breakpoint
    # location.
    #
    # source://pry-byebug//lib/pry-byebug/helpers/location.rb#15
    def current_file(source = T.unsafe(nil)); end
  end
end

# Helpers to help handling multiline inputs
#
# source://pry-byebug//lib/pry-byebug/helpers/multiline.rb#8
module PryByebug::Helpers::Multiline
  # Returns true if we are in a multiline context and, as a side effect,
  # updates the partial evaluation string with the current input.
  #
  # Returns false otherwise
  #
  # source://pry-byebug//lib/pry-byebug/helpers/multiline.rb#15
  def check_multiline_context; end
end

# Helpers to aid breaking out of the REPL loop
#
# source://pry-byebug//lib/pry-byebug/helpers/navigation.rb#8
module PryByebug::Helpers::Navigation
  # Breaks out of the REPL loop and signals tracer
  #
  # source://pry-byebug//lib/pry-byebug/helpers/navigation.rb#12
  def breakout_navigation(action, options = T.unsafe(nil)); end
end

# Run a number of lines and then stop again
#
# source://pry-byebug//lib/pry-byebug/commands/next.rb#10
class PryByebug::NextCommand < ::Pry::ClassCommand
  include ::PryByebug::Helpers::Navigation
  include ::PryByebug::Helpers::Multiline

  # source://pry-byebug//lib/pry-byebug/commands/next.rb#29
  def process; end
end

# Run a number of Ruby statements and then stop again
#
# source://pry-byebug//lib/pry-byebug/commands/step.rb#9
class PryByebug::StepCommand < ::Pry::ClassCommand
  include ::PryByebug::Helpers::Navigation

  # source://pry-byebug//lib/pry-byebug/commands/step.rb#26
  def process; end
end

# Travel up the frame stack
#
# source://pry-byebug//lib/pry-byebug/commands/up.rb#9
class PryByebug::UpCommand < ::Pry::ClassCommand
  include ::PryByebug::Helpers::Navigation

  # source://pry-byebug//lib/pry-byebug/commands/up.rb#27
  def process; end
end

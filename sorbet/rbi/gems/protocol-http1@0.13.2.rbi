# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `protocol-http1` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module Protocol
end

module Protocol::HTTP1
end

class Protocol::HTTP1::BadHeader < ::Protocol::HTTP1::Error
end

class Protocol::HTTP1::BadRequest < ::Protocol::HTTP1::Error
end

class Protocol::HTTP1::BadResponse < ::Protocol::HTTP1::Error
end

module Protocol::HTTP1::Body
end

class Protocol::HTTP1::Body::Chunked < ::Protocol::HTTP::Body::Readable
  def initialize(stream, headers); end

  def close(error = T.unsafe(nil)); end
  def empty?; end
  def inspect; end
  def read; end

  private

  def read_line; end
  def read_trailers; end
end

Protocol::HTTP1::Body::Chunked::CRLF = T.let(T.unsafe(nil), String)

Protocol::HTTP1::Body::Chunked::TRAILERS = T.let(T.unsafe(nil), String)

class Protocol::HTTP1::Body::Fixed < ::Protocol::HTTP::Body::Readable
  def initialize(stream, length); end

  def close(error = T.unsafe(nil)); end
  def empty?; end
  def inspect; end
  def join; end
  def length; end
  def read; end
  def remaining; end
end

class Protocol::HTTP1::Body::Remainder < ::Protocol::HTTP::Body::Readable
  def initialize(stream); end

  def call(stream); end
  def close(error = T.unsafe(nil)); end
  def empty?; end
  def inspect; end
  def join; end
  def read; end
end

Protocol::HTTP1::Body::Remainder::BLOCK_SIZE = T.let(T.unsafe(nil), Integer)

Protocol::HTTP1::CHUNKED = T.let(T.unsafe(nil), String)

Protocol::HTTP1::CLOSE = T.let(T.unsafe(nil), String)

Protocol::HTTP1::CONNECTION = T.let(T.unsafe(nil), String)

Protocol::HTTP1::CONTENT_LENGTH = T.let(T.unsafe(nil), String)

class Protocol::HTTP1::Connection
  def initialize(stream, persistent = T.unsafe(nil)); end

  def close; end
  def count; end
  def hijack!; end
  def persistent; end
  def persistent?(version, method, headers); end
  def read_body(headers, remainder = T.unsafe(nil)); end
  def read_chunked_body(headers); end
  def read_fixed_body(length); end
  def read_head_body(length); end
  def read_headers; end
  def read_line; end
  def read_line?; end
  def read_remainder_body; end
  def read_request; end
  def read_request_body(method, headers); end
  def read_response(method); end
  def read_response_body(method, status, headers); end
  def read_tunnel_body; end
  def read_upgrade_body(protocol); end
  def stream; end
  def upgrade?(headers); end
  def write_body(version, body, head = T.unsafe(nil), trailers = T.unsafe(nil)); end
  def write_body_and_close(body, head); end
  def write_chunked_body(body, head, trailers = T.unsafe(nil)); end
  def write_connection_header(version); end
  def write_empty_body(body); end
  def write_fixed_length_body(body, length, head); end
  def write_headers(headers); end
  def write_request(authority, method, path, version, headers); end
  def write_response(version, status, headers, reason = T.unsafe(nil)); end
  def write_tunnel_body(version, body = T.unsafe(nil)); end
  def write_upgrade_body(protocol, body = T.unsafe(nil)); end
  def write_upgrade_header(upgrade); end
end

Protocol::HTTP1::Connection::CONNECT = T.let(T.unsafe(nil), String)

Protocol::HTTP1::Connection::CRLF = T.let(T.unsafe(nil), String)

Protocol::HTTP1::Connection::HEAD = T.let(T.unsafe(nil), String)

Protocol::HTTP1::Connection::HTTP10 = T.let(T.unsafe(nil), String)

Protocol::HTTP1::Connection::HTTP11 = T.let(T.unsafe(nil), String)

class Protocol::HTTP1::Error < ::Protocol::HTTP::Error
end

Protocol::HTTP1::FIELD_NAME = T.let(T.unsafe(nil), Regexp)

Protocol::HTTP1::FIELD_VALUE = T.let(T.unsafe(nil), Regexp)

Protocol::HTTP1::HEADER = T.let(T.unsafe(nil), Regexp)

Protocol::HTTP1::HOST = T.let(T.unsafe(nil), String)

class Protocol::HTTP1::InvalidRequest < ::Protocol::HTTP1::Error
end

Protocol::HTTP1::KEEP_ALIVE = T.let(T.unsafe(nil), String)

Protocol::HTTP1::REQUEST_LINE = T.let(T.unsafe(nil), Regexp)

module Protocol::HTTP1::Reason
end

Protocol::HTTP1::Reason::DESCRIPTIONS = T.let(T.unsafe(nil), Hash)

Protocol::HTTP1::TOKEN = T.let(T.unsafe(nil), Regexp)

Protocol::HTTP1::TRANSFER_ENCODING = T.let(T.unsafe(nil), String)

Protocol::HTTP1::UPGRADE = T.let(T.unsafe(nil), String)

Protocol::HTTP1::VALID_FIELD_NAME = T.let(T.unsafe(nil), Regexp)

Protocol::HTTP1::VALID_FIELD_VALUE = T.let(T.unsafe(nil), Regexp)

Protocol::HTTP1::VERSION = T.let(T.unsafe(nil), String)

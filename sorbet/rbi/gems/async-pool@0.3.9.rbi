# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `async-pool` gem.
# Please instead update this file by running `bin/tapioca gem async-pool`.

module Async
  extend ::Console

  class << self
    # Invoke `Reactor.run` with all arguments/block.
    def run(*arguments, &block); end
  end
end

module Async::Pool; end

class Async::Pool::Controller
  # @return [Controller] a new instance of Controller
  def initialize(constructor, limit: T.unsafe(nil)); end

  def acquire; end

  # Whether the pool has any active resources.
  #
  # @return [Boolean]
  def active?; end

  # Whether there are available resources, i.e. whether {#acquire} can reuse an existing resource.
  #
  # @return [Boolean]
  def available?; end

  # Whether there are resources which are currently in use.
  #
  # @return [Boolean]
  def busy?; end

  def close; end

  # @return [Boolean]
  def empty?; end

  # Retire (and close) all unused resources. If a block is provided, it should implement the desired functionality for unused resources.
  #
  # @param retain [Integer] the minimum number of resources to retain.
  def prune(retain = T.unsafe(nil)); end

  # Make the resource resources and let waiting tasks know that there is something resources.
  def release(resource); end

  # Returns the value of attribute resources.
  def resources; end

  def retire(resource); end
  def size; end
  def to_s; end

  # Wait until a pool resource has been freed.
  def wait; end

  protected

  def availability_string; end
  def available_resource; end
  def create_resource; end
  def free; end

  # @return [Boolean]
  def overflowing?; end

  def reuse(resource); end
  def start_gardener; end
  def usage; end
  def usage_string; end
  def wait_for_resource; end

  private

  def get_resource; end

  class << self
    def wrap(**options, &block); end
  end
end

Async::VERSION = T.let(T.unsafe(nil), String)

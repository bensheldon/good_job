# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `timers` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module Timers
end

class Timers::Events
  def initialize; end

  def fire(time); end
  def first; end
  def schedule(time, callback); end
  def size; end

  private

  def merge!; end
end

class Timers::Events::Handle
  include(::Comparable)

  def initialize(time, callback); end

  def <=>(other); end
  def cancel!; end
  def cancelled?; end
  def fire(time); end
  def time; end
end

class Timers::Group
  include(::Enumerable)
  extend(::Forwardable)

  def initialize; end

  def after(interval, &block); end
  def cancel; end
  def continue; end
  def current_offset; end
  def delay(seconds); end
  def each(*args, &block); end
  def empty?(*args, &block); end
  def events; end
  def every(interval, recur = T.unsafe(nil), &block); end
  def fire(offset = T.unsafe(nil)); end
  def now_and_after(interval, &block); end
  def now_and_every(interval, recur = T.unsafe(nil), &block); end
  def pause; end
  def paused_timers; end
  def resume; end
  def timers; end
  def wait; end
  def wait_interval(offset = T.unsafe(nil)); end
end

class Timers::Interval
  def initialize; end

  def start; end
  def stop; end
  def to_f; end

  protected

  def duration; end
  def now; end
end

class Timers::PriorityHeap
  def initialize; end

  def peek; end
  def pop; end
  def push(element); end
  def size; end

  private

  def bubble_down(index); end
  def bubble_up(index); end
  def swap(i, j); end
  def validate!(index = T.unsafe(nil)); end
end

class Timers::Timer
  include(::Comparable)

  def initialize(group, interval, recurring = T.unsafe(nil), offset = T.unsafe(nil), &block); end

  def call(offset = T.unsafe(nil)); end
  def cancel; end
  def continue; end
  def delay(seconds); end
  def fire(offset = T.unsafe(nil)); end
  def fires_in; end
  def inspect; end
  def interval; end
  def offset; end
  def pause; end
  def paused?; end
  def recurring; end
  def reset(offset = T.unsafe(nil)); end
  def resume; end
end

Timers::VERSION = T.let(T.unsafe(nil), String)

class Timers::Wait
  def initialize(duration); end

  def duration; end
  def remaining; end
  def while_time_remaining; end

  private

  def time_remaining?; end

  class << self
    def for(duration, &block); end
  end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `pghero` gem.
# Please instead update this file by running `bin/tapioca gem pghero`.

# source://pghero//lib/pghero/methods/basic.rb#1
module PgHero
  class << self
    # source://forwardable/1.3.3/forwardable.rb#231
    def analyze(*args, **_arg1, &block); end

    # source://pghero//lib/pghero.rb#211
    def analyze_all(**options); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def analyze_tables(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def autoindex(*args, **_arg1, &block); end

    # source://pghero//lib/pghero.rb#218
    def autoindex_all(create: T.unsafe(nil), verbose: T.unsafe(nil)); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def autovacuum_danger(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def aws_access_key_id(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def aws_db_instance_identifier(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def aws_region(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def aws_secret_access_key(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def best_index(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def blocked_queries(*args, **_arg1, &block); end

    # Returns the value of attribute cache_hit_rate_threshold.
    #
    # source://pghero//lib/pghero.rb#43
    def cache_hit_rate_threshold; end

    # Sets the attribute cache_hit_rate_threshold
    #
    # @param value the value to set the attribute cache_hit_rate_threshold to.
    #
    # source://pghero//lib/pghero.rb#43
    def cache_hit_rate_threshold=(_arg0); end

    # source://pghero//lib/pghero.rb#196
    def capture_query_stats(verbose: T.unsafe(nil)); end

    # source://pghero//lib/pghero.rb#204
    def capture_space_stats(verbose: T.unsafe(nil)); end

    # delete previous stats
    # go database by database to use an index
    # stats for old databases are not cleaned up since we can't use an index
    #
    # source://pghero//lib/pghero.rb#232
    def clean_query_stats(before: T.unsafe(nil)); end

    # source://pghero//lib/pghero.rb#238
    def clean_space_stats(before: T.unsafe(nil)); end

    # source://pghero//lib/pghero.rb#110
    def config; end

    # Returns the value of attribute config_path.
    #
    # source://pghero//lib/pghero.rb#43
    def config_path; end

    # Sets the attribute config_path
    #
    # @param value the value to set the attribute config_path to.
    #
    # source://pghero//lib/pghero.rb#43
    def config_path=(_arg0); end

    # private
    #
    # source://pghero//lib/pghero.rb#245
    def connection_config(model); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def connection_sources(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def connection_states(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def connection_stats(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def connections(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def cpu_usage(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def create_user(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def database_size(*args, **_arg1, &block); end

    # ensure we only have one copy of databases
    # so there's only one connection pool per database
    #
    # source://pghero//lib/pghero.rb#178
    def databases; end

    # private
    #
    # source://pghero//lib/pghero.rb#143
    def default_config; end

    # private
    #
    # source://pghero//lib/pghero.rb#172
    def default_connection_config; end

    # source://forwardable/1.3.3/forwardable.rb#231
    def disable_query_stats(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def drop_user(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def duplicate_indexes(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def enable_query_stats(*args, **_arg1, &block); end

    # Returns the value of attribute env.
    #
    # source://pghero//lib/pghero.rb#43
    def env; end

    # Sets the attribute env
    #
    # @param value the value to set the attribute env to.
    #
    # source://pghero//lib/pghero.rb#43
    def env=(_arg0); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def explain(*args, **_arg1, &block); end

    # private
    #
    # @return [Boolean]
    #
    # source://pghero//lib/pghero.rb#97
    def explain_enabled?; end

    # private
    #
    # source://pghero//lib/pghero.rb#102
    def explain_mode; end

    # Returns the value of attribute explain_timeout_sec.
    #
    # source://pghero//lib/pghero.rb#43
    def explain_timeout_sec; end

    # Sets the attribute explain_timeout_sec
    #
    # @param value the value to set the attribute explain_timeout_sec to.
    #
    # source://pghero//lib/pghero.rb#43
    def explain_timeout_sec=(_arg0); end

    # private
    #
    # source://pghero//lib/pghero.rb#115
    def file_config; end

    # Returns the value of attribute filter_data.
    #
    # source://pghero//lib/pghero.rb#43
    def filter_data; end

    # Sets the attribute filter_data
    #
    # @param value the value to set the attribute filter_data to.
    #
    # source://pghero//lib/pghero.rb#43
    def filter_data=(_arg0); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def historical_query_stats_enabled?(*args, **_arg1, &block); end

    # private
    # Rails 7.0 deprecates `include_replicas` for `include_hidden`
    #
    # source://pghero//lib/pghero.rb#258
    def include_replicas_key; end

    # source://forwardable/1.3.3/forwardable.rb#231
    def index_caching(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def index_hit_rate(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def index_usage(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def indexes(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def invalid_constraints(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def invalid_indexes(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def kill(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def kill_all(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def kill_long_running_queries(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def last_stats_reset_time(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def long_running_queries(*args, **_arg1, &block); end

    # Returns the value of attribute long_running_query_sec.
    #
    # source://pghero//lib/pghero.rb#43
    def long_running_query_sec; end

    # Sets the attribute long_running_query_sec
    #
    # @param value the value to set the attribute long_running_query_sec to.
    #
    # source://pghero//lib/pghero.rb#43
    def long_running_query_sec=(_arg0); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def maintenance_info(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def missing_indexes(*args, **_arg1, &block); end

    # use method instead of attr_accessor to ensure
    # this works if variable set after PgHero is loaded
    #
    # source://pghero//lib/pghero.rb#87
    def password; end

    # source://pghero//lib/pghero.rb#225
    def pretty_size(value); end

    # source://pghero//lib/pghero.rb#192
    def primary_database; end

    # source://forwardable/1.3.3/forwardable.rb#231
    def query_stats(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def query_stats_available?(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def query_stats_enabled?(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def query_stats_extension_enabled?(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def query_stats_readable?(*args, **_arg1, &block); end

    # source://railties/7.1.3/lib/rails/engine.rb#412
    def railtie_helpers_paths; end

    # source://railties/7.1.3/lib/rails/engine.rb#395
    def railtie_namespace; end

    # source://railties/7.1.3/lib/rails/engine.rb#416
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def rds_stats(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def read_iops_stats(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def relation_sizes(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def replica?(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def replication_lag(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def replication_lag_stats(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def reset_query_stats(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def reset_stats(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def running_queries(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def sequence_danger(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def sequences(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def settings(*args, **_arg1, &block); end

    # Returns the value of attribute show_migrations.
    #
    # source://pghero//lib/pghero.rb#43
    def show_migrations; end

    # Sets the attribute show_migrations
    #
    # @param value the value to set the attribute show_migrations to.
    #
    # source://pghero//lib/pghero.rb#43
    def show_migrations=(_arg0); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def slow_queries(*args, **_arg1, &block); end

    # Returns the value of attribute slow_query_calls.
    #
    # source://pghero//lib/pghero.rb#43
    def slow_query_calls; end

    # Sets the attribute slow_query_calls
    #
    # @param value the value to set the attribute slow_query_calls to.
    #
    # source://pghero//lib/pghero.rb#43
    def slow_query_calls=(_arg0); end

    # Returns the value of attribute slow_query_ms.
    #
    # source://pghero//lib/pghero.rb#43
    def slow_query_ms; end

    # Sets the attribute slow_query_ms
    #
    # @param value the value to set the attribute slow_query_ms to.
    #
    # source://pghero//lib/pghero.rb#43
    def slow_query_ms=(_arg0); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def space_growth(*args, **_arg1, &block); end

    # private
    # Rails 6.1 deprecates `spec_name` for `name`
    # https://github.com/rails/rails/pull/38536
    #
    # source://pghero//lib/pghero.rb#252
    def spec_name_key; end

    # source://forwardable/1.3.3/forwardable.rb#231
    def ssl_used?(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def stats_connection(*args, **_arg1, &block); end

    # config pattern for https://github.com/ankane/pghero/issues/424
    #
    # source://pghero//lib/pghero.rb#92
    def stats_database_url; end

    # source://forwardable/1.3.3/forwardable.rb#231
    def suggested_indexes(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def suggested_indexes_by_query(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def suggested_indexes_enabled?(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def system_stats_enabled?(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def table_caching(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def table_hit_rate(*args, **_arg1, &block); end

    # source://railties/7.1.3/lib/rails/engine.rb#401
    def table_name_prefix; end

    # source://forwardable/1.3.3/forwardable.rb#231
    def table_stats(*args, **_arg1, &block); end

    # source://pghero//lib/pghero.rb#75
    def time_zone; end

    # source://pghero//lib/pghero.rb#71
    def time_zone=(time_zone); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def total_connections(*args, **_arg1, &block); end

    # Returns the value of attribute total_connections_threshold.
    #
    # source://pghero//lib/pghero.rb#43
    def total_connections_threshold; end

    # Sets the attribute total_connections_threshold
    #
    # @param value the value to set the attribute total_connections_threshold to.
    #
    # source://pghero//lib/pghero.rb#43
    def total_connections_threshold=(_arg0); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def transaction_id_danger(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def unused_indexes(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def unused_tables(*args, **_arg1, &block); end

    # source://railties/7.1.3/lib/rails/engine.rb#408
    def use_relative_model_naming?; end

    # use method instead of attr_accessor to ensure
    # this works if variable set after PgHero is loaded
    #
    # source://pghero//lib/pghero.rb#81
    def username; end

    # source://pghero//lib/pghero.rb#106
    def visualize_url; end

    # source://forwardable/1.3.3/forwardable.rb#231
    def write_iops_stats(*args, **_arg1, &block); end

    private

    # source://pghero//lib/pghero.rb#264
    def each_database; end
  end
end

# source://pghero//lib/pghero/connection.rb#2
class PgHero::Connection < ::ActiveRecord::Base
  include ::PgHero::Connection::GeneratedAttributeMethods
  include ::PgHero::Connection::GeneratedAssociationMethods

  class << self
    # source://activemodel/7.1.3/lib/active_model/validations.rb#71
    def _validators; end

    # source://activerecord/7.1.3/lib/active_record/enum.rb#167
    def defined_enums; end
  end
end

# source://pghero//lib/pghero/connection.rb#0
module PgHero::Connection::GeneratedAssociationMethods; end

# source://pghero//lib/pghero/connection.rb#0
module PgHero::Connection::GeneratedAttributeMethods; end

# source://pghero//lib/pghero/database.rb#2
class PgHero::Database
  include ::PgHero::Methods::Basic
  include ::PgHero::Methods::Connections
  include ::PgHero::Methods::Constraints
  include ::PgHero::Methods::Explain
  include ::PgHero::Methods::Indexes
  include ::PgHero::Methods::Kill
  include ::PgHero::Methods::Maintenance
  include ::PgHero::Methods::Queries
  include ::PgHero::Methods::QueryStats
  include ::PgHero::Methods::Replication
  include ::PgHero::Methods::Sequences
  include ::PgHero::Methods::Settings
  include ::PgHero::Methods::Space
  include ::PgHero::Methods::SuggestedIndexes
  include ::PgHero::Methods::System
  include ::PgHero::Methods::Tables
  include ::PgHero::Methods::Users

  # @return [Database] a new instance of Database
  #
  # source://pghero//lib/pghero/database.rb#23
  def initialize(id, config); end

  # source://pghero//lib/pghero/database.rb#70
  def aws_access_key_id; end

  # environment variable is only used if no config file
  #
  # source://pghero//lib/pghero/database.rb#83
  def aws_db_instance_identifier; end

  # source://pghero//lib/pghero/database.rb#78
  def aws_region; end

  # source://pghero//lib/pghero/database.rb#74
  def aws_secret_access_key; end

  # environment variable is only used if no config file
  #
  # source://pghero//lib/pghero/database.rb#93
  def azure_resource_id; end

  # source://pghero//lib/pghero/database.rb#41
  def cache_hit_rate_threshold; end

  # @return [Boolean]
  #
  # source://pghero//lib/pghero/database.rb#37
  def capture_query_stats?; end

  # Returns the value of attribute config.
  #
  # source://pghero//lib/pghero/database.rb#21
  def config; end

  # source://pghero//lib/pghero/database.rb#57
  def explain_timeout_sec; end

  # must check keys for booleans
  #
  # source://pghero//lib/pghero/database.rb#98
  def filter_data; end

  # environment variable is only used if no config file
  #
  # source://pghero//lib/pghero/database.rb#88
  def gcp_database_id; end

  # Returns the value of attribute id.
  #
  # source://pghero//lib/pghero/database.rb#21
  def id; end

  # defaults to 100 megabytes
  #
  # source://pghero//lib/pghero/database.rb#66
  def index_bloat_bytes; end

  # source://pghero//lib/pghero/database.rb#61
  def long_running_query_sec; end

  # source://pghero//lib/pghero/database.rb#33
  def name; end

  # source://pghero//lib/pghero/database.rb#53
  def slow_query_calls; end

  # source://pghero//lib/pghero/database.rb#49
  def slow_query_ms; end

  # source://pghero//lib/pghero/database.rb#45
  def total_connections_threshold; end

  private

  # just return the model
  # do not start a connection
  #
  # source://pghero//lib/pghero/database.rb#140
  def build_connection_model; end

  # check adapter lazily
  #
  # source://pghero//lib/pghero/database.rb#124
  def connection_model; end
end

# source://pghero//lib/pghero/engine.rb#2
class PgHero::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.1.3/lib/active_support/callbacks.rb#70
    def __callbacks; end
  end
end

# source://pghero//lib/pghero.rb#36
class PgHero::Error < ::StandardError; end

class PgHero::HomeController < ::ActionController::Base
  def connection_stats; end
  def connections; end
  def cpu_usage; end
  def enable_query_stats; end
  def explain; end
  def free_space_stats; end
  def index; end
  def index_bloat; end
  def kill; end
  def kill_all; end
  def kill_long_running_queries; end
  def live_queries; end
  def load_stats; end
  def maintenance; end
  def queries; end
  def relation_space; end
  def replication_lag_stats; end
  def reset_query_stats; end
  def show_query; end
  def space; end
  def system; end
  def tune; end

  protected

  def chart_library_options; end
  def check_api; end
  def default_url_options; end
  def ensure_query_stats; end
  def group_connections(connections, keys); end
  def group_connections_by_key(connections, key); end
  def redirect_backward(options = T.unsafe(nil)); end
  def render_text(message, status:); end
  def rescue_timeout(default); end
  def set_database; end
  def set_query_stats_enabled; end
  def set_show_details; end
  def set_suggested_indexes(min_average_time = T.unsafe(nil), min_calls = T.unsafe(nil)); end
  def system_params; end

  private

  # source://actionview/7.1.3/lib/action_view/layouts.rb#330
  def _layout(lookup_context, formats); end

  class << self
    # source://activesupport/7.1.3/lib/active_support/callbacks.rb#70
    def __callbacks; end

    # source://actionview/7.1.3/lib/action_view/layouts.rb#211
    def _layout; end

    # source://actionview/7.1.3/lib/action_view/layouts.rb#212
    def _layout_conditions; end

    # source://actionpack/7.1.3/lib/action_controller/metal.rb#262
    def middleware_stack; end
  end
end

module PgHero::HomeController::HelperMethods
  include ::ActionController::Base::HelperMethods
  include ::PgHero::HomeHelper
end

module PgHero::HomeHelper
  def pghero_formatted_date_time(time); end
  def pghero_formatted_vacuum_times(time); end
  def pghero_js_value(value); end
  def pghero_pretty_ident(table, schema: T.unsafe(nil)); end
  def pghero_remove_index(query); end
end

# source://pghero//lib/pghero.rb#39
PgHero::MUTEX = T.let(T.unsafe(nil), Thread::Mutex)

# source://pghero//lib/pghero/methods/basic.rb#2
module PgHero::Methods; end

# source://pghero//lib/pghero/methods/basic.rb#3
module PgHero::Methods::Basic
  # source://pghero//lib/pghero/methods/basic.rb#21
  def current_user; end

  # source://pghero//lib/pghero/methods/basic.rb#17
  def database_name; end

  # source://pghero//lib/pghero/methods/basic.rb#33
  def quote_ident(value); end

  # source://pghero//lib/pghero/methods/basic.rb#25
  def server_version; end

  # source://pghero//lib/pghero/methods/basic.rb#29
  def server_version_num; end

  # @return [Boolean]
  #
  # source://pghero//lib/pghero/methods/basic.rb#4
  def ssl_used?; end

  private

  # source://pghero//lib/pghero/methods/basic.rb#119
  def add_source(sql); end

  # source://pghero//lib/pghero/methods/basic.rb#107
  def connection; end

  # source://pghero//lib/pghero/methods/basic.rb#103
  def execute(sql); end

  # source://pghero//lib/pghero/methods/basic.rb#123
  def quote(value); end

  # source://pghero//lib/pghero/methods/basic.rb#131
  def quote_column_name(value); end

  # source://pghero//lib/pghero/methods/basic.rb#127
  def quote_table_name(value); end

  # source://pghero//lib/pghero/methods/basic.rb#39
  def select_all(sql, conn: T.unsafe(nil), query_columns: T.unsafe(nil)); end

  # source://pghero//lib/pghero/methods/basic.rb#87
  def select_all_size(sql); end

  # source://pghero//lib/pghero/methods/basic.rb#83
  def select_all_stats(sql, **options); end

  # source://pghero//lib/pghero/methods/basic.rb#95
  def select_one(sql, conn: T.unsafe(nil)); end

  # source://pghero//lib/pghero/methods/basic.rb#99
  def select_one_stats(sql); end

  # source://pghero//lib/pghero/methods/basic.rb#115
  def squish(str); end

  # source://pghero//lib/pghero/methods/basic.rb#111
  def stats_connection; end

  # @return [Boolean]
  #
  # source://pghero//lib/pghero/methods/basic.rb#152
  def table_exists?(table); end

  # source://pghero//lib/pghero/methods/basic.rb#135
  def unquote(part); end

  # source://pghero//lib/pghero/methods/basic.rb#143
  def with_transaction(lock_timeout: T.unsafe(nil), statement_timeout: T.unsafe(nil), rollback: T.unsafe(nil)); end
end

# source://pghero//lib/pghero/methods/connections.rb#3
module PgHero::Methods::Connections
  # source://pghero//lib/pghero/methods/connections.rb#59
  def connection_sources; end

  # source://pghero//lib/pghero/methods/connections.rb#43
  def connection_states; end

  # source://pghero//lib/pghero/methods/connections.rb#4
  def connections; end

  # source://pghero//lib/pghero/methods/connections.rb#39
  def total_connections; end
end

# source://pghero//lib/pghero/methods/constraints.rb#3
module PgHero::Methods::Constraints
  # referenced fields can be nil
  # as not all constraints are foreign keys
  #
  # source://pghero//lib/pghero/methods/constraints.rb#6
  def invalid_constraints; end
end

# source://pghero//lib/pghero/methods/explain.rb#3
module PgHero::Methods::Explain
  # TODO remove in 4.0
  # note: this method is not affected by the explain option
  #
  # source://pghero//lib/pghero/methods/explain.rb#6
  def explain(sql); end

  # TODO rename to explain in 4.0
  # note: this method is not affected by the explain option
  #
  # source://pghero//lib/pghero/methods/explain.rb#23
  def explain_v2(sql, analyze: T.unsafe(nil), verbose: T.unsafe(nil), costs: T.unsafe(nil), settings: T.unsafe(nil), generic_plan: T.unsafe(nil), buffers: T.unsafe(nil), wal: T.unsafe(nil), timing: T.unsafe(nil), summary: T.unsafe(nil), format: T.unsafe(nil)); end

  private

  # source://pghero//lib/pghero/methods/explain.rb#48
  def add_explain_option(options, name, value); end

  # important! validate format to prevent injection
  #
  # source://pghero//lib/pghero/methods/explain.rb#55
  def explain_format(format); end

  # @return [Boolean]
  #
  # source://pghero//lib/pghero/methods/explain.rb#41
  def explain_safe?; end
end

# source://pghero//lib/pghero/methods/indexes.rb#3
module PgHero::Methods::Indexes
  # source://pghero//lib/pghero/methods/indexes.rb#171
  def duplicate_indexes(indexes: T.unsafe(nil)); end

  # https://gist.github.com/mbanck/9976015/71888a24e464e2f772182a7eb54f15a125edf398
  # thanks @jberkus and @mbanck
  #
  # source://pghero//lib/pghero/methods/indexes.rb#187
  def index_bloat(min_size: T.unsafe(nil)); end

  # source://pghero//lib/pghero/methods/indexes.rb#13
  def index_caching; end

  # source://pghero//lib/pghero/methods/indexes.rb#4
  def index_hit_rate; end

  # source://pghero//lib/pghero/methods/indexes.rb#31
  def index_usage; end

  # TODO parse array properly
  # https://stackoverflow.com/questions/2204058/list-columns-with-indexes-in-postgresql
  #
  # source://pghero//lib/pghero/methods/indexes.rb#128
  def indexes; end

  # source://pghero//lib/pghero/methods/indexes.rb#117
  def invalid_indexes(indexes: T.unsafe(nil)); end

  # source://pghero//lib/pghero/methods/indexes.rb#106
  def last_stats_reset_time; end

  # source://pghero//lib/pghero/methods/indexes.rb#49
  def missing_indexes; end

  # source://pghero//lib/pghero/methods/indexes.rb#101
  def reset_stats; end

  # source://pghero//lib/pghero/methods/indexes.rb#71
  def unused_indexes(max_scans: T.unsafe(nil), across: T.unsafe(nil)); end

  protected

  # @return [Boolean]
  #
  # source://pghero//lib/pghero/methods/indexes.rb#327
  def index_covers?(indexed_columns, columns); end
end

# source://pghero//lib/pghero/methods/kill.rb#3
module PgHero::Methods::Kill
  # source://pghero//lib/pghero/methods/kill.rb#4
  def kill(pid); end

  # source://pghero//lib/pghero/methods/kill.rb#13
  def kill_all; end

  # source://pghero//lib/pghero/methods/kill.rb#8
  def kill_long_running_queries(min_duration: T.unsafe(nil)); end
end

# source://pghero//lib/pghero/methods/maintenance.rb#3
module PgHero::Methods::Maintenance
  # source://pghero//lib/pghero/methods/maintenance.rb#70
  def analyze(table, verbose: T.unsafe(nil)); end

  # source://pghero//lib/pghero/methods/maintenance.rb#75
  def analyze_tables(verbose: T.unsafe(nil), min_size: T.unsafe(nil), tables: T.unsafe(nil)); end

  # source://pghero//lib/pghero/methods/maintenance.rb#31
  def autovacuum_danger; end

  # source://pghero//lib/pghero/methods/maintenance.rb#52
  def maintenance_info; end

  # https://www.postgresql.org/docs/current/routine-vacuuming.html#VACUUM-FOR-WRAPAROUND
  # "the system will shut down and refuse to start any new transactions
  # once there are fewer than 1 million transactions left until wraparound"
  # warn when 10,000,000 transactions left
  #
  # source://pghero//lib/pghero/methods/maintenance.rb#8
  def transaction_id_danger(threshold: T.unsafe(nil), max_value: T.unsafe(nil)); end

  # source://pghero//lib/pghero/methods/maintenance.rb#36
  def vacuum_progress; end
end

# source://pghero//lib/pghero/methods/queries.rb#3
module PgHero::Methods::Queries
  # from https://wiki.postgresql.org/wiki/Lock_Monitoring
  # and https://big-elephants.com/2013-09/exploring-query-locks-in-postgres/
  #
  # source://pghero//lib/pghero/methods/queries.rb#38
  def blocked_queries; end

  # source://pghero//lib/pghero/methods/queries.rb#32
  def long_running_queries; end

  # source://pghero//lib/pghero/methods/queries.rb#4
  def running_queries(min_duration: T.unsafe(nil), all: T.unsafe(nil)); end
end

# source://pghero//lib/pghero/methods/query_stats.rb#3
module PgHero::Methods::QueryStats
  # resetting query stats will reset across the entire Postgres instance in Postgres < 12
  # this is problematic if multiple PgHero databases use the same Postgres instance
  #
  # to get around this, we capture queries for every Postgres database before we
  # reset query stats for the Postgres instance with the `capture_query_stats` option
  #
  # source://pghero//lib/pghero/methods/query_stats.rb#128
  def capture_query_stats(raise_errors: T.unsafe(nil)); end

  # source://pghero//lib/pghero/methods/query_stats.rb#165
  def clean_query_stats(before: T.unsafe(nil)); end

  # source://pghero//lib/pghero/methods/query_stats.rb#54
  def disable_query_stats; end

  # source://pghero//lib/pghero/methods/query_stats.rb#49
  def enable_query_stats; end

  # https://stackoverflow.com/questions/20582500/how-to-check-if-a-table-exists-in-a-given-schema
  #
  # @return [Boolean]
  #
  # source://pghero//lib/pghero/methods/query_stats.rb#105
  def historical_query_stats_enabled?; end

  # source://pghero//lib/pghero/methods/query_stats.rb#115
  def missing_query_stats_columns; end

  # source://pghero//lib/pghero/methods/query_stats.rb#175
  def query_hash_stats(query_hash, user: T.unsafe(nil), current: T.unsafe(nil)); end

  # source://pghero//lib/pghero/methods/query_stats.rb#4
  def query_stats(historical: T.unsafe(nil), start_at: T.unsafe(nil), end_at: T.unsafe(nil), min_average_time: T.unsafe(nil), min_calls: T.unsafe(nil), **options); end

  # @return [Boolean]
  #
  # source://pghero//lib/pghero/methods/query_stats.rb#29
  def query_stats_available?; end

  # only cache if true
  #
  # @return [Boolean]
  #
  # source://pghero//lib/pghero/methods/query_stats.rb#34
  def query_stats_enabled?; end

  # @return [Boolean]
  #
  # source://pghero//lib/pghero/methods/query_stats.rb#38
  def query_stats_extension_enabled?; end

  # @return [Boolean]
  #
  # source://pghero//lib/pghero/methods/query_stats.rb#42
  def query_stats_readable?; end

  # @return [Boolean]
  #
  # source://pghero//lib/pghero/methods/query_stats.rb#111
  def query_stats_table_exists?; end

  # resets query stats for the entire instance
  # it's possible to reset stats for a specific
  # database, user or query hash in Postgres 12+
  #
  # source://pghero//lib/pghero/methods/query_stats.rb#67
  def reset_instance_query_stats(database: T.unsafe(nil), user: T.unsafe(nil), query_hash: T.unsafe(nil), raise_errors: T.unsafe(nil)); end

  # @raise [PgHero::Error]
  #
  # source://pghero//lib/pghero/methods/query_stats.rb#59
  def reset_query_stats(**options); end

  # source://pghero//lib/pghero/methods/query_stats.rb#170
  def slow_queries(query_stats: T.unsafe(nil), **options); end

  # @return [Boolean]
  #
  # source://pghero//lib/pghero/methods/query_stats.rb#119
  def supports_query_hash?; end

  private

  # source://pghero//lib/pghero/methods/query_stats.rb#313
  def combine_query_stats(grouped_stats); end

  # http://www.craigkerstiens.com/2013/01/10/more-on-postgres-performance/
  #
  # source://pghero//lib/pghero/methods/query_stats.rb#212
  def current_query_stats(limit: T.unsafe(nil), sort: T.unsafe(nil), database: T.unsafe(nil), query_hash: T.unsafe(nil), user: T.unsafe(nil), origin: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://pghero//lib/pghero/methods/query_stats.rb#331
  def explainable?(query); end

  # source://pghero//lib/pghero/methods/query_stats.rb#265
  def historical_query_stats(sort: T.unsafe(nil), start_at: T.unsafe(nil), end_at: T.unsafe(nil), query_hash: T.unsafe(nil)); end

  # source://pghero//lib/pghero/methods/query_stats.rb#341
  def insert_query_stats(db_id, db_query_stats, now); end

  # removes comments
  # combines ?, ?, ? => ?
  #
  # source://pghero//lib/pghero/methods/query_stats.rb#337
  def normalize_query(query); end
end

# source://pghero//lib/pghero/methods/replication.rb#3
module PgHero::Methods::Replication
  # @return [Boolean]
  #
  # source://pghero//lib/pghero/methods/replication.rb#4
  def replica?; end

  # @return [Boolean]
  #
  # source://pghero//lib/pghero/methods/replication.rb#48
  def replicating?; end

  # https://www.postgresql.org/message-id/CADKbJJWz9M0swPT3oqe8f9+tfD4-F54uE6Xtkh4nERpVsQnjnw@mail.gmail.com
  #
  # source://pghero//lib/pghero/methods/replication.rb#12
  def replication_lag; end

  # source://pghero//lib/pghero/methods/replication.rb#32
  def replication_slots; end

  private

  # source://pghero//lib/pghero/methods/replication.rb#56
  def feature_support; end

  # source://pghero//lib/pghero/methods/replication.rb#60
  def with_feature_support(cache_key, default = T.unsafe(nil)); end
end

# source://pghero//lib/pghero/methods/sequences.rb#3
module PgHero::Methods::Sequences
  # source://pghero//lib/pghero/methods/sequences.rb#54
  def sequence_danger(threshold: T.unsafe(nil), sequences: T.unsafe(nil)); end

  # source://pghero//lib/pghero/methods/sequences.rb#4
  def sequences; end

  private

  # adds readable attribute to all sequences
  # also adds schema if missing
  #
  # source://pghero//lib/pghero/methods/sequences.rb#85
  def add_sequence_attributes(sequences); end

  # can parse
  # nextval('id_seq'::regclass)
  # nextval(('id_seq'::text)::regclass)
  #
  # source://pghero//lib/pghero/methods/sequences.rb#64
  def parse_default_value(default_value); end

  # source://pghero//lib/pghero/methods/sequences.rb#74
  def unquote_ident(value); end
end

# source://pghero//lib/pghero/methods/settings.rb#3
module PgHero::Methods::Settings
  # source://pghero//lib/pghero/methods/settings.rb#29
  def autovacuum_settings; end

  # source://pghero//lib/pghero/methods/settings.rb#4
  def settings; end

  # source://pghero//lib/pghero/methods/settings.rb#33
  def vacuum_settings; end

  private

  # source://pghero//lib/pghero/methods/settings.rb#39
  def fetch_settings(names); end
end

# source://pghero//lib/pghero/methods/space.rb#3
module PgHero::Methods::Space
  # source://pghero//lib/pghero/methods/space.rb#122
  def capture_space_stats; end

  # source://pghero//lib/pghero/methods/space.rb#137
  def clean_space_stats(before: T.unsafe(nil)); end

  # source://pghero//lib/pghero/methods/space.rb#4
  def database_size; end

  # source://pghero//lib/pghero/methods/space.rb#8
  def relation_sizes; end

  # source://pghero//lib/pghero/methods/space.rb#92
  def relation_space_stats(relation, schema: T.unsafe(nil)); end

  # source://pghero//lib/pghero/methods/space.rb#49
  def space_growth(days: T.unsafe(nil), relation_sizes: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://pghero//lib/pghero/methods/space.rb#142
  def space_stats_enabled?; end

  # source://pghero//lib/pghero/methods/space.rb#29
  def table_sizes; end
end

# source://pghero//lib/pghero/methods/suggested_indexes.rb#3
module PgHero::Methods::SuggestedIndexes
  # source://pghero//lib/pghero/methods/suggested_indexes.rb#78
  def autoindex(create: T.unsafe(nil)); end

  # source://pghero//lib/pghero/methods/suggested_indexes.rb#87
  def best_index(statement); end

  # source://pghero//lib/pghero/methods/suggested_indexes.rb#64
  def suggested_indexes(suggested_indexes_by_query: T.unsafe(nil), **options); end

  # TODO clean this mess
  #
  # source://pghero//lib/pghero/methods/suggested_indexes.rb#9
  def suggested_indexes_by_query(queries: T.unsafe(nil), query_stats: T.unsafe(nil), indexes: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://pghero//lib/pghero/methods/suggested_indexes.rb#4
  def suggested_indexes_enabled?; end

  private

  # source://pghero//lib/pghero/methods/suggested_indexes.rb#93
  def best_index_helper(statements); end

  # source://pghero//lib/pghero/methods/suggested_indexes.rb#196
  def best_index_structure(statement); end

  # source://pghero//lib/pghero/methods/suggested_indexes.rb#313
  def column_stats(schema: T.unsafe(nil), table: T.unsafe(nil)); end

  # source://pghero//lib/pghero/methods/suggested_indexes.rb#304
  def parse_sort(sort_clause); end

  # source://pghero//lib/pghero/methods/suggested_indexes.rb#269
  def parse_table(tree); end

  # TODO capture values
  #
  # source://pghero//lib/pghero/methods/suggested_indexes.rb#281
  def parse_where(tree); end

  # TODO better row estimation
  # https://www.postgresql.org/docs/current/static/row-estimation-examples.html
  #
  # source://pghero//lib/pghero/methods/suggested_indexes.rb#237
  def row_estimates(stats, total_rows, rows_left, op); end

  # source://pghero//lib/pghero/methods/suggested_indexes.rb#300
  def str_method; end
end

# source://pghero//lib/pghero/methods/system.rb#3
module PgHero::Methods::System
  # source://pghero//lib/pghero/methods/system.rb#80
  def azure_stats(metric_name, duration: T.unsafe(nil), period: T.unsafe(nil), offset: T.unsafe(nil), series: T.unsafe(nil)); end

  # source://pghero//lib/pghero/methods/system.rb#22
  def connection_stats(**options); end

  # source://pghero//lib/pghero/methods/system.rb#18
  def cpu_usage(**options); end

  # source://pghero//lib/pghero/methods/system.rb#38
  def free_space_stats(**options); end

  # source://pghero//lib/pghero/methods/system.rb#42
  def rds_stats(metric_name, duration: T.unsafe(nil), period: T.unsafe(nil), offset: T.unsafe(nil), series: T.unsafe(nil)); end

  # source://pghero//lib/pghero/methods/system.rb#30
  def read_iops_stats(**options); end

  # source://pghero//lib/pghero/methods/system.rb#26
  def replication_lag_stats(**options); end

  # @return [Boolean]
  #
  # source://pghero//lib/pghero/methods/system.rb#4
  def system_stats_enabled?; end

  # source://pghero//lib/pghero/methods/system.rb#8
  def system_stats_provider; end

  # source://pghero//lib/pghero/methods/system.rb#34
  def write_iops_stats(**options); end

  private

  # source://pghero//lib/pghero/methods/system.rb#303
  def add_missing_data(data, start_time, end_time, period); end

  # @return [Boolean]
  #
  # source://pghero//lib/pghero/methods/system.rb#289
  def azure_flexible_server?; end

  # only use data points included in both series
  # this also eliminates need to align Time.now
  #
  # source://pghero//lib/pghero/methods/system.rb#295
  def free_space(quota, used); end

  # @raise [Error]
  #
  # source://pghero//lib/pghero/methods/system.rb#130
  def gcp_stats(metric_name, duration: T.unsafe(nil), period: T.unsafe(nil), offset: T.unsafe(nil), series: T.unsafe(nil)); end

  # source://pghero//lib/pghero/methods/system.rb#240
  def system_stats(metric_key, **options); end
end

# source://pghero//lib/pghero/methods/tables.rb#3
module PgHero::Methods::Tables
  # source://pghero//lib/pghero/methods/tables.rb#13
  def table_caching; end

  # source://pghero//lib/pghero/methods/tables.rb#4
  def table_hit_rate; end

  # source://pghero//lib/pghero/methods/tables.rb#46
  def table_stats(schema: T.unsafe(nil), table: T.unsafe(nil)); end

  # source://pghero//lib/pghero/methods/tables.rb#30
  def unused_tables; end
end

# source://pghero//lib/pghero/methods/users.rb#3
module PgHero::Methods::Users
  # documented as unsafe to pass user input
  # identifiers are now quoted, but still not officially supported
  #
  # source://pghero//lib/pghero/methods/users.rb#6
  def create_user(user, password: T.unsafe(nil), schema: T.unsafe(nil), database: T.unsafe(nil), readonly: T.unsafe(nil), tables: T.unsafe(nil)); end

  # documented as unsafe to pass user input
  # identifiers are now quoted, but still not officially supported
  #
  # source://pghero//lib/pghero/methods/users.rb#50
  def drop_user(user, schema: T.unsafe(nil), database: T.unsafe(nil)); end

  private

  # source://pghero//lib/pghero/methods/users.rb#83
  def random_password; end

  # source://pghero//lib/pghero/methods/users.rb#88
  def table_grant_commands(privilege, tables, quoted_user); end
end

# source://pghero//lib/pghero.rb#37
class PgHero::NotEnabled < ::PgHero::Error; end

# source://pghero//lib/pghero/query_stats.rb#2
class PgHero::QueryStats < ::PgHero::Stats
  include ::PgHero::QueryStats::GeneratedAttributeMethods
  include ::PgHero::QueryStats::GeneratedAssociationMethods

  class << self
    # source://activemodel/7.1.3/lib/active_model/validations.rb#71
    def _validators; end

    # source://activerecord/7.1.3/lib/active_record/enum.rb#167
    def defined_enums; end
  end
end

# source://pghero//lib/pghero/query_stats.rb#0
module PgHero::QueryStats::GeneratedAssociationMethods; end

# source://pghero//lib/pghero/query_stats.rb#0
module PgHero::QueryStats::GeneratedAttributeMethods; end

# source://pghero//lib/pghero/space_stats.rb#2
class PgHero::SpaceStats < ::PgHero::Stats
  include ::PgHero::SpaceStats::GeneratedAttributeMethods
  include ::PgHero::SpaceStats::GeneratedAssociationMethods

  class << self
    # source://activemodel/7.1.3/lib/active_model/validations.rb#71
    def _validators; end

    # source://activerecord/7.1.3/lib/active_record/enum.rb#167
    def defined_enums; end
  end
end

# source://pghero//lib/pghero/space_stats.rb#0
module PgHero::SpaceStats::GeneratedAssociationMethods; end

# source://pghero//lib/pghero/space_stats.rb#0
module PgHero::SpaceStats::GeneratedAttributeMethods; end

# source://pghero//lib/pghero/stats.rb#2
class PgHero::Stats < ::ActiveRecord::Base
  include ::PgHero::Stats::GeneratedAttributeMethods
  include ::PgHero::Stats::GeneratedAssociationMethods

  class << self
    # source://activemodel/7.1.3/lib/active_model/validations.rb#71
    def _validators; end

    # source://activerecord/7.1.3/lib/active_record/enum.rb#167
    def defined_enums; end
  end
end

# source://pghero//lib/pghero/stats.rb#0
module PgHero::Stats::GeneratedAssociationMethods; end

# source://pghero//lib/pghero/stats.rb#0
module PgHero::Stats::GeneratedAttributeMethods; end

# source://pghero//lib/pghero/version.rb#2
PgHero::VERSION = T.let(T.unsafe(nil), String)

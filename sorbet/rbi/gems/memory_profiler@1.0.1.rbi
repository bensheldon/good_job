# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `memory_profiler` gem.
# Please instead update this file by running `bin/tapioca gem memory_profiler`.

# source://memory_profiler//lib/memory_profiler/version.rb#3
module MemoryProfiler
  class << self
    # source://memory_profiler//lib/memory_profiler.rb#15
    def report(opts = T.unsafe(nil), &block); end

    # source://memory_profiler//lib/memory_profiler.rb#19
    def start(opts = T.unsafe(nil)); end

    # source://memory_profiler//lib/memory_profiler.rb#26
    def stop; end
  end
end

# source://memory_profiler//lib/memory_profiler/cli.rb#6
class MemoryProfiler::CLI
  # source://memory_profiler//lib/memory_profiler/cli.rb#31
  def run(argv); end

  private

  # source://memory_profiler//lib/memory_profiler/cli.rb#61
  def option_parser(options); end

  # source://memory_profiler//lib/memory_profiler/cli.rb#141
  def reporter_options(options); end

  # source://memory_profiler//lib/memory_profiler/cli.rb#145
  def results_options(options); end
end

# source://memory_profiler//lib/memory_profiler/cli.rb#7
MemoryProfiler::CLI::BIN_NAME = T.let(T.unsafe(nil), String)

# source://memory_profiler//lib/memory_profiler/cli.rb#13
MemoryProfiler::CLI::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://memory_profiler//lib/memory_profiler/cli.rb#17
MemoryProfiler::CLI::REPORTER_KEYS = T.let(T.unsafe(nil), Array)

# source://memory_profiler//lib/memory_profiler/cli.rb#21
MemoryProfiler::CLI::RESULTS_KEYS = T.let(T.unsafe(nil), Array)

# source://memory_profiler//lib/memory_profiler/cli.rb#11
MemoryProfiler::CLI::STATUS_ERROR = T.let(T.unsafe(nil), Integer)

# source://memory_profiler//lib/memory_profiler/cli.rb#10
MemoryProfiler::CLI::STATUS_SUCCESS = T.let(T.unsafe(nil), Integer)

# source://memory_profiler//lib/memory_profiler/cli.rb#8
MemoryProfiler::CLI::VERSION_INFO = T.let(T.unsafe(nil), String)

# source://memory_profiler//lib/memory_profiler/helpers.rb#4
class MemoryProfiler::Helpers
  # @return [Helpers] a new instance of Helpers
  #
  # source://memory_profiler//lib/memory_profiler/helpers.rb#6
  def initialize; end

  # source://memory_profiler//lib/memory_profiler/helpers.rb#13
  def guess_gem(path); end

  # source://memory_profiler//lib/memory_profiler/helpers.rb#54
  def lookup_class_name(klass); end

  # source://memory_profiler//lib/memory_profiler/helpers.rb#28
  def lookup_location(file, line); end

  # source://memory_profiler//lib/memory_profiler/helpers.rb#63
  def lookup_string(obj); end

  # source://memory_profiler//lib/memory_profiler/helpers.rb#34
  def object_class(obj); end
end

# source://memory_profiler//lib/memory_profiler/helpers.rb#32
MemoryProfiler::Helpers::KERNEL_CLASS_METHOD = T.let(T.unsafe(nil), UnboundMethod)

# source://memory_profiler//lib/memory_profiler/monochrome.rb#5
class MemoryProfiler::Monochrome
  # source://memory_profiler//lib/memory_profiler/monochrome.rb#15
  def line(text); end

  # source://memory_profiler//lib/memory_profiler/monochrome.rb#7
  def path(text); end

  # source://memory_profiler//lib/memory_profiler/monochrome.rb#11
  def string(text); end
end

# source://memory_profiler//lib/memory_profiler/polychrome.rb#5
class MemoryProfiler::Polychrome
  # source://memory_profiler//lib/memory_profiler/polychrome.rb#15
  def line(text); end

  # source://memory_profiler//lib/memory_profiler/polychrome.rb#7
  def path(text); end

  # source://memory_profiler//lib/memory_profiler/polychrome.rb#11
  def string(text); end

  private

  # source://memory_profiler//lib/memory_profiler/polychrome.rb#53
  def bg_black(str); end

  # source://memory_profiler//lib/memory_profiler/polychrome.rb#69
  def bg_blue(str); end

  # source://memory_profiler//lib/memory_profiler/polychrome.rb#65
  def bg_brown(str); end

  # source://memory_profiler//lib/memory_profiler/polychrome.rb#77
  def bg_cyan(str); end

  # source://memory_profiler//lib/memory_profiler/polychrome.rb#81
  def bg_gray(str); end

  # source://memory_profiler//lib/memory_profiler/polychrome.rb#61
  def bg_green(str); end

  # source://memory_profiler//lib/memory_profiler/polychrome.rb#73
  def bg_magenta(str); end

  # source://memory_profiler//lib/memory_profiler/polychrome.rb#57
  def bg_red(str); end

  # source://memory_profiler//lib/memory_profiler/polychrome.rb#21
  def black(str); end

  # source://memory_profiler//lib/memory_profiler/polychrome.rb#37
  def blue(str); end

  # source://memory_profiler//lib/memory_profiler/polychrome.rb#85
  def bold(str); end

  # source://memory_profiler//lib/memory_profiler/polychrome.rb#33
  def brown(str); end

  # source://memory_profiler//lib/memory_profiler/polychrome.rb#45
  def cyan(str); end

  # source://memory_profiler//lib/memory_profiler/polychrome.rb#49
  def gray(str); end

  # source://memory_profiler//lib/memory_profiler/polychrome.rb#29
  def green(str); end

  # source://memory_profiler//lib/memory_profiler/polychrome.rb#41
  def magenta(str); end

  # source://memory_profiler//lib/memory_profiler/polychrome.rb#25
  def red(str); end

  # source://memory_profiler//lib/memory_profiler/polychrome.rb#89
  def reverse_color(str); end
end

# Reporter is the top level API used for generating memory reports.
#
# @example Measure object allocation in a block
#   report = Reporter.report(top: 50) do
#   5.times { "foo" }
#   end
#
# source://memory_profiler//lib/memory_profiler/reporter.rb#11
class MemoryProfiler::Reporter
  # @return [Reporter] a new instance of Reporter
  #
  # source://memory_profiler//lib/memory_profiler/reporter.rb#18
  def initialize(opts = T.unsafe(nil)); end

  # Returns the value of attribute generation.
  #
  # source://memory_profiler//lib/memory_profiler/reporter.rb#16
  def generation; end

  # Returns the value of attribute report_results.
  #
  # source://memory_profiler//lib/memory_profiler/reporter.rb#16
  def report_results; end

  # Collects object allocation and memory of ruby code inside of passed block.
  #
  # source://memory_profiler//lib/memory_profiler/reporter.rb#73
  def run(&block); end

  # source://memory_profiler//lib/memory_profiler/reporter.rb#36
  def start; end

  # source://memory_profiler//lib/memory_profiler/reporter.rb#45
  def stop; end

  # Returns the value of attribute top.
  #
  # source://memory_profiler//lib/memory_profiler/reporter.rb#16
  def top; end

  # Returns the value of attribute trace.
  #
  # source://memory_profiler//lib/memory_profiler/reporter.rb#16
  def trace; end

  private

  # Iterates through objects in memory of a given generation.
  # Stores results along with meta data of objects collected.
  #
  # source://memory_profiler//lib/memory_profiler/reporter.rb#90
  def object_list(generation); end

  class << self
    # Returns the value of attribute current_reporter.
    #
    # source://memory_profiler//lib/memory_profiler/reporter.rb#13
    def current_reporter; end

    # Sets the attribute current_reporter
    #
    # @param value the value to set the attribute current_reporter to.
    #
    # source://memory_profiler//lib/memory_profiler/reporter.rb#13
    def current_reporter=(_arg0); end

    # Helper for generating new reporter and running against block.
    #
    # @option opts
    # @option opts
    # @option opts
    # @option opts
    # @param opts [Hash] the options to create a report with
    # @return [MemoryProfiler::Results]
    #
    # source://memory_profiler//lib/memory_profiler/reporter.rb#32
    def report(opts = T.unsafe(nil), &block); end
  end
end

# source://memory_profiler//lib/memory_profiler/results.rb#4
class MemoryProfiler::Results
  # @return [Results] a new instance of Results
  #
  # source://memory_profiler//lib/memory_profiler/results.rb#50
  def initialize; end

  # source://memory_profiler//lib/memory_profiler/results.rb#28
  def allocated_memory_by_class; end

  # source://memory_profiler//lib/memory_profiler/results.rb#28
  def allocated_memory_by_file; end

  # source://memory_profiler//lib/memory_profiler/results.rb#28
  def allocated_memory_by_gem; end

  # source://memory_profiler//lib/memory_profiler/results.rb#28
  def allocated_memory_by_location; end

  # source://memory_profiler//lib/memory_profiler/results.rb#28
  def allocated_objects_by_class; end

  # source://memory_profiler//lib/memory_profiler/results.rb#28
  def allocated_objects_by_file; end

  # source://memory_profiler//lib/memory_profiler/results.rb#28
  def allocated_objects_by_gem; end

  # source://memory_profiler//lib/memory_profiler/results.rb#28
  def allocated_objects_by_location; end

  # source://memory_profiler//lib/memory_profiler/results.rb#170
  def normalize_path(path); end

  # Output the results of the report
  #
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @param options [Hash] the options for output
  # @param opts [Hash] a customizable set of options
  #
  # source://memory_profiler//lib/memory_profiler/results.rb#123
  def pretty_print(io = T.unsafe(nil), **options); end

  # source://memory_profiler//lib/memory_profiler/results.rb#160
  def print_string_reports(io, options); end

  # source://memory_profiler//lib/memory_profiler/results.rb#56
  def register_results(allocated, retained, top); end

  # source://memory_profiler//lib/memory_profiler/results.rb#28
  def retained_memory_by_class; end

  # source://memory_profiler//lib/memory_profiler/results.rb#28
  def retained_memory_by_file; end

  # source://memory_profiler//lib/memory_profiler/results.rb#28
  def retained_memory_by_gem; end

  # source://memory_profiler//lib/memory_profiler/results.rb#28
  def retained_memory_by_location; end

  # source://memory_profiler//lib/memory_profiler/results.rb#28
  def retained_objects_by_class; end

  # source://memory_profiler//lib/memory_profiler/results.rb#28
  def retained_objects_by_file; end

  # source://memory_profiler//lib/memory_profiler/results.rb#28
  def retained_objects_by_gem; end

  # source://memory_profiler//lib/memory_profiler/results.rb#28
  def retained_objects_by_location; end

  # source://memory_profiler//lib/memory_profiler/results.rb#77
  def scale_bytes(bytes); end

  # source://memory_profiler//lib/memory_profiler/results.rb#85
  def string_report(data, top); end

  # source://memory_profiler//lib/memory_profiler/results.rb#69
  def strings_allocated; end

  # Sets the attribute strings_allocated
  #
  # @param value the value to set the attribute strings_allocated to.
  #
  # source://memory_profiler//lib/memory_profiler/results.rb#46
  def strings_allocated=(_arg0); end

  # source://memory_profiler//lib/memory_profiler/results.rb#73
  def strings_retained; end

  # Sets the attribute strings_retained
  #
  # @param value the value to set the attribute strings_retained to.
  #
  # source://memory_profiler//lib/memory_profiler/results.rb#46
  def strings_retained=(_arg0); end

  # Returns the value of attribute total_allocated.
  #
  # source://memory_profiler//lib/memory_profiler/results.rb#47
  def total_allocated; end

  # Sets the attribute total_allocated
  #
  # @param value the value to set the attribute total_allocated to.
  #
  # source://memory_profiler//lib/memory_profiler/results.rb#47
  def total_allocated=(_arg0); end

  # Returns the value of attribute total_allocated_memsize.
  #
  # source://memory_profiler//lib/memory_profiler/results.rb#48
  def total_allocated_memsize; end

  # Sets the attribute total_allocated_memsize
  #
  # @param value the value to set the attribute total_allocated_memsize to.
  #
  # source://memory_profiler//lib/memory_profiler/results.rb#48
  def total_allocated_memsize=(_arg0); end

  # Returns the value of attribute total_retained.
  #
  # source://memory_profiler//lib/memory_profiler/results.rb#47
  def total_retained; end

  # Sets the attribute total_retained
  #
  # @param value the value to set the attribute total_retained to.
  #
  # source://memory_profiler//lib/memory_profiler/results.rb#47
  def total_retained=(_arg0); end

  # Returns the value of attribute total_retained_memsize.
  #
  # source://memory_profiler//lib/memory_profiler/results.rb#48
  def total_retained_memsize; end

  # Sets the attribute total_retained_memsize
  #
  # @param value the value to set the attribute total_retained_memsize to.
  #
  # source://memory_profiler//lib/memory_profiler/results.rb#48
  def total_retained_memsize=(_arg0); end

  private

  # source://memory_profiler//lib/memory_profiler/results.rb#205
  def dump_data(io, type, metric, name, options); end

  # source://memory_profiler//lib/memory_profiler/results.rb#225
  def dump_strings(io, type, options); end

  # source://memory_profiler//lib/memory_profiler/results.rb#201
  def print_output(io, topic, detail); end

  # source://memory_profiler//lib/memory_profiler/results.rb#195
  def print_title(io, title); end

  # source://memory_profiler//lib/memory_profiler/results.rb#187
  def total_memsize(stat_hash); end

  class << self
    # source://memory_profiler//lib/memory_profiler/results.rb#21
    def register_type(name, stat_attribute); end
  end
end

# source://memory_profiler//lib/memory_profiler/results.rb#18
MemoryProfiler::Results::METRICS = T.let(T.unsafe(nil), Array)

# source://memory_profiler//lib/memory_profiler/results.rb#19
MemoryProfiler::Results::NAMES = T.let(T.unsafe(nil), Array)

# source://memory_profiler//lib/memory_profiler/results.rb#17
MemoryProfiler::Results::TYPES = T.let(T.unsafe(nil), Array)

# source://memory_profiler//lib/memory_profiler/results.rb#5
MemoryProfiler::Results::UNIT_PREFIXES = T.let(T.unsafe(nil), Hash)

# source://memory_profiler//lib/memory_profiler/stat.rb#4
class MemoryProfiler::Stat
  # @return [Stat] a new instance of Stat
  #
  # source://memory_profiler//lib/memory_profiler/stat.rb#8
  def initialize(class_name, gem, file, location, memsize, string_value); end

  # Returns the value of attribute class_name.
  #
  # source://memory_profiler//lib/memory_profiler/stat.rb#6
  def class_name; end

  # Returns the value of attribute file.
  #
  # source://memory_profiler//lib/memory_profiler/stat.rb#6
  def file; end

  # Returns the value of attribute gem.
  #
  # source://memory_profiler//lib/memory_profiler/stat.rb#6
  def gem; end

  # Returns the value of attribute location.
  #
  # source://memory_profiler//lib/memory_profiler/stat.rb#6
  def location; end

  # Returns the value of attribute memsize.
  #
  # source://memory_profiler//lib/memory_profiler/stat.rb#6
  def memsize; end

  # Returns the value of attribute string_value.
  #
  # source://memory_profiler//lib/memory_profiler/stat.rb#6
  def string_value; end
end

# source://memory_profiler//lib/memory_profiler/stat_hash.rb#4
class MemoryProfiler::StatHash < ::Hash
  include ::MemoryProfiler::TopN
end

# source://memory_profiler//lib/memory_profiler/top_n.rb#4
module MemoryProfiler::TopN
  # Fast approach for determining the top_n entries in a Hash of Stat objects.
  # Returns results for both memory (memsize summed) and objects allocated (count) as a tuple.
  #
  # source://memory_profiler//lib/memory_profiler/top_n.rb#7
  def top_n(max, metric_method); end

  # source://memory_profiler//lib/memory_profiler/top_n.rb#14
  def top_n_memory(max, metric_method); end

  # source://memory_profiler//lib/memory_profiler/top_n.rb#29
  def top_n_objects(max, metric_method); end
end

# source://memory_profiler//lib/memory_profiler/version.rb#4
MemoryProfiler::VERSION = T.let(T.unsafe(nil), String)

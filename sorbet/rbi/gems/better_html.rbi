# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/better_html/all/better_html.rbi
#
# better_html-1.0.16

module BetterHtml
  def self.config; end
  def self.config=(new_config); end
  def self.configure; end
end
class BetterHtml::Config
  def javascript_attribute_name?(name); end
  def javascript_safe_method?(name); end
  def lodash_safe_javascript_expression?(code); end
  extend SmartProperties::ClassMethods
  include Anonymous_Module_24
  include SmartProperties
end
module Anonymous_Module_24
  def allow_single_quoted_attributes; end
  def allow_single_quoted_attributes=(value); end
  def allow_unquoted_attributes; end
  def allow_unquoted_attributes=(value); end
  def javascript_attribute_names; end
  def javascript_attribute_names=(value); end
  def javascript_safe_methods; end
  def javascript_safe_methods=(value); end
  def lodash_safe_javascript_expression; end
  def lodash_safe_javascript_expression=(value); end
  def partial_attribute_name_pattern; end
  def partial_attribute_name_pattern=(value); end
  def partial_tag_name_pattern; end
  def partial_tag_name_pattern=(value); end
  def template_exclusion_filter; end
  def template_exclusion_filter=(value); end
end
module BetterHtml::Helpers
  def html_attributes(args); end
end
class BetterHtml::InterpolatorError < RuntimeError
end
class BetterHtml::DontInterpolateHere < BetterHtml::InterpolatorError
end
class BetterHtml::UnsafeHtmlError < BetterHtml::InterpolatorError
end
class BetterHtml::HtmlError < RuntimeError
end
class BetterHtml::Errors < Array
  def add(arg0); end
end
class BetterHtml::HtmlAttributes
  def initialize(data); end
  def to_s; end
end
class BetterHtml::BetterErb
  def content_types; end
  def content_types=(val); end
  def self.content_types; end
  def self.content_types=(val); end
  def self.prepend!; end
end
module BetterHtml::BetterErb::RuntimeChecks
  def add_expr_auto_escaped(src, code, auto_escape); end
  def block_check(src, code); end
  def build_location(line, column, length); end
  def check_attribute_name(type, start, stop, line, column); end
  def check_parser_errors; end
  def check_quoted_value(type, start, stop, line, column); end
  def check_tag_name(type, start, stop, line, column); end
  def check_token(type, *args); end
  def check_unquoted_value(type, start, stop, line, column); end
  def class_name; end
  def extract_line(line); end
  def initialize(erb, config: nil, **options); end
  def parser_context; end
  def validate!; end
  def wrap_method; end
end
class BetterHtml::BetterErb::ErubiImplementation < ActionView::Template::Handlers::ERB::Erubi
  def add_code(code); end
  def add_expression(indicator, code); end
  def add_text(text); end
  def escape_text(text); end
  include BetterHtml::BetterErb::RuntimeChecks
end
class BetterHtml::BetterErb::ValidatedOutputBuffer
  def html_safe; end
  def html_safe?; end
  def self.wrap(output, context, code, auto_escape); end
  def to_s; end
end
class BetterHtml::BetterErb::ValidatedOutputBuffer::Context
  def auto_escape_html_safe_value(arg); end
  def initialize(output, context, code, auto_escape); end
  def properly_escaped(value); end
  def safe_after_attribute_name_append=(value); end
  def safe_after_equal_append=(value); end
  def safe_attribute_name_append=(value); end
  def safe_comment_append=(value); end
  def safe_none_append=(value); end
  def safe_quoted_value_append=(value); end
  def safe_rawtext_append=(value); end
  def safe_space_after_attribute_append=(value); end
  def safe_tag_append=(value); end
  def safe_tag_name_append=(value); end
  def safe_unquoted_value_append=(value); end
end
module BetterHtml::BetterErb::ConditionalImplementation
  def call(template, source = nil); end
  def generate(template, source); end
end
class BetterHtml::Railtie < Rails::Railtie
end
